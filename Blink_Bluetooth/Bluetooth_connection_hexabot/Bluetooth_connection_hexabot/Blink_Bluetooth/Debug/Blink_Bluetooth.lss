
Blink_Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800200  00000f38  00000fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000143  0080037a  0080037a  00001146  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001146  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a6bf  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000242e  00000000  00000000  0000bbaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e9b  00000000  00000000  0000dfdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000938  00000000  00000000  0000fe78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000024f2  00000000  00000000  000107b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000303f  00000000  00000000  00012ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00015ce1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0f c1       	rjmp	.+542    	; 0x220 <__ctors_end>
   2:	00 00       	nop
   4:	3b c1       	rjmp	.+630    	; 0x27c <__bad_interrupt>
   6:	00 00       	nop
   8:	39 c1       	rjmp	.+626    	; 0x27c <__bad_interrupt>
   a:	00 00       	nop
   c:	37 c1       	rjmp	.+622    	; 0x27c <__bad_interrupt>
   e:	00 00       	nop
  10:	35 c1       	rjmp	.+618    	; 0x27c <__bad_interrupt>
  12:	00 00       	nop
  14:	33 c1       	rjmp	.+614    	; 0x27c <__bad_interrupt>
  16:	00 00       	nop
  18:	31 c1       	rjmp	.+610    	; 0x27c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2f c1       	rjmp	.+606    	; 0x27c <__bad_interrupt>
  1e:	00 00       	nop
  20:	2d c1       	rjmp	.+602    	; 0x27c <__bad_interrupt>
  22:	00 00       	nop
  24:	2b c1       	rjmp	.+598    	; 0x27c <__bad_interrupt>
  26:	00 00       	nop
  28:	29 c1       	rjmp	.+594    	; 0x27c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	27 c1       	rjmp	.+590    	; 0x27c <__bad_interrupt>
  2e:	00 00       	nop
  30:	25 c1       	rjmp	.+586    	; 0x27c <__bad_interrupt>
  32:	00 00       	nop
  34:	23 c1       	rjmp	.+582    	; 0x27c <__bad_interrupt>
  36:	00 00       	nop
  38:	21 c1       	rjmp	.+578    	; 0x27c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1f c1       	rjmp	.+574    	; 0x27c <__bad_interrupt>
  3e:	00 00       	nop
  40:	1d c1       	rjmp	.+570    	; 0x27c <__bad_interrupt>
  42:	00 00       	nop
  44:	1b c1       	rjmp	.+566    	; 0x27c <__bad_interrupt>
  46:	00 00       	nop
  48:	19 c1       	rjmp	.+562    	; 0x27c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	17 c1       	rjmp	.+558    	; 0x27c <__bad_interrupt>
  4e:	00 00       	nop
  50:	15 c1       	rjmp	.+554    	; 0x27c <__bad_interrupt>
  52:	00 00       	nop
  54:	13 c1       	rjmp	.+550    	; 0x27c <__bad_interrupt>
  56:	00 00       	nop
  58:	11 c1       	rjmp	.+546    	; 0x27c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d6 c5       	rjmp	.+2988   	; 0xc0a <__vector_23>
  5e:	00 00       	nop
  60:	0d c1       	rjmp	.+538    	; 0x27c <__bad_interrupt>
  62:	00 00       	nop
  64:	91 c3       	rjmp	.+1826   	; 0x788 <__vector_25>
  66:	00 00       	nop
  68:	c5 c3       	rjmp	.+1930   	; 0x7f4 <__vector_26>
  6a:	00 00       	nop
  6c:	07 c1       	rjmp	.+526    	; 0x27c <__bad_interrupt>
  6e:	00 00       	nop
  70:	05 c1       	rjmp	.+522    	; 0x27c <__bad_interrupt>
  72:	00 00       	nop
  74:	03 c1       	rjmp	.+518    	; 0x27c <__bad_interrupt>
  76:	00 00       	nop
  78:	01 c1       	rjmp	.+514    	; 0x27c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ff c0       	rjmp	.+510    	; 0x27c <__bad_interrupt>
  7e:	00 00       	nop
  80:	fd c0       	rjmp	.+506    	; 0x27c <__bad_interrupt>
  82:	00 00       	nop
  84:	fb c0       	rjmp	.+502    	; 0x27c <__bad_interrupt>
  86:	00 00       	nop
  88:	f9 c0       	rjmp	.+498    	; 0x27c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	f7 c0       	rjmp	.+494    	; 0x27c <__bad_interrupt>
  8e:	00 00       	nop
  90:	f5 c0       	rjmp	.+490    	; 0x27c <__bad_interrupt>
  92:	00 00       	nop
  94:	f3 c0       	rjmp	.+486    	; 0x27c <__bad_interrupt>
  96:	00 00       	nop
  98:	f1 c0       	rjmp	.+482    	; 0x27c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ef c0       	rjmp	.+478    	; 0x27c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	ed c0       	rjmp	.+474    	; 0x27c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	eb c0       	rjmp	.+470    	; 0x27c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e9 c0       	rjmp	.+466    	; 0x27c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	e7 c0       	rjmp	.+462    	; 0x27c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	e5 c0       	rjmp	.+458    	; 0x27c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	e3 c0       	rjmp	.+454    	; 0x27c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	e1 c0       	rjmp	.+450    	; 0x27c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	df c0       	rjmp	.+446    	; 0x27c <__bad_interrupt>
  be:	00 00       	nop
  c0:	dd c0       	rjmp	.+442    	; 0x27c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	db c0       	rjmp	.+438    	; 0x27c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	d9 c0       	rjmp	.+434    	; 0x27c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	d7 c0       	rjmp	.+430    	; 0x27c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	d5 c0       	rjmp	.+426    	; 0x27c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	d3 c0       	rjmp	.+422    	; 0x27c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ec c3       	rjmp	.+2008   	; 0x8b2 <__vector_54>
  da:	00 00       	nop
  dc:	20 c4       	rjmp	.+2112   	; 0x91e <__vector_55>
  de:	00 00       	nop
  e0:	cd c0       	rjmp	.+410    	; 0x27c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	8e 01       	movw	r16, r28
  e6:	97 01       	movw	r18, r14
  e8:	a1 01       	movw	r20, r2
  ea:	aa 01       	movw	r20, r20
  ec:	b2 01       	movw	r22, r4
  ee:	bb 01       	movw	r22, r22
  f0:	c4 01       	movw	r24, r8
  f2:	cb 06       	cpc	r12, r27
  f4:	ce 06       	cpc	r12, r30
  f6:	bd 06       	cpc	r11, r29
  f8:	c1 06       	cpc	r12, r17
  fa:	c7 06       	cpc	r12, r23
  fc:	05 07       	cpc	r16, r21
  fe:	d2 06       	cpc	r13, r18
 100:	d6 06       	cpc	r13, r22
 102:	dc 06       	cpc	r13, r28
 104:	e0 06       	cpc	r14, r16
 106:	e4 06       	cpc	r14, r20
 108:	ea 06       	cpc	r14, r26
 10a:	ee 06       	cpc	r14, r30
 10c:	f2 06       	cpc	r15, r18
 10e:	05 07       	cpc	r16, r21
 110:	f8 06       	cpc	r15, r24
 112:	fc 06       	cpc	r15, r28
 114:	00 07       	cpc	r16, r16

00000116 <__trampolines_end>:
 116:	00 00       	nop
 118:	0a 0b       	sbc	r16, r26
 11a:	02 09       	sbc	r16, r2
 11c:	0c 0d       	add	r16, r12
 11e:	0e 08       	sbc	r0, r14
 120:	07 03       	mulsu	r16, r23
 122:	04 01       	movw	r0, r8
	...
 140:	00 00       	nop
 142:	12 11       	cpse	r17, r2
 144:	10 00       	.word	0x0010	; ????
	...

0000015c <digital_pin_to_bit_mask_PGM>:
 15c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 16c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 17c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 18c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 19c:	04 08 10 20 40 80                                   ... @.

000001a2 <digital_pin_to_port_PGM>:
 1a2:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1b2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1c2:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1d2:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1e2:	0b 0b 0b 0b 0b 0b                                   ......

000001e8 <port_to_output_PGM>:
 1e8:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1f8:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000202 <port_to_mode_PGM>:
 202:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 212:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000021c <__ctors_start>:
 21c:	2c 04       	cpc	r2, r12
 21e:	c1 04       	cpc	r12, r1

00000220 <__ctors_end>:
 220:	11 24       	eor	r1, r1
 222:	1f be       	out	0x3f, r1	; 63
 224:	cf ef       	ldi	r28, 0xFF	; 255
 226:	d1 e2       	ldi	r29, 0x21	; 33
 228:	de bf       	out	0x3e, r29	; 62
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	00 e0       	ldi	r16, 0x00	; 0
 22e:	0c bf       	out	0x3c, r16	; 60

00000230 <__do_copy_data>:
 230:	13 e0       	ldi	r17, 0x03	; 3
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b2 e0       	ldi	r27, 0x02	; 2
 236:	e8 e3       	ldi	r30, 0x38	; 56
 238:	ff e0       	ldi	r31, 0x0F	; 15
 23a:	00 e0       	ldi	r16, 0x00	; 0
 23c:	0b bf       	out	0x3b, r16	; 59
 23e:	02 c0       	rjmp	.+4      	; 0x244 <__do_copy_data+0x14>
 240:	07 90       	elpm	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	aa 37       	cpi	r26, 0x7A	; 122
 246:	b1 07       	cpc	r27, r17
 248:	d9 f7       	brne	.-10     	; 0x240 <__do_copy_data+0x10>

0000024a <__do_clear_bss>:
 24a:	24 e0       	ldi	r18, 0x04	; 4
 24c:	aa e7       	ldi	r26, 0x7A	; 122
 24e:	b3 e0       	ldi	r27, 0x03	; 3
 250:	01 c0       	rjmp	.+2      	; 0x254 <.do_clear_bss_start>

00000252 <.do_clear_bss_loop>:
 252:	1d 92       	st	X+, r1

00000254 <.do_clear_bss_start>:
 254:	ad 3b       	cpi	r26, 0xBD	; 189
 256:	b2 07       	cpc	r27, r18
 258:	e1 f7       	brne	.-8      	; 0x252 <.do_clear_bss_loop>

0000025a <__do_global_ctors>:
 25a:	11 e0       	ldi	r17, 0x01	; 1
 25c:	c0 e1       	ldi	r28, 0x10	; 16
 25e:	d1 e0       	ldi	r29, 0x01	; 1
 260:	00 e0       	ldi	r16, 0x00	; 0
 262:	05 c0       	rjmp	.+10     	; 0x26e <__do_global_ctors+0x14>
 264:	21 97       	sbiw	r28, 0x01	; 1
 266:	01 09       	sbc	r16, r1
 268:	80 2f       	mov	r24, r16
 26a:	fe 01       	movw	r30, r28
 26c:	5b d6       	rcall	.+3254   	; 0xf24 <__tablejump2__>
 26e:	ce 30       	cpi	r28, 0x0E	; 14
 270:	d1 07       	cpc	r29, r17
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 07       	cpc	r16, r24
 276:	b1 f7       	brne	.-20     	; 0x264 <__do_global_ctors+0xa>
 278:	b2 d3       	rcall	.+1892   	; 0x9de <main>
 27a:	5c c6       	rjmp	.+3256   	; 0xf34 <_exit>

0000027c <__bad_interrupt>:
 27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>

0000027e <_ZN18BluetoothInterfaceC1Ev>:
	//int appValue = (int) tempappValue,
	
	appValue = appValue*param;
	return appValue;

}
 27e:	fc 01       	movw	r30, r24
 280:	12 82       	std	Z+2, r1	; 0x02
 282:	11 82       	std	Z+1, r1	; 0x01
 284:	14 82       	std	Z+4, r1	; 0x04
 286:	13 82       	std	Z+3, r1	; 0x03
 288:	16 82       	std	Z+6, r1	; 0x06
 28a:	15 82       	std	Z+5, r1	; 0x05
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	8d e0       	ldi	r24, 0x0D	; 13
 290:	bd d5       	rcall	.+2938   	; 0xe0c <pinMode>
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	ba d5       	rcall	.+2932   	; 0xe0c <pinMode>
 298:	26 e0       	ldi	r18, 0x06	; 6
 29a:	40 e8       	ldi	r20, 0x80	; 128
 29c:	55 e2       	ldi	r21, 0x25	; 37
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	87 e1       	ldi	r24, 0x17	; 23
 2a4:	94 e0       	ldi	r25, 0x04	; 4
 2a6:	0d c2       	rjmp	.+1050   	; 0x6c2 <_ZN14HardwareSerial5beginEmh>

000002a8 <_ZN18BluetoothInterface13getDirectionXEv>:
int BluetoothInterface::getDirectionX(){
	return m_diretionX;

}
 2a8:	fc 01       	movw	r30, r24
 2aa:	81 81       	ldd	r24, Z+1	; 0x01
 2ac:	92 81       	ldd	r25, Z+2	; 0x02
 2ae:	08 95       	ret

000002b0 <_ZN18BluetoothInterface13getDirectionYEv>:

int BluetoothInterface::getDirectionY(){
	return m_diretionY;
}
 2b0:	fc 01       	movw	r30, r24
 2b2:	83 81       	ldd	r24, Z+3	; 0x03
 2b4:	94 81       	ldd	r25, Z+4	; 0x04
 2b6:	08 95       	ret

000002b8 <_ZN18BluetoothInterface13getDirectionZEv>:

int BluetoothInterface::getDirectionZ(){
	return m_diretionZ;
}
 2b8:	fc 01       	movw	r30, r24
 2ba:	85 81       	ldd	r24, Z+5	; 0x05
 2bc:	96 81       	ldd	r25, Z+6	; 0x06
 2be:	08 95       	ret

000002c0 <_ZN18BluetoothInterfaceD1Ev>:
// default destructor
BluetoothInterface::~BluetoothInterface()
 2c0:	08 95       	ret

000002c2 <_ZN18BluetoothInterface9readInputEv>:
int BluetoothInterface::int2char(char temp){
	int integer = (int) temp - '0';
	return integer;
}

unsigned char BluetoothInterface::readInput(){
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	8c 01       	movw	r16, r24
	char servo1;
	char servo2;
	char servo3;

	int count;
	if(BluetoothSerial.available() > 0)
 2d2:	87 e1       	ldi	r24, 0x17	; 23
 2d4:	94 e0       	ldi	r25, 0x04	; 4
 2d6:	f5 d0       	rcall	.+490    	; 0x4c2 <_ZN14HardwareSerial9availableEv>
 2d8:	18 16       	cp	r1, r24
 2da:	19 06       	cpc	r1, r25
 2dc:	0c f0       	brlt	.+2      	; 0x2e0 <_ZN18BluetoothInterface9readInputEv+0x1e>
 2de:	7d c0       	rjmp	.+250    	; 0x3da <_ZN18BluetoothInterface9readInputEv+0x118>
	{
		data = Serial.read();
 2e0:	8a e7       	ldi	r24, 0x7A	; 122
 2e2:	93 e0       	ldi	r25, 0x03	; 3
 2e4:	08 d1       	rcall	.+528    	; 0x4f6 <_ZN14HardwareSerial4readEv>
 2e6:	ec 01       	movw	r28, r24
		Serial.println(data);
 2e8:	4a e0       	ldi	r20, 0x0A	; 10
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	bc 01       	movw	r22, r24
 2ee:	8a e7       	ldi	r24, 0x7A	; 122
 2f0:	93 e0       	ldi	r25, 0x03	; 3
 2f2:	7b d4       	rcall	.+2294   	; 0xbea <_ZN5Print7printlnEii>
		Serial.print("Count: ");
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	72 e0       	ldi	r23, 0x02	; 2
 2f8:	8a e7       	ldi	r24, 0x7A	; 122
 2fa:	93 e0       	ldi	r25, 0x03	; 3
 2fc:	b9 d3       	rcall	.+1906   	; 0xa70 <_ZN5Print5printEPKc>
		Serial.println(count);
 2fe:	4a e0       	ldi	r20, 0x0A	; 10
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	8a e7       	ldi	r24, 0x7A	; 122
 308:	93 e0       	ldi	r25, 0x03	; 3
 30a:	6f d4       	rcall	.+2270   	; 0xbea <_ZN5Print7printlnEii>
		switch (count)
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	fb 01       	movw	r30, r22
 312:	88 27       	eor	r24, r24
 314:	ee 58       	subi	r30, 0x8E	; 142
 316:	ff 4f       	sbci	r31, 0xFF	; 255
 318:	8f 4f       	sbci	r24, 0xFF	; 255
 31a:	04 c6       	rjmp	.+3080   	; 0xf24 <__tablejump2__>
		{
			case 0:
				if(data == 'A'){
 31c:	c1 34       	cpi	r28, 0x41	; 65
 31e:	d1 05       	cpc	r29, r1
 320:	19 f4       	brne	.+6      	; 0x328 <_ZN18BluetoothInterface9readInputEv+0x66>
					count++;
					Serial.println("data = A");
 322:	68 e0       	ldi	r22, 0x08	; 8
 324:	72 e0       	ldi	r23, 0x02	; 2
 326:	34 c0       	rjmp	.+104    	; 0x390 <_ZN18BluetoothInterface9readInputEv+0xce>
				}
				else{
					Serial.println("Case 0");
 328:	61 e1       	ldi	r22, 0x11	; 17
 32a:	72 e0       	ldi	r23, 0x02	; 2
 32c:	31 c0       	rjmp	.+98     	; 0x390 <_ZN18BluetoothInterface9readInputEv+0xce>
				}
	
			break;
	
			case 1:
				if(int2char(data) >= 0 && int2char(data) < 10){
 32e:	ce 01       	movw	r24, r28
 330:	99 27       	eor	r25, r25
 332:	c0 97       	sbiw	r24, 0x30	; 48
 334:	0a 97       	sbiw	r24, 0x0a	; 10
 336:	08 f0       	brcs	.+2      	; 0x33a <_ZN18BluetoothInterface9readInputEv+0x78>
 338:	3f c0       	rjmp	.+126    	; 0x3b8 <_ZN18BluetoothInterface9readInputEv+0xf6>
					servo1 = data;
 33a:	fc 2e       	mov	r15, r28
					count++;
					Serial.print("Servo1 = ");
 33c:	67 e4       	ldi	r22, 0x47	; 71
 33e:	72 e0       	ldi	r23, 0x02	; 2
 340:	41 c0       	rjmp	.+130    	; 0x3c4 <_ZN18BluetoothInterface9readInputEv+0x102>
				}
	
			break;
	
			case 2:
				if(data == 'B'){
 342:	c2 34       	cpi	r28, 0x42	; 66
 344:	d1 05       	cpc	r29, r1
 346:	19 f4       	brne	.+6      	; 0x34e <_ZN18BluetoothInterface9readInputEv+0x8c>
					count++;
					Serial.println("data = B");
 348:	68 e1       	ldi	r22, 0x18	; 24
 34a:	72 e0       	ldi	r23, 0x02	; 2
 34c:	21 c0       	rjmp	.+66     	; 0x390 <_ZN18BluetoothInterface9readInputEv+0xce>
				}
				else{
					Serial.println("Case 2");
 34e:	61 e2       	ldi	r22, 0x21	; 33
 350:	72 e0       	ldi	r23, 0x02	; 2
 352:	1e c0       	rjmp	.+60     	; 0x390 <_ZN18BluetoothInterface9readInputEv+0xce>
				}
	
				break;
	
			case 3:
				if(int2char(data) >= 0 && int2char(data) < 10){
 354:	ce 01       	movw	r24, r28
 356:	99 27       	eor	r25, r25
 358:	c0 97       	sbiw	r24, 0x30	; 48
 35a:	0a 97       	sbiw	r24, 0x0a	; 10
 35c:	80 f1       	brcs	.+96     	; 0x3be <_ZN18BluetoothInterface9readInputEv+0xfc>
					count++;
					Serial.print("Servo2 = ");
					Serial.println(servo2);
				}
				else{
					Serial.println("Case 3");
 35e:	68 e5       	ldi	r22, 0x58	; 88
 360:	72 e0       	ldi	r23, 0x02	; 2
 362:	16 c0       	rjmp	.+44     	; 0x390 <_ZN18BluetoothInterface9readInputEv+0xce>
				}
	
			break;
	
			case 4:
				if(data == 'C'){
 364:	c3 34       	cpi	r28, 0x43	; 67
 366:	d1 05       	cpc	r29, r1
 368:	19 f4       	brne	.+6      	; 0x370 <_ZN18BluetoothInterface9readInputEv+0xae>
					count++;
					Serial.println("data = C");
 36a:	68 e2       	ldi	r22, 0x28	; 40
 36c:	72 e0       	ldi	r23, 0x02	; 2
 36e:	10 c0       	rjmp	.+32     	; 0x390 <_ZN18BluetoothInterface9readInputEv+0xce>
				}
				else{
					Serial.println("Case 4");
 370:	61 e3       	ldi	r22, 0x31	; 49
 372:	72 e0       	ldi	r23, 0x02	; 2
 374:	0d c0       	rjmp	.+26     	; 0x390 <_ZN18BluetoothInterface9readInputEv+0xce>
				}
	
				break;
	
			case 5:
				if(int2char(data) >= 0 && int2char(data) < 10){
 376:	ce 01       	movw	r24, r28
 378:	99 27       	eor	r25, r25
 37a:	c0 97       	sbiw	r24, 0x30	; 48
 37c:	0a 97       	sbiw	r24, 0x0a	; 10
 37e:	50 f5       	brcc	.+84     	; 0x3d4 <_ZN18BluetoothInterface9readInputEv+0x112>
					servo3 = data;
 380:	dc 2e       	mov	r13, r28
					count++;
					Serial.print("Servo3 = ");
 382:	69 e6       	ldi	r22, 0x69	; 105
 384:	72 e0       	ldi	r23, 0x02	; 2
 386:	1e c0       	rjmp	.+60     	; 0x3c4 <_ZN18BluetoothInterface9readInputEv+0x102>
				}
	
			break;
	
			case 6:
				if(data == '#'){
 388:	a3 97       	sbiw	r28, 0x23	; 35
					count = 0;
				}
				else{
					Serial.println("Case 6");
 38a:	29 f0       	breq	.+10     	; 0x396 <_ZN18BluetoothInterface9readInputEv+0xd4>
 38c:	68 e3       	ldi	r22, 0x38	; 56
 38e:	72 e0       	ldi	r23, 0x02	; 2
 390:	8a e7       	ldi	r24, 0x7A	; 122
 392:	93 e0       	ldi	r25, 0x03	; 3
 394:	78 d3       	rcall	.+1776   	; 0xa86 <_ZN5Print7printlnEPKc>
	
			default:
				Serial.println("default");
	
		}
		m_diretionX =  int2char(servo1);
 396:	8f 2d       	mov	r24, r15
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	c0 97       	sbiw	r24, 0x30	; 48
 39c:	f8 01       	movw	r30, r16
 39e:	92 83       	std	Z+2, r25	; 0x02
 3a0:	81 83       	std	Z+1, r24	; 0x01
		m_diretionY =  int2char(servo2);
 3a2:	8e 2d       	mov	r24, r14
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	c0 97       	sbiw	r24, 0x30	; 48
 3a8:	94 83       	std	Z+4, r25	; 0x04
 3aa:	83 83       	std	Z+3, r24	; 0x03
		m_diretionZ =  int2char(servo3);
 3ac:	8d 2d       	mov	r24, r13
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	c0 97       	sbiw	r24, 0x30	; 48
 3b2:	96 83       	std	Z+6, r25	; 0x06
 3b4:	85 83       	std	Z+5, r24	; 0x05
 3b6:	11 c0       	rjmp	.+34     	; 0x3da <_ZN18BluetoothInterface9readInputEv+0x118>
					count++;
					Serial.print("Servo1 = ");
					Serial.println(servo1);
				}
				else{
					Serial.println("Case 1");
 3b8:	61 e5       	ldi	r22, 0x51	; 81
 3ba:	72 e0       	ldi	r23, 0x02	; 2
	
				break;
	
			case 3:
				if(int2char(data) >= 0 && int2char(data) < 10){
					servo2 = data;
 3bc:	e9 cf       	rjmp	.-46     	; 0x390 <_ZN18BluetoothInterface9readInputEv+0xce>
					count++;
					Serial.print("Servo2 = ");
 3be:	ec 2e       	mov	r14, r28
	
			case 5:
				if(int2char(data) >= 0 && int2char(data) < 10){
					servo3 = data;
					count++;
					Serial.print("Servo3 = ");
 3c0:	6f e5       	ldi	r22, 0x5F	; 95
 3c2:	72 e0       	ldi	r23, 0x02	; 2
 3c4:	8a e7       	ldi	r24, 0x7A	; 122
 3c6:	93 e0       	ldi	r25, 0x03	; 3
					Serial.println(servo3);
 3c8:	53 d3       	rcall	.+1702   	; 0xa70 <_ZN5Print5printEPKc>
 3ca:	6c 2f       	mov	r22, r28
 3cc:	8a e7       	ldi	r24, 0x7A	; 122
 3ce:	93 e0       	ldi	r25, 0x03	; 3
 3d0:	6a d3       	rcall	.+1748   	; 0xaa6 <_ZN5Print7printlnEc>
 3d2:	e1 cf       	rjmp	.-62     	; 0x396 <_ZN18BluetoothInterface9readInputEv+0xd4>
				}
				else{
					Serial.println("Case 5");
 3d4:	63 e7       	ldi	r22, 0x73	; 115
 3d6:	72 e0       	ldi	r23, 0x02	; 2
 3d8:	db cf       	rjmp	.-74     	; 0x390 <_ZN18BluetoothInterface9readInputEv+0xce>
		m_diretionX =  int2char(servo1);
		m_diretionY =  int2char(servo2);
		m_diretionZ =  int2char(servo3);
	
	}
}
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	df 90       	pop	r13
 3ea:	08 95       	ret

000003ec <setup>:
}


void setup() {
	// initialize digital pin LED_BUILTIN as an output.
	pinMode(LED_BUILTIN, OUTPUT);
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	8d e0       	ldi	r24, 0x0D	; 13
 3f0:	0d d5       	rcall	.+2586   	; 0xe0c <pinMode>
	pinMode(12, OUTPUT); //also pin 12 as LED output
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	8c e0       	ldi	r24, 0x0C	; 12
 3f6:	0a d5       	rcall	.+2580   	; 0xe0c <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 3f8:	26 e0       	ldi	r18, 0x06	; 6
 3fa:	40 e8       	ldi	r20, 0x80	; 128
 3fc:	55 e2       	ldi	r21, 0x25	; 37
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	8a e7       	ldi	r24, 0x7A	; 122
 404:	93 e0       	ldi	r25, 0x03	; 3
 406:	5d d1       	rcall	.+698    	; 0x6c2 <_ZN14HardwareSerial5beginEmh>

	Serial.begin(9600);         //Sets the data rate in bits per second (baud) for serial data transmission
	Serial.println("This is the arduino for Hexapod!!!");
 408:	6a e7       	ldi	r22, 0x7A	; 122
 40a:	72 e0       	ldi	r23, 0x02	; 2
 40c:	8a e7       	ldi	r24, 0x7A	; 122
 40e:	93 e0       	ldi	r25, 0x03	; 3
 410:	3a d3       	rcall	.+1652   	; 0xa86 <_ZN5Print7printlnEPKc>
	Serial.println(" ");
 412:	66 e1       	ldi	r22, 0x16	; 22
 414:	73 e0       	ldi	r23, 0x03	; 3
 416:	8a e7       	ldi	r24, 0x7A	; 122
 418:	93 e0       	ldi	r25, 0x03	; 3
 41a:	35 d3       	rcall	.+1642   	; 0xa86 <_ZN5Print7printlnEPKc>
	Serial.println("To connect, start the LED Controller App on your Smartphone");
 41c:	6d e9       	ldi	r22, 0x9D	; 157
 41e:	72 e0       	ldi	r23, 0x02	; 2
 420:	8a e7       	ldi	r24, 0x7A	; 122
 422:	93 e0       	ldi	r25, 0x03	; 3
 424:	30 d3       	rcall	.+1632   	; 0xa86 <_ZN5Print7printlnEPKc>
	Serial.println("and connect to Bluetooth HC-05");
 426:	69 ed       	ldi	r22, 0xD9	; 217
 428:	72 e0       	ldi	r23, 0x02	; 2
 42a:	8a e7       	ldi	r24, 0x7A	; 122
 42c:	93 e0       	ldi	r25, 0x03	; 3
 42e:	2b d3       	rcall	.+1622   	; 0xa86 <_ZN5Print7printlnEPKc>

	//int count = 0;
//	BluetoothInterface to;
//	to:BluetoothInterface();	
	digitalWrite(LED_BUILTIN, HIGH); 
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	8d e0       	ldi	r24, 0x0D	; 13
 434:	27 c5       	rjmp	.+2638   	; 0xe84 <digitalWrite>

00000436 <loop>:
 436:	cf 93       	push	r28
  
}


// the loop function runs over and over again forever
void loop() {
 438:	df 93       	push	r29
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	27 97       	sbiw	r28, 0x07	; 7
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
	}
}

	*/

	BluetoothInterface myBluetoothclass;
 44a:	ce 01       	movw	r24, r28
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	17 df       	rcall	.-466    	; 0x27e <_ZN18BluetoothInterfaceC1Ev>
	myBluetoothclass.readInput();
 450:	ce 01       	movw	r24, r28
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	36 df       	rcall	.-404    	; 0x2c2 <_ZN18BluetoothInterface9readInputEv>
	
	Serial.print("Printing the Value for Servo1: ");
 456:	68 ef       	ldi	r22, 0xF8	; 248
 458:	72 e0       	ldi	r23, 0x02	; 2
 45a:	8a e7       	ldi	r24, 0x7A	; 122
 45c:	93 e0       	ldi	r25, 0x03	; 3
 45e:	08 d3       	rcall	.+1552   	; 0xa70 <_ZN5Print5printEPKc>
	Serial.println(myBluetoothclass.getDirectionX());
 460:	ce 01       	movw	r24, r28
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	21 df       	rcall	.-446    	; 0x2a8 <_ZN18BluetoothInterface13getDirectionXEv>
 466:	4a e0       	ldi	r20, 0x0A	; 10
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	bc 01       	movw	r22, r24
 46c:	8a e7       	ldi	r24, 0x7A	; 122
 46e:	93 e0       	ldi	r25, 0x03	; 3
 470:	bc d3       	rcall	.+1912   	; 0xbea <_ZN5Print7printlnEii>
 472:	68 e1       	ldi	r22, 0x18	; 24
	
	Serial.print("Printing the Value for Servo2: ");
 474:	73 e0       	ldi	r23, 0x03	; 3
 476:	8a e7       	ldi	r24, 0x7A	; 122
 478:	93 e0       	ldi	r25, 0x03	; 3
 47a:	fa d2       	rcall	.+1524   	; 0xa70 <_ZN5Print5printEPKc>
 47c:	ce 01       	movw	r24, r28
	Serial.println(myBluetoothclass.getDirectionY());
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	17 df       	rcall	.-466    	; 0x2b0 <_ZN18BluetoothInterface13getDirectionYEv>
 482:	4a e0       	ldi	r20, 0x0A	; 10
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	bc 01       	movw	r22, r24
 488:	8a e7       	ldi	r24, 0x7A	; 122
 48a:	93 e0       	ldi	r25, 0x03	; 3
 48c:	ae d3       	rcall	.+1884   	; 0xbea <_ZN5Print7printlnEii>
 48e:	68 e3       	ldi	r22, 0x38	; 56
	
	Serial.print("Printing the Value for Servo3: ");
 490:	73 e0       	ldi	r23, 0x03	; 3
 492:	8a e7       	ldi	r24, 0x7A	; 122
 494:	93 e0       	ldi	r25, 0x03	; 3
 496:	ec d2       	rcall	.+1496   	; 0xa70 <_ZN5Print5printEPKc>
 498:	ce 01       	movw	r24, r28
	Serial.println(myBluetoothclass.getDirectionZ());
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	0d df       	rcall	.-486    	; 0x2b8 <_ZN18BluetoothInterface13getDirectionZEv>
 49e:	4a e0       	ldi	r20, 0x0A	; 10
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	bc 01       	movw	r22, r24
 4a4:	8a e7       	ldi	r24, 0x7A	; 122
 4a6:	93 e0       	ldi	r25, 0x03	; 3
 4a8:	a0 d3       	rcall	.+1856   	; 0xbea <_ZN5Print7printlnEii>
 4aa:	ce 01       	movw	r24, r28
 4ac:	01 96       	adiw	r24, 0x01	; 1
	}
}

	*/

	BluetoothInterface myBluetoothclass;
 4ae:	08 df       	rcall	.-496    	; 0x2c0 <_ZN18BluetoothInterfaceD1Ev>
 4b0:	27 96       	adiw	r28, 0x07	; 7
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
// 	}
	



}
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 4c2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 4c4:	91 8d       	ldd	r25, Z+25	; 0x19
 4c6:	22 8d       	ldd	r18, Z+26	; 0x1a
 4c8:	89 2f       	mov	r24, r25
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	80 5c       	subi	r24, 0xC0	; 192
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	82 1b       	sub	r24, r18
 4d2:	91 09       	sbc	r25, r1
}
 4d4:	8f 73       	andi	r24, 0x3F	; 63
 4d6:	99 27       	eor	r25, r25
 4d8:	08 95       	ret

000004da <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 4da:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 4dc:	91 8d       	ldd	r25, Z+25	; 0x19
 4de:	82 8d       	ldd	r24, Z+26	; 0x1a
 4e0:	98 17       	cp	r25, r24
 4e2:	31 f0       	breq	.+12     	; 0x4f0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 4e4:	82 8d       	ldd	r24, Z+26	; 0x1a
 4e6:	e8 0f       	add	r30, r24
 4e8:	f1 1d       	adc	r31, r1
 4ea:	85 8d       	ldd	r24, Z+29	; 0x1d
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 4f0:	8f ef       	ldi	r24, 0xFF	; 255
 4f2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 4f4:	08 95       	ret

000004f6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 4f6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 4f8:	91 8d       	ldd	r25, Z+25	; 0x19
 4fa:	82 8d       	ldd	r24, Z+26	; 0x1a
 4fc:	98 17       	cp	r25, r24
 4fe:	61 f0       	breq	.+24     	; 0x518 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 500:	82 8d       	ldd	r24, Z+26	; 0x1a
 502:	df 01       	movw	r26, r30
 504:	a8 0f       	add	r26, r24
 506:	b1 1d       	adc	r27, r1
 508:	5d 96       	adiw	r26, 0x1d	; 29
 50a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 50c:	92 8d       	ldd	r25, Z+26	; 0x1a
 50e:	9f 5f       	subi	r25, 0xFF	; 255
 510:	9f 73       	andi	r25, 0x3F	; 63
 512:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 51c:	08 95       	ret

0000051e <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 51e:	fc 01       	movw	r30, r24
 520:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 522:	44 8d       	ldd	r20, Z+28	; 0x1c
 524:	25 2f       	mov	r18, r21
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	84 2f       	mov	r24, r20
 52a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 52c:	82 1b       	sub	r24, r18
 52e:	93 0b       	sbc	r25, r19
 530:	54 17       	cp	r21, r20
 532:	10 f0       	brcs	.+4      	; 0x538 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 534:	cf 96       	adiw	r24, 0x3f	; 63
 536:	08 95       	ret
  return tail - head - 1;
 538:	01 97       	sbiw	r24, 0x01	; 1
}
 53a:	08 95       	ret

0000053c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 53c:	83 e2       	ldi	r24, 0x23	; 35
 53e:	94 e0       	ldi	r25, 0x04	; 4
 540:	89 2b       	or	r24, r25
 542:	39 f0       	breq	.+14     	; 0x552 <_Z14serialEventRunv+0x16>
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	89 2b       	or	r24, r25
 54a:	19 f0       	breq	.+6      	; 0x552 <_Z14serialEventRunv+0x16>
 54c:	7c d1       	rcall	.+760    	; 0x846 <_Z17Serial0_availablev>
 54e:	81 11       	cpse	r24, r1
 550:	24 c0       	rjmp	.+72     	; 0x59a <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	89 2b       	or	r24, r25
 558:	41 f0       	breq	.+16     	; 0x56a <_Z14serialEventRunv+0x2e>
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	89 2b       	or	r24, r25
 560:	21 f0       	breq	.+8      	; 0x56a <_Z14serialEventRunv+0x2e>
 562:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 566:	81 11       	cpse	r24, r1
 568:	1b c0       	rjmp	.+54     	; 0x5a0 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	89 2b       	or	r24, r25
 570:	41 f0       	breq	.+16     	; 0x582 <_Z14serialEventRunv+0x46>
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	89 2b       	or	r24, r25
 578:	21 f0       	breq	.+8      	; 0x582 <_Z14serialEventRunv+0x46>
 57a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 57e:	81 11       	cpse	r24, r1
 580:	12 c0       	rjmp	.+36     	; 0x5a6 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 582:	88 eb       	ldi	r24, 0xB8	; 184
 584:	94 e0       	ldi	r25, 0x04	; 4
 586:	89 2b       	or	r24, r25
 588:	99 f0       	breq	.+38     	; 0x5b0 <_Z14serialEventRunv+0x74>
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	89 2b       	or	r24, r25
 590:	79 f0       	breq	.+30     	; 0x5b0 <_Z14serialEventRunv+0x74>
 592:	ee d1       	rcall	.+988    	; 0x970 <_Z17Serial3_availablev>
 594:	81 11       	cpse	r24, r1
 596:	0a c0       	rjmp	.+20     	; 0x5ac <_Z14serialEventRunv+0x70>
 598:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 59a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 59e:	d9 cf       	rjmp	.-78     	; 0x552 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 5a0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 5a4:	e2 cf       	rjmp	.-60     	; 0x56a <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 5a6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 5aa:	eb cf       	rjmp	.-42     	; 0x582 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 5ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 5b0:	08 95       	ret

000005b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 5b2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 5b4:	84 8d       	ldd	r24, Z+28	; 0x1c
 5b6:	df 01       	movw	r26, r30
 5b8:	a8 0f       	add	r26, r24
 5ba:	b1 1d       	adc	r27, r1
 5bc:	a3 5a       	subi	r26, 0xA3	; 163
 5be:	bf 4f       	sbci	r27, 0xFF	; 255
 5c0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 5c2:	84 8d       	ldd	r24, Z+28	; 0x1c
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	8f 73       	andi	r24, 0x3F	; 63
 5ca:	99 27       	eor	r25, r25
 5cc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 5ce:	a6 89       	ldd	r26, Z+22	; 0x16
 5d0:	b7 89       	ldd	r27, Z+23	; 0x17
 5d2:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 5d4:	a0 89       	ldd	r26, Z+16	; 0x10
 5d6:	b1 89       	ldd	r27, Z+17	; 0x11
 5d8:	8c 91       	ld	r24, X
 5da:	80 64       	ori	r24, 0x40	; 64
 5dc:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 5de:	93 8d       	ldd	r25, Z+27	; 0x1b
 5e0:	84 8d       	ldd	r24, Z+28	; 0x1c
 5e2:	98 13       	cpse	r25, r24
 5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 5e6:	02 88       	ldd	r0, Z+18	; 0x12
 5e8:	f3 89       	ldd	r31, Z+19	; 0x13
 5ea:	e0 2d       	mov	r30, r0
 5ec:	80 81       	ld	r24, Z
 5ee:	8f 7d       	andi	r24, 0xDF	; 223
 5f0:	80 83       	st	Z, r24
 5f2:	08 95       	ret

000005f4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 5f4:	ef 92       	push	r14
 5f6:	ff 92       	push	r15
 5f8:	0f 93       	push	r16
 5fa:	1f 93       	push	r17
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	ec 01       	movw	r28, r24
  _written = true;
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 606:	9b 8d       	ldd	r25, Y+27	; 0x1b
 608:	8c 8d       	ldd	r24, Y+28	; 0x1c
 60a:	98 13       	cpse	r25, r24
 60c:	05 c0       	rjmp	.+10     	; 0x618 <_ZN14HardwareSerial5writeEh+0x24>
 60e:	e8 89       	ldd	r30, Y+16	; 0x10
 610:	f9 89       	ldd	r31, Y+17	; 0x11
 612:	80 81       	ld	r24, Z
 614:	85 fd       	sbrc	r24, 5
 616:	23 c0       	rjmp	.+70     	; 0x65e <_ZN14HardwareSerial5writeEh+0x6a>
 618:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 61a:	0b 8d       	ldd	r16, Y+27	; 0x1b
 61c:	10 e0       	ldi	r17, 0x00	; 0
 61e:	0f 5f       	subi	r16, 0xFF	; 255
 620:	1f 4f       	sbci	r17, 0xFF	; 255
 622:	0f 73       	andi	r16, 0x3F	; 63
 624:	11 27       	eor	r17, r17
 626:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 628:	8c 8d       	ldd	r24, Y+28	; 0x1c
 62a:	e8 12       	cpse	r14, r24
 62c:	0b c0       	rjmp	.+22     	; 0x644 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	07 fc       	sbrc	r0, 7
 632:	fa cf       	rjmp	.-12     	; 0x628 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 634:	e8 89       	ldd	r30, Y+16	; 0x10
 636:	f9 89       	ldd	r31, Y+17	; 0x11
 638:	80 81       	ld	r24, Z
 63a:	85 ff       	sbrs	r24, 5
 63c:	f5 cf       	rjmp	.-22     	; 0x628 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 63e:	ce 01       	movw	r24, r28
 640:	b8 df       	rcall	.-144    	; 0x5b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 642:	f2 cf       	rjmp	.-28     	; 0x628 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 644:	8b 8d       	ldd	r24, Y+27	; 0x1b
 646:	fe 01       	movw	r30, r28
 648:	e8 0f       	add	r30, r24
 64a:	f1 1d       	adc	r31, r1
 64c:	e3 5a       	subi	r30, 0xA3	; 163
 64e:	ff 4f       	sbci	r31, 0xFF	; 255
 650:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 652:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 654:	ea 89       	ldd	r30, Y+18	; 0x12
 656:	fb 89       	ldd	r31, Y+19	; 0x13
 658:	80 81       	ld	r24, Z
 65a:	80 62       	ori	r24, 0x20	; 32
 65c:	07 c0       	rjmp	.+14     	; 0x66c <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 65e:	ee 89       	ldd	r30, Y+22	; 0x16
 660:	ff 89       	ldd	r31, Y+23	; 0x17
 662:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 664:	e8 89       	ldd	r30, Y+16	; 0x10
 666:	f9 89       	ldd	r31, Y+17	; 0x11
 668:	80 81       	ld	r24, Z
 66a:	80 64       	ori	r24, 0x40	; 64
 66c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	0f 91       	pop	r16
 67a:	ff 90       	pop	r15
 67c:	ef 90       	pop	r14
 67e:	08 95       	ret

00000680 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 686:	88 8d       	ldd	r24, Y+24	; 0x18
 688:	88 23       	and	r24, r24
 68a:	c1 f0       	breq	.+48     	; 0x6bc <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 68c:	ea 89       	ldd	r30, Y+18	; 0x12
 68e:	fb 89       	ldd	r31, Y+19	; 0x13
 690:	80 81       	ld	r24, Z
 692:	85 fd       	sbrc	r24, 5
 694:	05 c0       	rjmp	.+10     	; 0x6a0 <_ZN14HardwareSerial5flushEv+0x20>
 696:	a8 89       	ldd	r26, Y+16	; 0x10
 698:	b9 89       	ldd	r27, Y+17	; 0x11
 69a:	8c 91       	ld	r24, X
 69c:	86 fd       	sbrc	r24, 6
 69e:	0e c0       	rjmp	.+28     	; 0x6bc <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	07 fc       	sbrc	r0, 7
 6a4:	f5 cf       	rjmp	.-22     	; 0x690 <_ZN14HardwareSerial5flushEv+0x10>
 6a6:	80 81       	ld	r24, Z
 6a8:	85 ff       	sbrs	r24, 5
 6aa:	f2 cf       	rjmp	.-28     	; 0x690 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 6ac:	a8 89       	ldd	r26, Y+16	; 0x10
 6ae:	b9 89       	ldd	r27, Y+17	; 0x11
 6b0:	8c 91       	ld	r24, X
 6b2:	85 ff       	sbrs	r24, 5
 6b4:	ed cf       	rjmp	.-38     	; 0x690 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 6b6:	ce 01       	movw	r24, r28
 6b8:	7c df       	rcall	.-264    	; 0x5b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 6ba:	e8 cf       	rjmp	.-48     	; 0x68c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 6c2:	cf 92       	push	r12
 6c4:	df 92       	push	r13
 6c6:	ef 92       	push	r14
 6c8:	ff 92       	push	r15
 6ca:	1f 93       	push	r17
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	ec 01       	movw	r28, r24
 6d2:	6a 01       	movw	r12, r20
 6d4:	7b 01       	movw	r14, r22
 6d6:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 6d8:	e8 89       	ldd	r30, Y+16	; 0x10
 6da:	f9 89       	ldd	r31, Y+17	; 0x11
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 6e0:	41 15       	cp	r20, r1
 6e2:	51 4e       	sbci	r21, 0xE1	; 225
 6e4:	61 05       	cpc	r22, r1
 6e6:	71 05       	cpc	r23, r1
 6e8:	a9 f0       	breq	.+42     	; 0x714 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	79 e0       	ldi	r23, 0x09	; 9
 6ee:	8d e3       	ldi	r24, 0x3D	; 61
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	a7 01       	movw	r20, r14
 6f4:	96 01       	movw	r18, r12
 6f6:	f4 d3       	rcall	.+2024   	; 0xee0 <__udivmodsi4>
 6f8:	da 01       	movw	r26, r20
 6fa:	c9 01       	movw	r24, r18
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	a1 09       	sbc	r26, r1
 700:	b1 09       	sbc	r27, r1
 702:	b6 95       	lsr	r27
 704:	a7 95       	ror	r26
 706:	97 95       	ror	r25
 708:	87 95       	ror	r24
 70a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 70c:	21 15       	cp	r18, r1
 70e:	80 e1       	ldi	r24, 0x10	; 16
 710:	38 07       	cpc	r19, r24
 712:	a0 f0       	brcs	.+40     	; 0x73c <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 714:	e8 89       	ldd	r30, Y+16	; 0x10
 716:	f9 89       	ldd	r31, Y+17	; 0x11
 718:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 71a:	60 e8       	ldi	r22, 0x80	; 128
 71c:	74 e8       	ldi	r23, 0x84	; 132
 71e:	8e e1       	ldi	r24, 0x1E	; 30
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	a7 01       	movw	r20, r14
 724:	96 01       	movw	r18, r12
 726:	dc d3       	rcall	.+1976   	; 0xee0 <__udivmodsi4>
 728:	da 01       	movw	r26, r20
 72a:	c9 01       	movw	r24, r18
 72c:	01 97       	sbiw	r24, 0x01	; 1
 72e:	a1 09       	sbc	r26, r1
 730:	b1 09       	sbc	r27, r1
 732:	b6 95       	lsr	r27
 734:	a7 95       	ror	r26
 736:	97 95       	ror	r25
 738:	87 95       	ror	r24
 73a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 73c:	ec 85       	ldd	r30, Y+12	; 0x0c
 73e:	fd 85       	ldd	r31, Y+13	; 0x0d
 740:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 742:	ee 85       	ldd	r30, Y+14	; 0x0e
 744:	ff 85       	ldd	r31, Y+15	; 0x0f
 746:	20 83       	st	Z, r18

  _written = false;
 748:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 74a:	ec 89       	ldd	r30, Y+20	; 0x14
 74c:	fd 89       	ldd	r31, Y+21	; 0x15
 74e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 750:	ea 89       	ldd	r30, Y+18	; 0x12
 752:	fb 89       	ldd	r31, Y+19	; 0x13
 754:	80 81       	ld	r24, Z
 756:	80 61       	ori	r24, 0x10	; 16
 758:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 75a:	ea 89       	ldd	r30, Y+18	; 0x12
 75c:	fb 89       	ldd	r31, Y+19	; 0x13
 75e:	80 81       	ld	r24, Z
 760:	88 60       	ori	r24, 0x08	; 8
 762:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 764:	ea 89       	ldd	r30, Y+18	; 0x12
 766:	fb 89       	ldd	r31, Y+19	; 0x13
 768:	80 81       	ld	r24, Z
 76a:	80 68       	ori	r24, 0x80	; 128
 76c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 76e:	ea 89       	ldd	r30, Y+18	; 0x12
 770:	fb 89       	ldd	r31, Y+19	; 0x13
 772:	80 81       	ld	r24, Z
 774:	8f 7d       	andi	r24, 0xDF	; 223
 776:	80 83       	st	Z, r24
}
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	1f 91       	pop	r17
 77e:	ff 90       	pop	r15
 780:	ef 90       	pop	r14
 782:	df 90       	pop	r13
 784:	cf 90       	pop	r12
 786:	08 95       	ret

00000788 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 788:	1f 92       	push	r1
 78a:	0f 92       	push	r0
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	0f 92       	push	r0
 790:	11 24       	eor	r1, r1
 792:	0b b6       	in	r0, 0x3b	; 59
 794:	0f 92       	push	r0
 796:	2f 93       	push	r18
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	ef 93       	push	r30
 79e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 7a0:	e0 91 8a 03 	lds	r30, 0x038A	; 0x80038a <__data_end+0x10>
 7a4:	f0 91 8b 03 	lds	r31, 0x038B	; 0x80038b <__data_end+0x11>
 7a8:	80 81       	ld	r24, Z
 7aa:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <__data_end+0x16>
 7ae:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <__data_end+0x17>
 7b2:	82 fd       	sbrc	r24, 2
 7b4:	12 c0       	rjmp	.+36     	; 0x7da <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 7b6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 7b8:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <__data_end+0x19>
 7bc:	8f 5f       	subi	r24, 0xFF	; 255
 7be:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 7c0:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <__data_end+0x1a>
 7c4:	82 17       	cp	r24, r18
 7c6:	51 f0       	breq	.+20     	; 0x7dc <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 7c8:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <__data_end+0x19>
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	e6 58       	subi	r30, 0x86	; 134
 7d0:	fc 4f       	sbci	r31, 0xFC	; 252
 7d2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 7d4:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <__data_end+0x19>
 7d8:	01 c0       	rjmp	.+2      	; 0x7dc <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 7da:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 7dc:	ff 91       	pop	r31
 7de:	ef 91       	pop	r30
 7e0:	9f 91       	pop	r25
 7e2:	8f 91       	pop	r24
 7e4:	2f 91       	pop	r18
 7e6:	0f 90       	pop	r0
 7e8:	0b be       	out	0x3b, r0	; 59
 7ea:	0f 90       	pop	r0
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	0f 90       	pop	r0
 7f0:	1f 90       	pop	r1
 7f2:	18 95       	reti

000007f4 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 7f4:	1f 92       	push	r1
 7f6:	0f 92       	push	r0
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	0f 92       	push	r0
 7fc:	11 24       	eor	r1, r1
 7fe:	0b b6       	in	r0, 0x3b	; 59
 800:	0f 92       	push	r0
 802:	2f 93       	push	r18
 804:	3f 93       	push	r19
 806:	4f 93       	push	r20
 808:	5f 93       	push	r21
 80a:	6f 93       	push	r22
 80c:	7f 93       	push	r23
 80e:	8f 93       	push	r24
 810:	9f 93       	push	r25
 812:	af 93       	push	r26
 814:	bf 93       	push	r27
 816:	ef 93       	push	r30
 818:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 81a:	8a e7       	ldi	r24, 0x7A	; 122
 81c:	93 e0       	ldi	r25, 0x03	; 3
 81e:	c9 de       	rcall	.-622    	; 0x5b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 820:	ff 91       	pop	r31
 822:	ef 91       	pop	r30
 824:	bf 91       	pop	r27
 826:	af 91       	pop	r26
 828:	9f 91       	pop	r25
 82a:	8f 91       	pop	r24
 82c:	7f 91       	pop	r23
 82e:	6f 91       	pop	r22
 830:	5f 91       	pop	r21
 832:	4f 91       	pop	r20
 834:	3f 91       	pop	r19
 836:	2f 91       	pop	r18
 838:	0f 90       	pop	r0
 83a:	0b be       	out	0x3b, r0	; 59
 83c:	0f 90       	pop	r0
 83e:	0f be       	out	0x3f, r0	; 63
 840:	0f 90       	pop	r0
 842:	1f 90       	pop	r1
 844:	18 95       	reti

00000846 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 846:	8a e7       	ldi	r24, 0x7A	; 122
 848:	93 e0       	ldi	r25, 0x03	; 3
 84a:	3b de       	rcall	.-906    	; 0x4c2 <_ZN14HardwareSerial9availableEv>
 84c:	21 e0       	ldi	r18, 0x01	; 1
 84e:	89 2b       	or	r24, r25
 850:	09 f4       	brne	.+2      	; 0x854 <_Z17Serial0_availablev+0xe>
 852:	20 e0       	ldi	r18, 0x00	; 0
}
 854:	82 2f       	mov	r24, r18
 856:	08 95       	ret

00000858 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 858:	ea e7       	ldi	r30, 0x7A	; 122
 85a:	f3 e0       	ldi	r31, 0x03	; 3
 85c:	13 82       	std	Z+3, r1	; 0x03
 85e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 860:	88 ee       	ldi	r24, 0xE8	; 232
 862:	93 e0       	ldi	r25, 0x03	; 3
 864:	a0 e0       	ldi	r26, 0x00	; 0
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	84 83       	std	Z+4, r24	; 0x04
 86a:	95 83       	std	Z+5, r25	; 0x05
 86c:	a6 83       	std	Z+6, r26	; 0x06
 86e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 870:	8c e5       	ldi	r24, 0x5C	; 92
 872:	93 e0       	ldi	r25, 0x03	; 3
 874:	91 83       	std	Z+1, r25	; 0x01
 876:	80 83       	st	Z, r24
 878:	85 ec       	ldi	r24, 0xC5	; 197
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	95 87       	std	Z+13, r25	; 0x0d
 87e:	84 87       	std	Z+12, r24	; 0x0c
 880:	84 ec       	ldi	r24, 0xC4	; 196
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	97 87       	std	Z+15, r25	; 0x0f
 886:	86 87       	std	Z+14, r24	; 0x0e
 888:	80 ec       	ldi	r24, 0xC0	; 192
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	91 8b       	std	Z+17, r25	; 0x11
 88e:	80 8b       	std	Z+16, r24	; 0x10
 890:	81 ec       	ldi	r24, 0xC1	; 193
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	93 8b       	std	Z+19, r25	; 0x13
 896:	82 8b       	std	Z+18, r24	; 0x12
 898:	82 ec       	ldi	r24, 0xC2	; 194
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	95 8b       	std	Z+21, r25	; 0x15
 89e:	84 8b       	std	Z+20, r24	; 0x14
 8a0:	86 ec       	ldi	r24, 0xC6	; 198
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	97 8b       	std	Z+23, r25	; 0x17
 8a6:	86 8b       	std	Z+22, r24	; 0x16
 8a8:	11 8e       	std	Z+25, r1	; 0x19
 8aa:	12 8e       	std	Z+26, r1	; 0x1a
 8ac:	13 8e       	std	Z+27, r1	; 0x1b
 8ae:	14 8e       	std	Z+28, r1	; 0x1c
 8b0:	08 95       	ret

000008b2 <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
 8b2:	1f 92       	push	r1
 8b4:	0f 92       	push	r0
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	0f 92       	push	r0
 8ba:	11 24       	eor	r1, r1
 8bc:	0b b6       	in	r0, 0x3b	; 59
 8be:	0f 92       	push	r0
 8c0:	2f 93       	push	r18
 8c2:	8f 93       	push	r24
 8c4:	9f 93       	push	r25
 8c6:	ef 93       	push	r30
 8c8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 8ca:	e0 91 27 04 	lds	r30, 0x0427	; 0x800427 <Serial3+0x10>
 8ce:	f0 91 28 04 	lds	r31, 0x0428	; 0x800428 <Serial3+0x11>
 8d2:	80 81       	ld	r24, Z
 8d4:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <Serial3+0x16>
 8d8:	f0 91 2e 04 	lds	r31, 0x042E	; 0x80042e <Serial3+0x17>
 8dc:	82 fd       	sbrc	r24, 2
 8de:	12 c0       	rjmp	.+36     	; 0x904 <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 8e0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 8e2:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <Serial3+0x19>
 8e6:	8f 5f       	subi	r24, 0xFF	; 255
 8e8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 8ea:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <Serial3+0x1a>
 8ee:	82 17       	cp	r24, r18
 8f0:	51 f0       	breq	.+20     	; 0x906 <__vector_54+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 8f2:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <Serial3+0x19>
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	e9 5e       	subi	r30, 0xE9	; 233
 8fa:	fb 4f       	sbci	r31, 0xFB	; 251
 8fc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 8fe:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <Serial3+0x19>
 902:	01 c0       	rjmp	.+2      	; 0x906 <__vector_54+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 904:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
 906:	ff 91       	pop	r31
 908:	ef 91       	pop	r30
 90a:	9f 91       	pop	r25
 90c:	8f 91       	pop	r24
 90e:	2f 91       	pop	r18
 910:	0f 90       	pop	r0
 912:	0b be       	out	0x3b, r0	; 59
 914:	0f 90       	pop	r0
 916:	0f be       	out	0x3f, r0	; 63
 918:	0f 90       	pop	r0
 91a:	1f 90       	pop	r1
 91c:	18 95       	reti

0000091e <__vector_55>:

ISR(USART3_UDRE_vect)
{
 91e:	1f 92       	push	r1
 920:	0f 92       	push	r0
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	0f 92       	push	r0
 926:	11 24       	eor	r1, r1
 928:	0b b6       	in	r0, 0x3b	; 59
 92a:	0f 92       	push	r0
 92c:	2f 93       	push	r18
 92e:	3f 93       	push	r19
 930:	4f 93       	push	r20
 932:	5f 93       	push	r21
 934:	6f 93       	push	r22
 936:	7f 93       	push	r23
 938:	8f 93       	push	r24
 93a:	9f 93       	push	r25
 93c:	af 93       	push	r26
 93e:	bf 93       	push	r27
 940:	ef 93       	push	r30
 942:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
 944:	87 e1       	ldi	r24, 0x17	; 23
 946:	94 e0       	ldi	r25, 0x04	; 4
 948:	34 de       	rcall	.-920    	; 0x5b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 94a:	ff 91       	pop	r31
 94c:	ef 91       	pop	r30
 94e:	bf 91       	pop	r27
 950:	af 91       	pop	r26
 952:	9f 91       	pop	r25
 954:	8f 91       	pop	r24
 956:	7f 91       	pop	r23
 958:	6f 91       	pop	r22
 95a:	5f 91       	pop	r21
 95c:	4f 91       	pop	r20
 95e:	3f 91       	pop	r19
 960:	2f 91       	pop	r18
 962:	0f 90       	pop	r0
 964:	0b be       	out	0x3b, r0	; 59
 966:	0f 90       	pop	r0
 968:	0f be       	out	0x3f, r0	; 63
 96a:	0f 90       	pop	r0
 96c:	1f 90       	pop	r1
 96e:	18 95       	reti

00000970 <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
 970:	87 e1       	ldi	r24, 0x17	; 23
 972:	94 e0       	ldi	r25, 0x04	; 4
 974:	a6 dd       	rcall	.-1204   	; 0x4c2 <_ZN14HardwareSerial9availableEv>
 976:	21 e0       	ldi	r18, 0x01	; 1
 978:	89 2b       	or	r24, r25
 97a:	09 f4       	brne	.+2      	; 0x97e <_Z17Serial3_availablev+0xe>
 97c:	20 e0       	ldi	r18, 0x00	; 0
}
 97e:	82 2f       	mov	r24, r18
 980:	08 95       	ret

00000982 <_GLOBAL__sub_I___vector_54>:
 982:	e7 e1       	ldi	r30, 0x17	; 23
 984:	f4 e0       	ldi	r31, 0x04	; 4
 986:	13 82       	std	Z+3, r1	; 0x03
 988:	12 82       	std	Z+2, r1	; 0x02
 98a:	88 ee       	ldi	r24, 0xE8	; 232
 98c:	93 e0       	ldi	r25, 0x03	; 3
 98e:	a0 e0       	ldi	r26, 0x00	; 0
 990:	b0 e0       	ldi	r27, 0x00	; 0
 992:	84 83       	std	Z+4, r24	; 0x04
 994:	95 83       	std	Z+5, r25	; 0x05
 996:	a6 83       	std	Z+6, r26	; 0x06
 998:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 99a:	8c e5       	ldi	r24, 0x5C	; 92
 99c:	93 e0       	ldi	r25, 0x03	; 3
 99e:	91 83       	std	Z+1, r25	; 0x01
 9a0:	80 83       	st	Z, r24
 9a2:	85 e3       	ldi	r24, 0x35	; 53
 9a4:	91 e0       	ldi	r25, 0x01	; 1
 9a6:	95 87       	std	Z+13, r25	; 0x0d
 9a8:	84 87       	std	Z+12, r24	; 0x0c
 9aa:	84 e3       	ldi	r24, 0x34	; 52
 9ac:	91 e0       	ldi	r25, 0x01	; 1
 9ae:	97 87       	std	Z+15, r25	; 0x0f
 9b0:	86 87       	std	Z+14, r24	; 0x0e
 9b2:	80 e3       	ldi	r24, 0x30	; 48
 9b4:	91 e0       	ldi	r25, 0x01	; 1
 9b6:	91 8b       	std	Z+17, r25	; 0x11
 9b8:	80 8b       	std	Z+16, r24	; 0x10
 9ba:	81 e3       	ldi	r24, 0x31	; 49
 9bc:	91 e0       	ldi	r25, 0x01	; 1
 9be:	93 8b       	std	Z+19, r25	; 0x13
 9c0:	82 8b       	std	Z+18, r24	; 0x12
 9c2:	82 e3       	ldi	r24, 0x32	; 50
 9c4:	91 e0       	ldi	r25, 0x01	; 1
 9c6:	95 8b       	std	Z+21, r25	; 0x15
 9c8:	84 8b       	std	Z+20, r24	; 0x14
 9ca:	86 e3       	ldi	r24, 0x36	; 54
 9cc:	91 e0       	ldi	r25, 0x01	; 1
 9ce:	97 8b       	std	Z+23, r25	; 0x17
 9d0:	86 8b       	std	Z+22, r24	; 0x16
 9d2:	11 8e       	std	Z+25, r1	; 0x19
 9d4:	12 8e       	std	Z+26, r1	; 0x1a
 9d6:	13 8e       	std	Z+27, r1	; 0x1b
 9d8:	14 8e       	std	Z+28, r1	; 0x1c
 9da:	08 95       	ret

000009dc <initVariant>:
 9dc:	08 95       	ret

000009de <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 9de:	5f d1       	rcall	.+702    	; 0xc9e <init>

	initVariant();
 9e0:	fd df       	rcall	.-6      	; 0x9dc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 9e2:	04 dd       	rcall	.-1528   	; 0x3ec <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 9e4:	ce e9       	ldi	r28, 0x9E	; 158
 9e6:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 9e8:	26 dd       	rcall	.-1460   	; 0x436 <loop>
		if (serialEventRun) serialEventRun();
 9ea:	20 97       	sbiw	r28, 0x00	; 0
 9ec:	e9 f3       	breq	.-6      	; 0x9e8 <main+0xa>
 9ee:	a6 dd       	rcall	.-1204   	; 0x53c <_Z14serialEventRunv>
 9f0:	fb cf       	rjmp	.-10     	; 0x9e8 <main+0xa>

000009f2 <_ZN5Print5writeEPKhj>:
 9f2:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 9f4:	df 92       	push	r13
 9f6:	ef 92       	push	r14
 9f8:	ff 92       	push	r15
 9fa:	0f 93       	push	r16
 9fc:	1f 93       	push	r17
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	6c 01       	movw	r12, r24
 a04:	7a 01       	movw	r14, r20
 a06:	8b 01       	movw	r16, r22
 a08:	c0 e0       	ldi	r28, 0x00	; 0
 a0a:	d0 e0       	ldi	r29, 0x00	; 0
 a0c:	ce 15       	cp	r28, r14
 a0e:	df 05       	cpc	r29, r15
 a10:	81 f0       	breq	.+32     	; 0xa32 <_ZN5Print5writeEPKhj+0x40>
 a12:	d8 01       	movw	r26, r16
 a14:	6d 91       	ld	r22, X+
 a16:	8d 01       	movw	r16, r26
 a18:	d6 01       	movw	r26, r12
 a1a:	ed 91       	ld	r30, X+
 a1c:	fc 91       	ld	r31, X
 a1e:	01 90       	ld	r0, Z+
 a20:	f0 81       	ld	r31, Z
 a22:	e0 2d       	mov	r30, r0
 a24:	c6 01       	movw	r24, r12
 a26:	19 95       	eicall
 a28:	89 2b       	or	r24, r25
 a2a:	11 f0       	breq	.+4      	; 0xa30 <_ZN5Print5writeEPKhj+0x3e>
 a2c:	21 96       	adiw	r28, 0x01	; 1
 a2e:	ee cf       	rjmp	.-36     	; 0xa0c <_ZN5Print5writeEPKhj+0x1a>
 a30:	7e 01       	movw	r14, r28
 a32:	c7 01       	movw	r24, r14
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	1f 91       	pop	r17
 a3a:	0f 91       	pop	r16
 a3c:	ff 90       	pop	r15
 a3e:	ef 90       	pop	r14
 a40:	df 90       	pop	r13
 a42:	cf 90       	pop	r12
 a44:	08 95       	ret

00000a46 <_ZN5Print5writeEPKc>:
 a46:	61 15       	cp	r22, r1
 a48:	71 05       	cpc	r23, r1
 a4a:	79 f0       	breq	.+30     	; 0xa6a <_ZN5Print5writeEPKc+0x24>
 a4c:	fb 01       	movw	r30, r22
 a4e:	01 90       	ld	r0, Z+
 a50:	00 20       	and	r0, r0
 a52:	e9 f7       	brne	.-6      	; 0xa4e <_ZN5Print5writeEPKc+0x8>
 a54:	31 97       	sbiw	r30, 0x01	; 1
 a56:	af 01       	movw	r20, r30
 a58:	46 1b       	sub	r20, r22
 a5a:	57 0b       	sbc	r21, r23
 a5c:	dc 01       	movw	r26, r24
 a5e:	ed 91       	ld	r30, X+
 a60:	fc 91       	ld	r31, X
 a62:	02 80       	ldd	r0, Z+2	; 0x02
 a64:	f3 81       	ldd	r31, Z+3	; 0x03
 a66:	e0 2d       	mov	r30, r0
 a68:	19 94       	eijmp
 a6a:	80 e0       	ldi	r24, 0x00	; 0
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	08 95       	ret

00000a70 <_ZN5Print5printEPKc>:
 a70:	ea cf       	rjmp	.-44     	; 0xa46 <_ZN5Print5writeEPKc>

00000a72 <_ZN5Print5printEc>:
 a72:	dc 01       	movw	r26, r24
 a74:	ed 91       	ld	r30, X+
 a76:	fc 91       	ld	r31, X
 a78:	01 90       	ld	r0, Z+
 a7a:	f0 81       	ld	r31, Z
 a7c:	e0 2d       	mov	r30, r0
 a7e:	19 94       	eijmp

00000a80 <_ZN5Print7printlnEv>:
 a80:	6a e6       	ldi	r22, 0x6A	; 106
 a82:	73 e0       	ldi	r23, 0x03	; 3
 a84:	e0 cf       	rjmp	.-64     	; 0xa46 <_ZN5Print5writeEPKc>

00000a86 <_ZN5Print7printlnEPKc>:
 a86:	0f 93       	push	r16
 a88:	1f 93       	push	r17
 a8a:	cf 93       	push	r28
 a8c:	df 93       	push	r29
 a8e:	ec 01       	movw	r28, r24
 a90:	da df       	rcall	.-76     	; 0xa46 <_ZN5Print5writeEPKc>
 a92:	8c 01       	movw	r16, r24
 a94:	ce 01       	movw	r24, r28
 a96:	f4 df       	rcall	.-24     	; 0xa80 <_ZN5Print7printlnEv>
 a98:	80 0f       	add	r24, r16
 a9a:	91 1f       	adc	r25, r17
 a9c:	df 91       	pop	r29
 a9e:	cf 91       	pop	r28
 aa0:	1f 91       	pop	r17
 aa2:	0f 91       	pop	r16
 aa4:	08 95       	ret

00000aa6 <_ZN5Print7printlnEc>:
 aa6:	0f 93       	push	r16
 aa8:	1f 93       	push	r17
 aaa:	cf 93       	push	r28
 aac:	df 93       	push	r29
 aae:	ec 01       	movw	r28, r24
 ab0:	e0 df       	rcall	.-64     	; 0xa72 <_ZN5Print5printEc>
 ab2:	8c 01       	movw	r16, r24
 ab4:	ce 01       	movw	r24, r28
 ab6:	e4 df       	rcall	.-56     	; 0xa80 <_ZN5Print7printlnEv>
 ab8:	80 0f       	add	r24, r16
 aba:	91 1f       	adc	r25, r17
 abc:	df 91       	pop	r29
 abe:	cf 91       	pop	r28
 ac0:	1f 91       	pop	r17
 ac2:	0f 91       	pop	r16
 ac4:	08 95       	ret

00000ac6 <_ZN5Print11printNumberEmh>:
 ac6:	8f 92       	push	r8
 ac8:	9f 92       	push	r9
 aca:	af 92       	push	r10
 acc:	bf 92       	push	r11
 ace:	ef 92       	push	r14
 ad0:	ff 92       	push	r15
 ad2:	0f 93       	push	r16
 ad4:	1f 93       	push	r17
 ad6:	cf 93       	push	r28
 ad8:	df 93       	push	r29
 ada:	cd b7       	in	r28, 0x3d	; 61
 adc:	de b7       	in	r29, 0x3e	; 62
 ade:	a1 97       	sbiw	r28, 0x21	; 33
 ae0:	0f b6       	in	r0, 0x3f	; 63
 ae2:	f8 94       	cli
 ae4:	de bf       	out	0x3e, r29	; 62
 ae6:	0f be       	out	0x3f, r0	; 63
 ae8:	cd bf       	out	0x3d, r28	; 61
 aea:	7c 01       	movw	r14, r24
 aec:	fa 01       	movw	r30, r20
 aee:	cb 01       	movw	r24, r22
 af0:	19 a2       	std	Y+33, r1	; 0x21
 af2:	22 30       	cpi	r18, 0x02	; 2
 af4:	08 f4       	brcc	.+2      	; 0xaf8 <_ZN5Print11printNumberEmh+0x32>
 af6:	2a e0       	ldi	r18, 0x0A	; 10
 af8:	8e 01       	movw	r16, r28
 afa:	0f 5d       	subi	r16, 0xDF	; 223
 afc:	1f 4f       	sbci	r17, 0xFF	; 255
 afe:	82 2e       	mov	r8, r18
 b00:	91 2c       	mov	r9, r1
 b02:	a1 2c       	mov	r10, r1
 b04:	b1 2c       	mov	r11, r1
 b06:	bf 01       	movw	r22, r30
 b08:	a5 01       	movw	r20, r10
 b0a:	94 01       	movw	r18, r8
 b0c:	e9 d1       	rcall	.+978    	; 0xee0 <__udivmodsi4>
 b0e:	f9 01       	movw	r30, r18
 b10:	ca 01       	movw	r24, r20
 b12:	01 50       	subi	r16, 0x01	; 1
 b14:	11 09       	sbc	r17, r1
 b16:	6a 30       	cpi	r22, 0x0A	; 10
 b18:	10 f4       	brcc	.+4      	; 0xb1e <_ZN5Print11printNumberEmh+0x58>
 b1a:	60 5d       	subi	r22, 0xD0	; 208
 b1c:	01 c0       	rjmp	.+2      	; 0xb20 <_ZN5Print11printNumberEmh+0x5a>
 b1e:	69 5c       	subi	r22, 0xC9	; 201
 b20:	d8 01       	movw	r26, r16
 b22:	6c 93       	st	X, r22
 b24:	23 2b       	or	r18, r19
 b26:	24 2b       	or	r18, r20
 b28:	25 2b       	or	r18, r21
 b2a:	69 f7       	brne	.-38     	; 0xb06 <_ZN5Print11printNumberEmh+0x40>
 b2c:	b8 01       	movw	r22, r16
 b2e:	c7 01       	movw	r24, r14
 b30:	8a df       	rcall	.-236    	; 0xa46 <_ZN5Print5writeEPKc>
 b32:	a1 96       	adiw	r28, 0x21	; 33
 b34:	0f b6       	in	r0, 0x3f	; 63
 b36:	f8 94       	cli
 b38:	de bf       	out	0x3e, r29	; 62
 b3a:	0f be       	out	0x3f, r0	; 63
 b3c:	cd bf       	out	0x3d, r28	; 61
 b3e:	df 91       	pop	r29
 b40:	cf 91       	pop	r28
 b42:	1f 91       	pop	r17
 b44:	0f 91       	pop	r16
 b46:	ff 90       	pop	r15
 b48:	ef 90       	pop	r14
 b4a:	bf 90       	pop	r11
 b4c:	af 90       	pop	r10
 b4e:	9f 90       	pop	r9
 b50:	8f 90       	pop	r8
 b52:	08 95       	ret

00000b54 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 b54:	cf 92       	push	r12
 b56:	df 92       	push	r13
 b58:	ef 92       	push	r14
 b5a:	ff 92       	push	r15
 b5c:	0f 93       	push	r16
 b5e:	1f 93       	push	r17
 b60:	cf 93       	push	r28
 b62:	df 93       	push	r29
  if (base == 0) {
 b64:	21 15       	cp	r18, r1
 b66:	31 05       	cpc	r19, r1
 b68:	81 f4       	brne	.+32     	; 0xb8a <_ZN5Print5printEli+0x36>
    return write(n);
 b6a:	dc 01       	movw	r26, r24
 b6c:	ed 91       	ld	r30, X+
 b6e:	fc 91       	ld	r31, X
 b70:	01 90       	ld	r0, Z+
 b72:	f0 81       	ld	r31, Z
 b74:	e0 2d       	mov	r30, r0
 b76:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 b78:	df 91       	pop	r29
 b7a:	cf 91       	pop	r28
 b7c:	1f 91       	pop	r17
 b7e:	0f 91       	pop	r16
 b80:	ff 90       	pop	r15
 b82:	ef 90       	pop	r14
 b84:	df 90       	pop	r13
 b86:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 b88:	19 94       	eijmp
  } else if (base == 10) {
 b8a:	2a 30       	cpi	r18, 0x0A	; 10
 b8c:	31 05       	cpc	r19, r1
 b8e:	f1 f4       	brne	.+60     	; 0xbcc <_ZN5Print5printEli+0x78>
    if (n < 0) {
 b90:	77 ff       	sbrs	r23, 7
 b92:	1b c0       	rjmp	.+54     	; 0xbca <_ZN5Print5printEli+0x76>
 b94:	6a 01       	movw	r12, r20
 b96:	7b 01       	movw	r14, r22
 b98:	ec 01       	movw	r28, r24
      int t = print('-');
 b9a:	6d e2       	ldi	r22, 0x2D	; 45
 b9c:	6a df       	rcall	.-300    	; 0xa72 <_ZN5Print5printEc>
 b9e:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 ba0:	44 27       	eor	r20, r20
 ba2:	55 27       	eor	r21, r21
 ba4:	ba 01       	movw	r22, r20
 ba6:	4c 19       	sub	r20, r12
 ba8:	5d 09       	sbc	r21, r13
 baa:	6e 09       	sbc	r22, r14
 bac:	7f 09       	sbc	r23, r15
 bae:	2a e0       	ldi	r18, 0x0A	; 10
 bb0:	ce 01       	movw	r24, r28
 bb2:	89 df       	rcall	.-238    	; 0xac6 <_ZN5Print11printNumberEmh>
 bb4:	80 0f       	add	r24, r16
 bb6:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 bb8:	df 91       	pop	r29
 bba:	cf 91       	pop	r28
 bbc:	1f 91       	pop	r17
 bbe:	0f 91       	pop	r16
 bc0:	ff 90       	pop	r15
 bc2:	ef 90       	pop	r14
 bc4:	df 90       	pop	r13
 bc6:	cf 90       	pop	r12
 bc8:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 bca:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 bcc:	df 91       	pop	r29
 bce:	cf 91       	pop	r28
 bd0:	1f 91       	pop	r17
 bd2:	0f 91       	pop	r16
 bd4:	ff 90       	pop	r15
 bd6:	ef 90       	pop	r14
 bd8:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 bda:	cf 90       	pop	r12
 bdc:	74 cf       	rjmp	.-280    	; 0xac6 <_ZN5Print11printNumberEmh>

00000bde <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 bde:	9a 01       	movw	r18, r20
  return print((long) n, base);
 be0:	ab 01       	movw	r20, r22
 be2:	77 0f       	add	r23, r23
 be4:	66 0b       	sbc	r22, r22
 be6:	77 0b       	sbc	r23, r23
 be8:	b5 cf       	rjmp	.-150    	; 0xb54 <_ZN5Print5printEli>

00000bea <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 bea:	0f 93       	push	r16
 bec:	1f 93       	push	r17
 bee:	cf 93       	push	r28
 bf0:	df 93       	push	r29
 bf2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 bf4:	f4 df       	rcall	.-24     	; 0xbde <_ZN5Print5printEii>
 bf6:	8c 01       	movw	r16, r24
  n += println();
 bf8:	ce 01       	movw	r24, r28
 bfa:	42 df       	rcall	.-380    	; 0xa80 <_ZN5Print7printlnEv>
  return n;
}
 bfc:	80 0f       	add	r24, r16
 bfe:	91 1f       	adc	r25, r17
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	1f 91       	pop	r17
 c06:	0f 91       	pop	r16
 c08:	08 95       	ret

00000c0a <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 c0a:	1f 92       	push	r1
 c0c:	0f 92       	push	r0
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	0f 92       	push	r0
 c12:	11 24       	eor	r1, r1
 c14:	2f 93       	push	r18
 c16:	3f 93       	push	r19
 c18:	8f 93       	push	r24
 c1a:	9f 93       	push	r25
 c1c:	af 93       	push	r26
 c1e:	bf 93       	push	r27
 c20:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <timer0_millis>
 c24:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <timer0_millis+0x1>
 c28:	a0 91 b7 04 	lds	r26, 0x04B7	; 0x8004b7 <timer0_millis+0x2>
 c2c:	b0 91 b8 04 	lds	r27, 0x04B8	; 0x8004b8 <timer0_millis+0x3>
 c30:	30 91 b4 04 	lds	r19, 0x04B4	; 0x8004b4 <timer0_fract>
 c34:	23 e0       	ldi	r18, 0x03	; 3
 c36:	23 0f       	add	r18, r19
 c38:	2d 37       	cpi	r18, 0x7D	; 125
 c3a:	20 f4       	brcc	.+8      	; 0xc44 <__vector_23+0x3a>
 c3c:	01 96       	adiw	r24, 0x01	; 1
 c3e:	a1 1d       	adc	r26, r1
 c40:	b1 1d       	adc	r27, r1
 c42:	05 c0       	rjmp	.+10     	; 0xc4e <__vector_23+0x44>
 c44:	26 e8       	ldi	r18, 0x86	; 134
 c46:	23 0f       	add	r18, r19
 c48:	02 96       	adiw	r24, 0x02	; 2
 c4a:	a1 1d       	adc	r26, r1
 c4c:	b1 1d       	adc	r27, r1
 c4e:	20 93 b4 04 	sts	0x04B4, r18	; 0x8004b4 <timer0_fract>
 c52:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <timer0_millis>
 c56:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <timer0_millis+0x1>
 c5a:	a0 93 b7 04 	sts	0x04B7, r26	; 0x8004b7 <timer0_millis+0x2>
 c5e:	b0 93 b8 04 	sts	0x04B8, r27	; 0x8004b8 <timer0_millis+0x3>
 c62:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <timer0_overflow_count>
 c66:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <timer0_overflow_count+0x1>
 c6a:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <timer0_overflow_count+0x2>
 c6e:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <timer0_overflow_count+0x3>
 c72:	01 96       	adiw	r24, 0x01	; 1
 c74:	a1 1d       	adc	r26, r1
 c76:	b1 1d       	adc	r27, r1
 c78:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <timer0_overflow_count>
 c7c:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <timer0_overflow_count+0x1>
 c80:	a0 93 bb 04 	sts	0x04BB, r26	; 0x8004bb <timer0_overflow_count+0x2>
 c84:	b0 93 bc 04 	sts	0x04BC, r27	; 0x8004bc <timer0_overflow_count+0x3>
 c88:	bf 91       	pop	r27
 c8a:	af 91       	pop	r26
 c8c:	9f 91       	pop	r25
 c8e:	8f 91       	pop	r24
 c90:	3f 91       	pop	r19
 c92:	2f 91       	pop	r18
 c94:	0f 90       	pop	r0
 c96:	0f be       	out	0x3f, r0	; 63
 c98:	0f 90       	pop	r0
 c9a:	1f 90       	pop	r1
 c9c:	18 95       	reti

00000c9e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 c9e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 ca0:	84 b5       	in	r24, 0x24	; 36
 ca2:	82 60       	ori	r24, 0x02	; 2
 ca4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 ca6:	84 b5       	in	r24, 0x24	; 36
 ca8:	81 60       	ori	r24, 0x01	; 1
 caa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 cac:	85 b5       	in	r24, 0x25	; 37
 cae:	82 60       	ori	r24, 0x02	; 2
 cb0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 cb2:	85 b5       	in	r24, 0x25	; 37
 cb4:	81 60       	ori	r24, 0x01	; 1
 cb6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 cb8:	ee e6       	ldi	r30, 0x6E	; 110
 cba:	f0 e0       	ldi	r31, 0x00	; 0
 cbc:	80 81       	ld	r24, Z
 cbe:	81 60       	ori	r24, 0x01	; 1
 cc0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 cc2:	e1 e8       	ldi	r30, 0x81	; 129
 cc4:	f0 e0       	ldi	r31, 0x00	; 0
 cc6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 cc8:	80 81       	ld	r24, Z
 cca:	82 60       	ori	r24, 0x02	; 2
 ccc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 cce:	80 81       	ld	r24, Z
 cd0:	81 60       	ori	r24, 0x01	; 1
 cd2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 cd4:	e0 e8       	ldi	r30, 0x80	; 128
 cd6:	f0 e0       	ldi	r31, 0x00	; 0
 cd8:	80 81       	ld	r24, Z
 cda:	81 60       	ori	r24, 0x01	; 1
 cdc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 cde:	e1 eb       	ldi	r30, 0xB1	; 177
 ce0:	f0 e0       	ldi	r31, 0x00	; 0
 ce2:	80 81       	ld	r24, Z
 ce4:	84 60       	ori	r24, 0x04	; 4
 ce6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 ce8:	e0 eb       	ldi	r30, 0xB0	; 176
 cea:	f0 e0       	ldi	r31, 0x00	; 0
 cec:	80 81       	ld	r24, Z
 cee:	81 60       	ori	r24, 0x01	; 1
 cf0:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 cf2:	e1 e9       	ldi	r30, 0x91	; 145
 cf4:	f0 e0       	ldi	r31, 0x00	; 0
 cf6:	80 81       	ld	r24, Z
 cf8:	82 60       	ori	r24, 0x02	; 2
 cfa:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 cfc:	80 81       	ld	r24, Z
 cfe:	81 60       	ori	r24, 0x01	; 1
 d00:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 d02:	e0 e9       	ldi	r30, 0x90	; 144
 d04:	f0 e0       	ldi	r31, 0x00	; 0
 d06:	80 81       	ld	r24, Z
 d08:	81 60       	ori	r24, 0x01	; 1
 d0a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 d0c:	e1 ea       	ldi	r30, 0xA1	; 161
 d0e:	f0 e0       	ldi	r31, 0x00	; 0
 d10:	80 81       	ld	r24, Z
 d12:	82 60       	ori	r24, 0x02	; 2
 d14:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 d16:	80 81       	ld	r24, Z
 d18:	81 60       	ori	r24, 0x01	; 1
 d1a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 d1c:	e0 ea       	ldi	r30, 0xA0	; 160
 d1e:	f0 e0       	ldi	r31, 0x00	; 0
 d20:	80 81       	ld	r24, Z
 d22:	81 60       	ori	r24, 0x01	; 1
 d24:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 d26:	e1 e2       	ldi	r30, 0x21	; 33
 d28:	f1 e0       	ldi	r31, 0x01	; 1
 d2a:	80 81       	ld	r24, Z
 d2c:	82 60       	ori	r24, 0x02	; 2
 d2e:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 d30:	80 81       	ld	r24, Z
 d32:	81 60       	ori	r24, 0x01	; 1
 d34:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 d36:	e0 e2       	ldi	r30, 0x20	; 32
 d38:	f1 e0       	ldi	r31, 0x01	; 1
 d3a:	80 81       	ld	r24, Z
 d3c:	81 60       	ori	r24, 0x01	; 1
 d3e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 d40:	ea e7       	ldi	r30, 0x7A	; 122
 d42:	f0 e0       	ldi	r31, 0x00	; 0
 d44:	80 81       	ld	r24, Z
 d46:	84 60       	ori	r24, 0x04	; 4
 d48:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 d4a:	80 81       	ld	r24, Z
 d4c:	82 60       	ori	r24, 0x02	; 2
 d4e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 d50:	80 81       	ld	r24, Z
 d52:	81 60       	ori	r24, 0x01	; 1
 d54:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 d56:	80 81       	ld	r24, Z
 d58:	80 68       	ori	r24, 0x80	; 128
 d5a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 d5c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 d60:	08 95       	ret

00000d62 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	fc 01       	movw	r30, r24
 d66:	31 97       	sbiw	r30, 0x01	; 1
 d68:	e2 31       	cpi	r30, 0x12	; 18
 d6a:	f1 05       	cpc	r31, r1
 d6c:	08 f0       	brcs	.+2      	; 0xd70 <turnOffPWM+0xe>
 d6e:	4d c0       	rjmp	.+154    	; 0xe0a <turnOffPWM+0xa8>
 d70:	88 27       	eor	r24, r24
 d72:	e7 58       	subi	r30, 0x87	; 135
 d74:	ff 4f       	sbci	r31, 0xFF	; 255
 d76:	8f 4f       	sbci	r24, 0xFF	; 255
 d78:	d5 c0       	rjmp	.+426    	; 0xf24 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 d7a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 d7e:	8f 77       	andi	r24, 0x7F	; 127
 d80:	03 c0       	rjmp	.+6      	; 0xd88 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 d82:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 d86:	8f 7d       	andi	r24, 0xDF	; 223
 d88:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 d8c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 d8e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 d92:	87 7f       	andi	r24, 0xF7	; 247
 d94:	f9 cf       	rjmp	.-14     	; 0xd88 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 d96:	84 b5       	in	r24, 0x24	; 36
 d98:	8f 77       	andi	r24, 0x7F	; 127
 d9a:	02 c0       	rjmp	.+4      	; 0xda0 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 d9c:	84 b5       	in	r24, 0x24	; 36
 d9e:	8f 7d       	andi	r24, 0xDF	; 223
 da0:	84 bd       	out	0x24, r24	; 36
 da2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 da4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 da8:	8f 77       	andi	r24, 0x7F	; 127
 daa:	03 c0       	rjmp	.+6      	; 0xdb2 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 dac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 db0:	8f 7d       	andi	r24, 0xDF	; 223
 db2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 db6:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 db8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 dbc:	8f 77       	andi	r24, 0x7F	; 127
 dbe:	07 c0       	rjmp	.+14     	; 0xdce <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 dc0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 dc4:	8f 7d       	andi	r24, 0xDF	; 223
 dc6:	03 c0       	rjmp	.+6      	; 0xdce <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 dc8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 dcc:	87 7f       	andi	r24, 0xF7	; 247
 dce:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 dd2:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 dd4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 dd8:	8f 77       	andi	r24, 0x7F	; 127
 dda:	07 c0       	rjmp	.+14     	; 0xdea <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 ddc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 de0:	8f 7d       	andi	r24, 0xDF	; 223
 de2:	03 c0       	rjmp	.+6      	; 0xdea <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 de4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 de8:	87 7f       	andi	r24, 0xF7	; 247
 dea:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 dee:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 df0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 df4:	8f 77       	andi	r24, 0x7F	; 127
 df6:	07 c0       	rjmp	.+14     	; 0xe06 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 df8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 dfc:	8f 7d       	andi	r24, 0xDF	; 223
 dfe:	03 c0       	rjmp	.+6      	; 0xe06 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 e00:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 e04:	87 7f       	andi	r24, 0xF7	; 247
 e06:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 e0a:	08 95       	ret

00000e0c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 e0c:	cf 93       	push	r28
 e0e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 e10:	90 e0       	ldi	r25, 0x00	; 0
 e12:	fc 01       	movw	r30, r24
 e14:	e4 5a       	subi	r30, 0xA4	; 164
 e16:	fe 4f       	sbci	r31, 0xFE	; 254
 e18:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 e1a:	fc 01       	movw	r30, r24
 e1c:	ee 55       	subi	r30, 0x5E	; 94
 e1e:	fe 4f       	sbci	r31, 0xFE	; 254
 e20:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 e22:	88 23       	and	r24, r24
 e24:	61 f1       	breq	.+88     	; 0xe7e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 e26:	90 e0       	ldi	r25, 0x00	; 0
 e28:	88 0f       	add	r24, r24
 e2a:	99 1f       	adc	r25, r25
 e2c:	fc 01       	movw	r30, r24
 e2e:	ee 5f       	subi	r30, 0xFE	; 254
 e30:	fd 4f       	sbci	r31, 0xFD	; 253
 e32:	c5 91       	lpm	r28, Z+
 e34:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 e36:	fc 01       	movw	r30, r24
 e38:	e8 51       	subi	r30, 0x18	; 24
 e3a:	fe 4f       	sbci	r31, 0xFE	; 254
 e3c:	a5 91       	lpm	r26, Z+
 e3e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 e40:	61 11       	cpse	r22, r1
 e42:	09 c0       	rjmp	.+18     	; 0xe56 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 e44:	9f b7       	in	r25, 0x3f	; 63
                cli();
 e46:	f8 94       	cli
		*reg &= ~bit;
 e48:	88 81       	ld	r24, Y
 e4a:	20 95       	com	r18
 e4c:	82 23       	and	r24, r18
 e4e:	88 83       	st	Y, r24
		*out &= ~bit;
 e50:	ec 91       	ld	r30, X
 e52:	2e 23       	and	r18, r30
 e54:	0b c0       	rjmp	.+22     	; 0xe6c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 e56:	62 30       	cpi	r22, 0x02	; 2
 e58:	61 f4       	brne	.+24     	; 0xe72 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 e5a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 e5c:	f8 94       	cli
		*reg &= ~bit;
 e5e:	88 81       	ld	r24, Y
 e60:	32 2f       	mov	r19, r18
 e62:	30 95       	com	r19
 e64:	83 23       	and	r24, r19
 e66:	88 83       	st	Y, r24
		*out |= bit;
 e68:	ec 91       	ld	r30, X
 e6a:	2e 2b       	or	r18, r30
 e6c:	2c 93       	st	X, r18
		SREG = oldSREG;
 e6e:	9f bf       	out	0x3f, r25	; 63
 e70:	06 c0       	rjmp	.+12     	; 0xe7e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 e72:	8f b7       	in	r24, 0x3f	; 63
                cli();
 e74:	f8 94       	cli
		*reg |= bit;
 e76:	e8 81       	ld	r30, Y
 e78:	2e 2b       	or	r18, r30
 e7a:	28 83       	st	Y, r18
		SREG = oldSREG;
 e7c:	8f bf       	out	0x3f, r24	; 63
	}
}
 e7e:	df 91       	pop	r29
 e80:	cf 91       	pop	r28
 e82:	08 95       	ret

00000e84 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 e84:	1f 93       	push	r17
 e86:	cf 93       	push	r28
 e88:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 e8a:	28 2f       	mov	r18, r24
 e8c:	30 e0       	ldi	r19, 0x00	; 0
 e8e:	f9 01       	movw	r30, r18
 e90:	ea 5e       	subi	r30, 0xEA	; 234
 e92:	fe 4f       	sbci	r31, 0xFE	; 254
 e94:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 e96:	f9 01       	movw	r30, r18
 e98:	e4 5a       	subi	r30, 0xA4	; 164
 e9a:	fe 4f       	sbci	r31, 0xFE	; 254
 e9c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 e9e:	f9 01       	movw	r30, r18
 ea0:	ee 55       	subi	r30, 0x5E	; 94
 ea2:	fe 4f       	sbci	r31, 0xFE	; 254
 ea4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 ea6:	cc 23       	and	r28, r28
 ea8:	b9 f0       	breq	.+46     	; 0xed8 <digitalWrite+0x54>
 eaa:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 eac:	81 11       	cpse	r24, r1
 eae:	59 df       	rcall	.-334    	; 0xd62 <turnOffPWM>

	out = portOutputRegister(port);
 eb0:	ec 2f       	mov	r30, r28
 eb2:	f0 e0       	ldi	r31, 0x00	; 0
 eb4:	ee 0f       	add	r30, r30
 eb6:	ff 1f       	adc	r31, r31
 eb8:	e8 51       	subi	r30, 0x18	; 24
 eba:	fe 4f       	sbci	r31, 0xFE	; 254
 ebc:	a5 91       	lpm	r26, Z+
 ebe:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 ec0:	9f b7       	in	r25, 0x3f	; 63
	cli();
 ec2:	f8 94       	cli

	if (val == LOW) {
 ec4:	11 11       	cpse	r17, r1
 ec6:	04 c0       	rjmp	.+8      	; 0xed0 <digitalWrite+0x4c>
		*out &= ~bit;
 ec8:	8c 91       	ld	r24, X
 eca:	d0 95       	com	r29
 ecc:	d8 23       	and	r29, r24
 ece:	02 c0       	rjmp	.+4      	; 0xed4 <digitalWrite+0x50>
	} else {
		*out |= bit;
 ed0:	ec 91       	ld	r30, X
 ed2:	de 2b       	or	r29, r30
 ed4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 ed6:	9f bf       	out	0x3f, r25	; 63
}
 ed8:	df 91       	pop	r29
 eda:	cf 91       	pop	r28
 edc:	1f 91       	pop	r17
 ede:	08 95       	ret

00000ee0 <__udivmodsi4>:
 ee0:	a1 e2       	ldi	r26, 0x21	; 33
 ee2:	1a 2e       	mov	r1, r26
 ee4:	aa 1b       	sub	r26, r26
 ee6:	bb 1b       	sub	r27, r27
 ee8:	fd 01       	movw	r30, r26
 eea:	0d c0       	rjmp	.+26     	; 0xf06 <__udivmodsi4_ep>

00000eec <__udivmodsi4_loop>:
 eec:	aa 1f       	adc	r26, r26
 eee:	bb 1f       	adc	r27, r27
 ef0:	ee 1f       	adc	r30, r30
 ef2:	ff 1f       	adc	r31, r31
 ef4:	a2 17       	cp	r26, r18
 ef6:	b3 07       	cpc	r27, r19
 ef8:	e4 07       	cpc	r30, r20
 efa:	f5 07       	cpc	r31, r21
 efc:	20 f0       	brcs	.+8      	; 0xf06 <__udivmodsi4_ep>
 efe:	a2 1b       	sub	r26, r18
 f00:	b3 0b       	sbc	r27, r19
 f02:	e4 0b       	sbc	r30, r20
 f04:	f5 0b       	sbc	r31, r21

00000f06 <__udivmodsi4_ep>:
 f06:	66 1f       	adc	r22, r22
 f08:	77 1f       	adc	r23, r23
 f0a:	88 1f       	adc	r24, r24
 f0c:	99 1f       	adc	r25, r25
 f0e:	1a 94       	dec	r1
 f10:	69 f7       	brne	.-38     	; 0xeec <__udivmodsi4_loop>
 f12:	60 95       	com	r22
 f14:	70 95       	com	r23
 f16:	80 95       	com	r24
 f18:	90 95       	com	r25
 f1a:	9b 01       	movw	r18, r22
 f1c:	ac 01       	movw	r20, r24
 f1e:	bd 01       	movw	r22, r26
 f20:	cf 01       	movw	r24, r30
 f22:	08 95       	ret

00000f24 <__tablejump2__>:
 f24:	ee 0f       	add	r30, r30
 f26:	ff 1f       	adc	r31, r31
 f28:	88 1f       	adc	r24, r24
 f2a:	8b bf       	out	0x3b, r24	; 59
 f2c:	07 90       	elpm	r0, Z+
 f2e:	f6 91       	elpm	r31, Z
 f30:	e0 2d       	mov	r30, r0
 f32:	19 94       	eijmp

00000f34 <_exit>:
 f34:	f8 94       	cli

00000f36 <__stop_program>:
 f36:	ff cf       	rjmp	.-2      	; 0xf36 <__stop_program>
