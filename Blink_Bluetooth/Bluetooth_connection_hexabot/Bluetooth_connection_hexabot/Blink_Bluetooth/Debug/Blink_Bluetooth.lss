
Blink_Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000a8e  00000b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  00800214  00800214  00000b36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007ffc  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d2e  00000000  00000000  00008e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001832  00000000  00000000  0000ab5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000764  00000000  00000000  0000c38c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000220f  00000000  00000000  0000caf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ab1  00000000  00000000  0000ecff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  000117b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	07 c1       	rjmp	.+526    	; 0x210 <__ctors_end>
   2:	00 00       	nop
   4:	33 c1       	rjmp	.+614    	; 0x26c <__bad_interrupt>
   6:	00 00       	nop
   8:	31 c1       	rjmp	.+610    	; 0x26c <__bad_interrupt>
   a:	00 00       	nop
   c:	2f c1       	rjmp	.+606    	; 0x26c <__bad_interrupt>
   e:	00 00       	nop
  10:	2d c1       	rjmp	.+602    	; 0x26c <__bad_interrupt>
  12:	00 00       	nop
  14:	2b c1       	rjmp	.+598    	; 0x26c <__bad_interrupt>
  16:	00 00       	nop
  18:	29 c1       	rjmp	.+594    	; 0x26c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	27 c1       	rjmp	.+590    	; 0x26c <__bad_interrupt>
  1e:	00 00       	nop
  20:	25 c1       	rjmp	.+586    	; 0x26c <__bad_interrupt>
  22:	00 00       	nop
  24:	23 c1       	rjmp	.+582    	; 0x26c <__bad_interrupt>
  26:	00 00       	nop
  28:	21 c1       	rjmp	.+578    	; 0x26c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1f c1       	rjmp	.+574    	; 0x26c <__bad_interrupt>
  2e:	00 00       	nop
  30:	1d c1       	rjmp	.+570    	; 0x26c <__bad_interrupt>
  32:	00 00       	nop
  34:	1b c1       	rjmp	.+566    	; 0x26c <__bad_interrupt>
  36:	00 00       	nop
  38:	19 c1       	rjmp	.+562    	; 0x26c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	17 c1       	rjmp	.+558    	; 0x26c <__bad_interrupt>
  3e:	00 00       	nop
  40:	15 c1       	rjmp	.+554    	; 0x26c <__bad_interrupt>
  42:	00 00       	nop
  44:	13 c1       	rjmp	.+550    	; 0x26c <__bad_interrupt>
  46:	00 00       	nop
  48:	11 c1       	rjmp	.+546    	; 0x26c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0f c1       	rjmp	.+542    	; 0x26c <__bad_interrupt>
  4e:	00 00       	nop
  50:	0d c1       	rjmp	.+538    	; 0x26c <__bad_interrupt>
  52:	00 00       	nop
  54:	0b c1       	rjmp	.+534    	; 0x26c <__bad_interrupt>
  56:	00 00       	nop
  58:	09 c1       	rjmp	.+530    	; 0x26c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	81 c3       	rjmp	.+1794   	; 0x760 <__vector_23>
  5e:	00 00       	nop
  60:	05 c1       	rjmp	.+522    	; 0x26c <__bad_interrupt>
  62:	00 00       	nop
  64:	96 c2       	rjmp	.+1324   	; 0x592 <__vector_25>
  66:	00 00       	nop
  68:	ca c2       	rjmp	.+1428   	; 0x5fe <__vector_26>
  6a:	00 00       	nop
  6c:	ff c0       	rjmp	.+510    	; 0x26c <__bad_interrupt>
  6e:	00 00       	nop
  70:	fd c0       	rjmp	.+506    	; 0x26c <__bad_interrupt>
  72:	00 00       	nop
  74:	fb c0       	rjmp	.+502    	; 0x26c <__bad_interrupt>
  76:	00 00       	nop
  78:	f9 c0       	rjmp	.+498    	; 0x26c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	f7 c0       	rjmp	.+494    	; 0x26c <__bad_interrupt>
  7e:	00 00       	nop
  80:	f5 c0       	rjmp	.+490    	; 0x26c <__bad_interrupt>
  82:	00 00       	nop
  84:	f3 c0       	rjmp	.+486    	; 0x26c <__bad_interrupt>
  86:	00 00       	nop
  88:	f1 c0       	rjmp	.+482    	; 0x26c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ef c0       	rjmp	.+478    	; 0x26c <__bad_interrupt>
  8e:	00 00       	nop
  90:	ed c0       	rjmp	.+474    	; 0x26c <__bad_interrupt>
  92:	00 00       	nop
  94:	eb c0       	rjmp	.+470    	; 0x26c <__bad_interrupt>
  96:	00 00       	nop
  98:	e9 c0       	rjmp	.+466    	; 0x26c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	e7 c0       	rjmp	.+462    	; 0x26c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	e5 c0       	rjmp	.+458    	; 0x26c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	e3 c0       	rjmp	.+454    	; 0x26c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e1 c0       	rjmp	.+450    	; 0x26c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	df c0       	rjmp	.+446    	; 0x26c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	dd c0       	rjmp	.+442    	; 0x26c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	db c0       	rjmp	.+438    	; 0x26c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	d9 c0       	rjmp	.+434    	; 0x26c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	d7 c0       	rjmp	.+430    	; 0x26c <__bad_interrupt>
  be:	00 00       	nop
  c0:	d5 c0       	rjmp	.+426    	; 0x26c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	d3 c0       	rjmp	.+422    	; 0x26c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	d1 c0       	rjmp	.+418    	; 0x26c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	cf c0       	rjmp	.+414    	; 0x26c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	cd c0       	rjmp	.+410    	; 0x26c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	cb c0       	rjmp	.+406    	; 0x26c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	c9 c0       	rjmp	.+402    	; 0x26c <__bad_interrupt>
  da:	00 00       	nop
  dc:	c7 c0       	rjmp	.+398    	; 0x26c <__bad_interrupt>
  de:	00 00       	nop
  e0:	c5 c0       	rjmp	.+394    	; 0x26c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	76 04       	cpc	r7, r6
  e6:	79 04       	cpc	r7, r9
  e8:	68 04       	cpc	r6, r8
  ea:	6c 04       	cpc	r6, r12
  ec:	72 04       	cpc	r7, r2
  ee:	b0 04       	cpc	r11, r0
  f0:	7d 04       	cpc	r7, r13
  f2:	81 04       	cpc	r8, r1
  f4:	87 04       	cpc	r8, r7
  f6:	8b 04       	cpc	r8, r11
  f8:	8f 04       	cpc	r8, r15
  fa:	95 04       	cpc	r9, r5
  fc:	99 04       	cpc	r9, r9
  fe:	9d 04       	cpc	r9, r13
 100:	b0 04       	cpc	r11, r0
 102:	a3 04       	cpc	r10, r3
 104:	a7 04       	cpc	r10, r7
 106:	ab 04       	cpc	r10, r11

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
 1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
 1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
 20e:	31 03       	mulsu	r19, r17

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d1 e2       	ldi	r29, 0x21	; 33
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	0c bf       	out	0x3c, r16	; 60

00000220 <__do_copy_data>:
 220:	12 e0       	ldi	r17, 0x02	; 2
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b2 e0       	ldi	r27, 0x02	; 2
 226:	ee e8       	ldi	r30, 0x8E	; 142
 228:	fa e0       	ldi	r31, 0x0A	; 10
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	0b bf       	out	0x3b, r16	; 59
 22e:	02 c0       	rjmp	.+4      	; 0x234 <__do_copy_data+0x14>
 230:	07 90       	elpm	r0, Z+
 232:	0d 92       	st	X+, r0
 234:	a4 31       	cpi	r26, 0x14	; 20
 236:	b1 07       	cpc	r27, r17
 238:	d9 f7       	brne	.-10     	; 0x230 <__do_copy_data+0x10>

0000023a <__do_clear_bss>:
 23a:	22 e0       	ldi	r18, 0x02	; 2
 23c:	a4 e1       	ldi	r26, 0x14	; 20
 23e:	b2 e0       	ldi	r27, 0x02	; 2
 240:	01 c0       	rjmp	.+2      	; 0x244 <.do_clear_bss_start>

00000242 <.do_clear_bss_loop>:
 242:	1d 92       	st	X+, r1

00000244 <.do_clear_bss_start>:
 244:	ab 3b       	cpi	r26, 0xBB	; 187
 246:	b2 07       	cpc	r27, r18
 248:	e1 f7       	brne	.-8      	; 0x242 <.do_clear_bss_loop>

0000024a <__do_global_ctors>:
 24a:	11 e0       	ldi	r17, 0x01	; 1
 24c:	c8 e0       	ldi	r28, 0x08	; 8
 24e:	d1 e0       	ldi	r29, 0x01	; 1
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	05 c0       	rjmp	.+10     	; 0x25e <__do_global_ctors+0x14>
 254:	21 97       	sbiw	r28, 0x01	; 1
 256:	01 09       	sbc	r16, r1
 258:	80 2f       	mov	r24, r16
 25a:	fe 01       	movw	r30, r28
 25c:	0e d4       	rcall	.+2076   	; 0xa7a <__tablejump2__>
 25e:	c7 30       	cpi	r28, 0x07	; 7
 260:	d1 07       	cpc	r29, r17
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 07       	cpc	r16, r24
 266:	b1 f7       	brne	.-20     	; 0x254 <__do_global_ctors+0xa>
 268:	2a d2       	rcall	.+1108   	; 0x6be <main>
 26a:	0f c4       	rjmp	.+2078   	; 0xa8a <_exit>

0000026c <__bad_interrupt>:
 26c:	c9 ce       	rjmp	.-622    	; 0x0 <__vectors>

0000026e <setup>:
// the setup function runs once when you press reset or power the board


void setup() {
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	8d e0       	ldi	r24, 0x0D	; 13
 272:	77 d3       	rcall	.+1774   	; 0x962 <pinMode>
  pinMode(13, OUTPUT);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	74 d3       	rcall	.+1768   	; 0x962 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 27a:	26 e0       	ldi	r18, 0x06	; 6
 27c:	40 e8       	ldi	r20, 0x80	; 128
 27e:	55 e2       	ldi	r21, 0x25	; 37
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	85 e1       	ldi	r24, 0x15	; 21
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	21 c1       	rjmp	.+578    	; 0x4cc <_ZN14HardwareSerial5beginEmh>

0000028a <loop>:


// the loop function runs over and over again forever
void loop() {
int i;
if(Serial.available() > 0){ // Checks whether data is comming from the serial port
 28a:	85 e1       	ldi	r24, 0x15	; 21
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	1d d0       	rcall	.+58     	; 0x2ca <_ZN14HardwareSerial9availableEv>
 290:	18 16       	cp	r1, r24
 292:	19 06       	cpc	r1, r25
 294:	cc f4       	brge	.+50     	; 0x2c8 <loop+0x3e>
    
    
    data = Serial.read();   // Reads the data from the serial port
 296:	85 e1       	ldi	r24, 0x15	; 21
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	31 d0       	rcall	.+98     	; 0x2fe <_ZN14HardwareSerial4readEv>
 29c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
  // data = 0;
    Serial.print(data);        //Print Value inside data in Serial monitor
 2a0:	68 2f       	mov	r22, r24
 2a2:	85 e1       	ldi	r24, 0x15	; 21
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	55 d2       	rcall	.+1194   	; 0x752 <_ZN5Print5printEc>
    Serial.print("\n");        //New line 
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	72 e0       	ldi	r23, 0x02	; 2
 2ac:	85 e1       	ldi	r24, 0x15	; 21
 2ae:	92 e0       	ldi	r25, 0x02	; 2
 2b0:	4f d2       	rcall	.+1182   	; 0x750 <_ZN5Print5printEPKc>
    
 if(data == '1')            //Checks whether value of data is equal to 1
 2b2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 2b6:	81 33       	cpi	r24, 0x31	; 49
 2b8:	11 f4       	brne	.+4      	; 0x2be <loop+0x34>
	
	digitalWrite(13, HIGH);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <loop+0x3a>
		digitalWrite(13, HIGH);  //If value is 1 then LED turns ON
		delay(50);
		digitalWrite(13, LOW);
		delay(50);
	}*/
  else if(data == '0')       //Checks whether value of data is equal to 0
 2be:	80 33       	cpi	r24, 0x30	; 48
    digitalWrite(13, LOW);   //If value is 0 then LED turns OFF
 2c0:	19 f4       	brne	.+6      	; 0x2c8 <loop+0x3e>
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	89 c3       	rjmp	.+1810   	; 0x9da <digitalWrite>
 2c8:	08 95       	ret

000002ca <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2ca:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2cc:	91 8d       	ldd	r25, Z+25	; 0x19
 2ce:	22 8d       	ldd	r18, Z+26	; 0x1a
 2d0:	89 2f       	mov	r24, r25
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	80 5c       	subi	r24, 0xC0	; 192
 2d6:	9f 4f       	sbci	r25, 0xFF	; 255
 2d8:	82 1b       	sub	r24, r18
 2da:	91 09       	sbc	r25, r1
}
 2dc:	8f 73       	andi	r24, 0x3F	; 63
 2de:	99 27       	eor	r25, r25
 2e0:	08 95       	ret

000002e2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 2e2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 2e4:	91 8d       	ldd	r25, Z+25	; 0x19
 2e6:	82 8d       	ldd	r24, Z+26	; 0x1a
 2e8:	98 17       	cp	r25, r24
 2ea:	31 f0       	breq	.+12     	; 0x2f8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2ec:	82 8d       	ldd	r24, Z+26	; 0x1a
 2ee:	e8 0f       	add	r30, r24
 2f0:	f1 1d       	adc	r31, r1
 2f2:	85 8d       	ldd	r24, Z+29	; 0x1d
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2fc:	08 95       	ret

000002fe <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 2fe:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 300:	91 8d       	ldd	r25, Z+25	; 0x19
 302:	82 8d       	ldd	r24, Z+26	; 0x1a
 304:	98 17       	cp	r25, r24
 306:	61 f0       	breq	.+24     	; 0x320 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 308:	82 8d       	ldd	r24, Z+26	; 0x1a
 30a:	df 01       	movw	r26, r30
 30c:	a8 0f       	add	r26, r24
 30e:	b1 1d       	adc	r27, r1
 310:	5d 96       	adiw	r26, 0x1d	; 29
 312:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 314:	92 8d       	ldd	r25, Z+26	; 0x1a
 316:	9f 5f       	subi	r25, 0xFF	; 255
 318:	9f 73       	andi	r25, 0x3F	; 63
 31a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 324:	08 95       	ret

00000326 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 326:	fc 01       	movw	r30, r24
 328:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 32a:	44 8d       	ldd	r20, Z+28	; 0x1c
 32c:	25 2f       	mov	r18, r21
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	84 2f       	mov	r24, r20
 332:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 334:	82 1b       	sub	r24, r18
 336:	93 0b       	sbc	r25, r19
 338:	54 17       	cp	r21, r20
 33a:	10 f0       	brcs	.+4      	; 0x340 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 33c:	cf 96       	adiw	r24, 0x3f	; 63
 33e:	08 95       	ret
  return tail - head - 1;
 340:	01 97       	sbiw	r24, 0x01	; 1
}
 342:	08 95       	ret

00000344 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 344:	88 e2       	ldi	r24, 0x28	; 40
 346:	93 e0       	ldi	r25, 0x03	; 3
 348:	89 2b       	or	r24, r25
 34a:	39 f0       	breq	.+14     	; 0x35a <_Z14serialEventRunv+0x16>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	89 2b       	or	r24, r25
 352:	19 f0       	breq	.+6      	; 0x35a <_Z14serialEventRunv+0x16>
 354:	7d d1       	rcall	.+762    	; 0x650 <_Z17Serial0_availablev>
 356:	81 11       	cpse	r24, r1
 358:	25 c0       	rjmp	.+74     	; 0x3a4 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	89 2b       	or	r24, r25
 360:	41 f0       	breq	.+16     	; 0x372 <_Z14serialEventRunv+0x2e>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	89 2b       	or	r24, r25
 368:	21 f0       	breq	.+8      	; 0x372 <_Z14serialEventRunv+0x2e>
 36a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 36e:	81 11       	cpse	r24, r1
 370:	1c c0       	rjmp	.+56     	; 0x3aa <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	89 2b       	or	r24, r25
 378:	41 f0       	breq	.+16     	; 0x38a <_Z14serialEventRunv+0x46>
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	89 2b       	or	r24, r25
 380:	21 f0       	breq	.+8      	; 0x38a <_Z14serialEventRunv+0x46>
 382:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 386:	81 11       	cpse	r24, r1
 388:	13 c0       	rjmp	.+38     	; 0x3b0 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	89 2b       	or	r24, r25
 390:	a1 f0       	breq	.+40     	; 0x3ba <_Z14serialEventRunv+0x76>
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	89 2b       	or	r24, r25
 398:	81 f0       	breq	.+32     	; 0x3ba <_Z14serialEventRunv+0x76>
 39a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 39e:	81 11       	cpse	r24, r1
 3a0:	0a c0       	rjmp	.+20     	; 0x3b6 <_Z14serialEventRunv+0x72>
 3a2:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 3a4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3a8:	d8 cf       	rjmp	.-80     	; 0x35a <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 3aa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3ae:	e1 cf       	rjmp	.-62     	; 0x372 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 3b0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3b4:	ea cf       	rjmp	.-44     	; 0x38a <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 3b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 3ba:	08 95       	ret

000003bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 3bc:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 3be:	84 8d       	ldd	r24, Z+28	; 0x1c
 3c0:	df 01       	movw	r26, r30
 3c2:	a8 0f       	add	r26, r24
 3c4:	b1 1d       	adc	r27, r1
 3c6:	a3 5a       	subi	r26, 0xA3	; 163
 3c8:	bf 4f       	sbci	r27, 0xFF	; 255
 3ca:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 3cc:	84 8d       	ldd	r24, Z+28	; 0x1c
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	8f 73       	andi	r24, 0x3F	; 63
 3d4:	99 27       	eor	r25, r25
 3d6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 3d8:	a6 89       	ldd	r26, Z+22	; 0x16
 3da:	b7 89       	ldd	r27, Z+23	; 0x17
 3dc:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 3de:	a0 89       	ldd	r26, Z+16	; 0x10
 3e0:	b1 89       	ldd	r27, Z+17	; 0x11
 3e2:	8c 91       	ld	r24, X
 3e4:	80 64       	ori	r24, 0x40	; 64
 3e6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 3e8:	93 8d       	ldd	r25, Z+27	; 0x1b
 3ea:	84 8d       	ldd	r24, Z+28	; 0x1c
 3ec:	98 13       	cpse	r25, r24
 3ee:	06 c0       	rjmp	.+12     	; 0x3fc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 3f0:	02 88       	ldd	r0, Z+18	; 0x12
 3f2:	f3 89       	ldd	r31, Z+19	; 0x13
 3f4:	e0 2d       	mov	r30, r0
 3f6:	80 81       	ld	r24, Z
 3f8:	8f 7d       	andi	r24, 0xDF	; 223
 3fa:	80 83       	st	Z, r24
 3fc:	08 95       	ret

000003fe <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 3fe:	ef 92       	push	r14
 400:	ff 92       	push	r15
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	ec 01       	movw	r28, r24
  _written = true;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 410:	9b 8d       	ldd	r25, Y+27	; 0x1b
 412:	8c 8d       	ldd	r24, Y+28	; 0x1c
 414:	98 13       	cpse	r25, r24
 416:	05 c0       	rjmp	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 418:	e8 89       	ldd	r30, Y+16	; 0x10
 41a:	f9 89       	ldd	r31, Y+17	; 0x11
 41c:	80 81       	ld	r24, Z
 41e:	85 fd       	sbrc	r24, 5
 420:	23 c0       	rjmp	.+70     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 422:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 424:	0b 8d       	ldd	r16, Y+27	; 0x1b
 426:	10 e0       	ldi	r17, 0x00	; 0
 428:	0f 5f       	subi	r16, 0xFF	; 255
 42a:	1f 4f       	sbci	r17, 0xFF	; 255
 42c:	0f 73       	andi	r16, 0x3F	; 63
 42e:	11 27       	eor	r17, r17
 430:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 432:	8c 8d       	ldd	r24, Y+28	; 0x1c
 434:	e8 12       	cpse	r14, r24
 436:	0b c0       	rjmp	.+22     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
    if (bit_is_clear(SREG, SREG_I)) {
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	07 fc       	sbrc	r0, 7
 43c:	fa cf       	rjmp	.-12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 43e:	e8 89       	ldd	r30, Y+16	; 0x10
 440:	f9 89       	ldd	r31, Y+17	; 0x11
 442:	80 81       	ld	r24, Z
 444:	85 ff       	sbrs	r24, 5
 446:	f5 cf       	rjmp	.-22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	_tx_udr_empty_irq();
 448:	ce 01       	movw	r24, r28
 44a:	b8 df       	rcall	.-144    	; 0x3bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 44c:	f2 cf       	rjmp	.-28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 44e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 450:	fe 01       	movw	r30, r28
 452:	e8 0f       	add	r30, r24
 454:	f1 1d       	adc	r31, r1
 456:	e3 5a       	subi	r30, 0xA3	; 163
 458:	ff 4f       	sbci	r31, 0xFF	; 255
 45a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 45c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 45e:	ea 89       	ldd	r30, Y+18	; 0x12
 460:	fb 89       	ldd	r31, Y+19	; 0x13
 462:	80 81       	ld	r24, Z
 464:	80 62       	ori	r24, 0x20	; 32
 466:	07 c0       	rjmp	.+14     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 468:	ee 89       	ldd	r30, Y+22	; 0x16
 46a:	ff 89       	ldd	r31, Y+23	; 0x17
 46c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 46e:	e8 89       	ldd	r30, Y+16	; 0x10
 470:	f9 89       	ldd	r31, Y+17	; 0x11
 472:	80 81       	ld	r24, Z
 474:	80 64       	ori	r24, 0x40	; 64
 476:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	ff 90       	pop	r15
 486:	ef 90       	pop	r14
 488:	08 95       	ret

0000048a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 490:	88 8d       	ldd	r24, Y+24	; 0x18
 492:	88 23       	and	r24, r24
 494:	c1 f0       	breq	.+48     	; 0x4c6 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 496:	ea 89       	ldd	r30, Y+18	; 0x12
 498:	fb 89       	ldd	r31, Y+19	; 0x13
 49a:	80 81       	ld	r24, Z
 49c:	85 fd       	sbrc	r24, 5
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <_ZN14HardwareSerial5flushEv+0x20>
 4a0:	a8 89       	ldd	r26, Y+16	; 0x10
 4a2:	b9 89       	ldd	r27, Y+17	; 0x11
 4a4:	8c 91       	ld	r24, X
 4a6:	86 fd       	sbrc	r24, 6
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	07 fc       	sbrc	r0, 7
 4ae:	f5 cf       	rjmp	.-22     	; 0x49a <_ZN14HardwareSerial5flushEv+0x10>
 4b0:	80 81       	ld	r24, Z
 4b2:	85 ff       	sbrs	r24, 5
 4b4:	f2 cf       	rjmp	.-28     	; 0x49a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4b6:	a8 89       	ldd	r26, Y+16	; 0x10
 4b8:	b9 89       	ldd	r27, Y+17	; 0x11
 4ba:	8c 91       	ld	r24, X
 4bc:	85 ff       	sbrs	r24, 5
 4be:	ed cf       	rjmp	.-38     	; 0x49a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4c0:	ce 01       	movw	r24, r28
 4c2:	7c df       	rcall	.-264    	; 0x3bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4c4:	e8 cf       	rjmp	.-48     	; 0x496 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 4cc:	cf 92       	push	r12
 4ce:	df 92       	push	r13
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	ec 01       	movw	r28, r24
 4dc:	6a 01       	movw	r12, r20
 4de:	7b 01       	movw	r14, r22
 4e0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 4e2:	e8 89       	ldd	r30, Y+16	; 0x10
 4e4:	f9 89       	ldd	r31, Y+17	; 0x11
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4ea:	41 15       	cp	r20, r1
 4ec:	51 4e       	sbci	r21, 0xE1	; 225
 4ee:	61 05       	cpc	r22, r1
 4f0:	71 05       	cpc	r23, r1
 4f2:	a9 f0       	breq	.+42     	; 0x51e <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	79 e0       	ldi	r23, 0x09	; 9
 4f8:	8d e3       	ldi	r24, 0x3D	; 61
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	a7 01       	movw	r20, r14
 4fe:	96 01       	movw	r18, r12
 500:	9a d2       	rcall	.+1332   	; 0xa36 <__udivmodsi4>
 502:	da 01       	movw	r26, r20
 504:	c9 01       	movw	r24, r18
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	a1 09       	sbc	r26, r1
 50a:	b1 09       	sbc	r27, r1
 50c:	b6 95       	lsr	r27
 50e:	a7 95       	ror	r26
 510:	97 95       	ror	r25
 512:	87 95       	ror	r24
 514:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 516:	21 15       	cp	r18, r1
 518:	80 e1       	ldi	r24, 0x10	; 16
 51a:	38 07       	cpc	r19, r24
 51c:	a0 f0       	brcs	.+40     	; 0x546 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 51e:	e8 89       	ldd	r30, Y+16	; 0x10
 520:	f9 89       	ldd	r31, Y+17	; 0x11
 522:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 524:	60 e8       	ldi	r22, 0x80	; 128
 526:	74 e8       	ldi	r23, 0x84	; 132
 528:	8e e1       	ldi	r24, 0x1E	; 30
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	a7 01       	movw	r20, r14
 52e:	96 01       	movw	r18, r12
 530:	82 d2       	rcall	.+1284   	; 0xa36 <__udivmodsi4>
 532:	da 01       	movw	r26, r20
 534:	c9 01       	movw	r24, r18
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	a1 09       	sbc	r26, r1
 53a:	b1 09       	sbc	r27, r1
 53c:	b6 95       	lsr	r27
 53e:	a7 95       	ror	r26
 540:	97 95       	ror	r25
 542:	87 95       	ror	r24
 544:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 546:	ec 85       	ldd	r30, Y+12	; 0x0c
 548:	fd 85       	ldd	r31, Y+13	; 0x0d
 54a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 54c:	ee 85       	ldd	r30, Y+14	; 0x0e
 54e:	ff 85       	ldd	r31, Y+15	; 0x0f
 550:	20 83       	st	Z, r18

  _written = false;
 552:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 554:	ec 89       	ldd	r30, Y+20	; 0x14
 556:	fd 89       	ldd	r31, Y+21	; 0x15
 558:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 55a:	ea 89       	ldd	r30, Y+18	; 0x12
 55c:	fb 89       	ldd	r31, Y+19	; 0x13
 55e:	80 81       	ld	r24, Z
 560:	80 61       	ori	r24, 0x10	; 16
 562:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 564:	ea 89       	ldd	r30, Y+18	; 0x12
 566:	fb 89       	ldd	r31, Y+19	; 0x13
 568:	80 81       	ld	r24, Z
 56a:	88 60       	ori	r24, 0x08	; 8
 56c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 56e:	ea 89       	ldd	r30, Y+18	; 0x12
 570:	fb 89       	ldd	r31, Y+19	; 0x13
 572:	80 81       	ld	r24, Z
 574:	80 68       	ori	r24, 0x80	; 128
 576:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 578:	ea 89       	ldd	r30, Y+18	; 0x12
 57a:	fb 89       	ldd	r31, Y+19	; 0x13
 57c:	80 81       	ld	r24, Z
 57e:	8f 7d       	andi	r24, 0xDF	; 223
 580:	80 83       	st	Z, r24
}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	1f 91       	pop	r17
 588:	ff 90       	pop	r15
 58a:	ef 90       	pop	r14
 58c:	df 90       	pop	r13
 58e:	cf 90       	pop	r12
 590:	08 95       	ret

00000592 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	0b b6       	in	r0, 0x3b	; 59
 59e:	0f 92       	push	r0
 5a0:	2f 93       	push	r18
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	ef 93       	push	r30
 5a8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 5aa:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <Serial+0x10>
 5ae:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <Serial+0x11>
 5b2:	80 81       	ld	r24, Z
 5b4:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <Serial+0x16>
 5b8:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <Serial+0x17>
 5bc:	82 fd       	sbrc	r24, 2
 5be:	12 c0       	rjmp	.+36     	; 0x5e4 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5c0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5c2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <Serial+0x19>
 5c6:	8f 5f       	subi	r24, 0xFF	; 255
 5c8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5ca:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <Serial+0x1a>
 5ce:	82 17       	cp	r24, r18
 5d0:	51 f0       	breq	.+20     	; 0x5e6 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 5d2:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <Serial+0x19>
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	eb 5e       	subi	r30, 0xEB	; 235
 5da:	fd 4f       	sbci	r31, 0xFD	; 253
 5dc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 5de:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <Serial+0x19>
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 5e4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	9f 91       	pop	r25
 5ec:	8f 91       	pop	r24
 5ee:	2f 91       	pop	r18
 5f0:	0f 90       	pop	r0
 5f2:	0b be       	out	0x3b, r0	; 59
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5fe:	1f 92       	push	r1
 600:	0f 92       	push	r0
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	0f 92       	push	r0
 606:	11 24       	eor	r1, r1
 608:	0b b6       	in	r0, 0x3b	; 59
 60a:	0f 92       	push	r0
 60c:	2f 93       	push	r18
 60e:	3f 93       	push	r19
 610:	4f 93       	push	r20
 612:	5f 93       	push	r21
 614:	6f 93       	push	r22
 616:	7f 93       	push	r23
 618:	8f 93       	push	r24
 61a:	9f 93       	push	r25
 61c:	af 93       	push	r26
 61e:	bf 93       	push	r27
 620:	ef 93       	push	r30
 622:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 624:	85 e1       	ldi	r24, 0x15	; 21
 626:	92 e0       	ldi	r25, 0x02	; 2
 628:	c9 de       	rcall	.-622    	; 0x3bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 62a:	ff 91       	pop	r31
 62c:	ef 91       	pop	r30
 62e:	bf 91       	pop	r27
 630:	af 91       	pop	r26
 632:	9f 91       	pop	r25
 634:	8f 91       	pop	r24
 636:	7f 91       	pop	r23
 638:	6f 91       	pop	r22
 63a:	5f 91       	pop	r21
 63c:	4f 91       	pop	r20
 63e:	3f 91       	pop	r19
 640:	2f 91       	pop	r18
 642:	0f 90       	pop	r0
 644:	0b be       	out	0x3b, r0	; 59
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 650:	85 e1       	ldi	r24, 0x15	; 21
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	3a de       	rcall	.-908    	; 0x2ca <_ZN14HardwareSerial9availableEv>
 656:	21 e0       	ldi	r18, 0x01	; 1
 658:	89 2b       	or	r24, r25
 65a:	09 f4       	brne	.+2      	; 0x65e <_Z17Serial0_availablev+0xe>
 65c:	20 e0       	ldi	r18, 0x00	; 0
}
 65e:	82 2f       	mov	r24, r18
 660:	08 95       	ret

00000662 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 662:	e5 e1       	ldi	r30, 0x15	; 21
 664:	f2 e0       	ldi	r31, 0x02	; 2
 666:	13 82       	std	Z+3, r1	; 0x03
 668:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 66a:	88 ee       	ldi	r24, 0xE8	; 232
 66c:	93 e0       	ldi	r25, 0x03	; 3
 66e:	a0 e0       	ldi	r26, 0x00	; 0
 670:	b0 e0       	ldi	r27, 0x00	; 0
 672:	84 83       	std	Z+4, r24	; 0x04
 674:	95 83       	std	Z+5, r25	; 0x05
 676:	a6 83       	std	Z+6, r26	; 0x06
 678:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 67a:	86 e0       	ldi	r24, 0x06	; 6
 67c:	92 e0       	ldi	r25, 0x02	; 2
 67e:	91 83       	std	Z+1, r25	; 0x01
 680:	80 83       	st	Z, r24
 682:	85 ec       	ldi	r24, 0xC5	; 197
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	95 87       	std	Z+13, r25	; 0x0d
 688:	84 87       	std	Z+12, r24	; 0x0c
 68a:	84 ec       	ldi	r24, 0xC4	; 196
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	97 87       	std	Z+15, r25	; 0x0f
 690:	86 87       	std	Z+14, r24	; 0x0e
 692:	80 ec       	ldi	r24, 0xC0	; 192
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	91 8b       	std	Z+17, r25	; 0x11
 698:	80 8b       	std	Z+16, r24	; 0x10
 69a:	81 ec       	ldi	r24, 0xC1	; 193
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	93 8b       	std	Z+19, r25	; 0x13
 6a0:	82 8b       	std	Z+18, r24	; 0x12
 6a2:	82 ec       	ldi	r24, 0xC2	; 194
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	95 8b       	std	Z+21, r25	; 0x15
 6a8:	84 8b       	std	Z+20, r24	; 0x14
 6aa:	86 ec       	ldi	r24, 0xC6	; 198
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	97 8b       	std	Z+23, r25	; 0x17
 6b0:	86 8b       	std	Z+22, r24	; 0x16
 6b2:	11 8e       	std	Z+25, r1	; 0x19
 6b4:	12 8e       	std	Z+26, r1	; 0x1a
 6b6:	13 8e       	std	Z+27, r1	; 0x1b
 6b8:	14 8e       	std	Z+28, r1	; 0x1c
 6ba:	08 95       	ret

000006bc <initVariant>:
 6bc:	08 95       	ret

000006be <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6be:	9a d0       	rcall	.+308    	; 0x7f4 <init>

	initVariant();
 6c0:	fd df       	rcall	.-6      	; 0x6bc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6c2:	d5 dd       	rcall	.-1110   	; 0x26e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6c4:	c2 ea       	ldi	r28, 0xA2	; 162
 6c6:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 6c8:	e0 dd       	rcall	.-1088   	; 0x28a <loop>
		if (serialEventRun) serialEventRun();
 6ca:	20 97       	sbiw	r28, 0x00	; 0
 6cc:	e9 f3       	breq	.-6      	; 0x6c8 <main+0xa>
 6ce:	3a de       	rcall	.-908    	; 0x344 <_Z14serialEventRunv>
 6d0:	fb cf       	rjmp	.-10     	; 0x6c8 <main+0xa>

000006d2 <_ZN5Print5writeEPKhj>:
 6d2:	cf 92       	push	r12
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
 6d4:	df 92       	push	r13
 6d6:	ef 92       	push	r14
 6d8:	ff 92       	push	r15
 6da:	0f 93       	push	r16
 6dc:	1f 93       	push	r17
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	6c 01       	movw	r12, r24
 6e4:	7a 01       	movw	r14, r20
 6e6:	8b 01       	movw	r16, r22
 6e8:	c0 e0       	ldi	r28, 0x00	; 0
 6ea:	d0 e0       	ldi	r29, 0x00	; 0
 6ec:	ce 15       	cp	r28, r14
 6ee:	df 05       	cpc	r29, r15
 6f0:	81 f0       	breq	.+32     	; 0x712 <_ZN5Print5writeEPKhj+0x40>
 6f2:	d8 01       	movw	r26, r16
 6f4:	6d 91       	ld	r22, X+
 6f6:	8d 01       	movw	r16, r26
 6f8:	d6 01       	movw	r26, r12
 6fa:	ed 91       	ld	r30, X+
 6fc:	fc 91       	ld	r31, X
 6fe:	01 90       	ld	r0, Z+
 700:	f0 81       	ld	r31, Z
 702:	e0 2d       	mov	r30, r0
 704:	c6 01       	movw	r24, r12
 706:	19 95       	eicall
 708:	89 2b       	or	r24, r25
 70a:	11 f0       	breq	.+4      	; 0x710 <_ZN5Print5writeEPKhj+0x3e>
 70c:	21 96       	adiw	r28, 0x01	; 1
 70e:	ee cf       	rjmp	.-36     	; 0x6ec <_ZN5Print5writeEPKhj+0x1a>
 710:	7e 01       	movw	r14, r28
 712:	c7 01       	movw	r24, r14
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	1f 91       	pop	r17
 71a:	0f 91       	pop	r16
 71c:	ff 90       	pop	r15
 71e:	ef 90       	pop	r14
 720:	df 90       	pop	r13
 722:	cf 90       	pop	r12
 724:	08 95       	ret

00000726 <_ZN5Print5writeEPKc>:
 726:	61 15       	cp	r22, r1
 728:	71 05       	cpc	r23, r1
 72a:	79 f0       	breq	.+30     	; 0x74a <_ZN5Print5writeEPKc+0x24>
 72c:	fb 01       	movw	r30, r22
 72e:	01 90       	ld	r0, Z+
 730:	00 20       	and	r0, r0
 732:	e9 f7       	brne	.-6      	; 0x72e <_ZN5Print5writeEPKc+0x8>
 734:	31 97       	sbiw	r30, 0x01	; 1
 736:	af 01       	movw	r20, r30
 738:	46 1b       	sub	r20, r22
 73a:	57 0b       	sbc	r21, r23
 73c:	dc 01       	movw	r26, r24
 73e:	ed 91       	ld	r30, X+
 740:	fc 91       	ld	r31, X
 742:	02 80       	ldd	r0, Z+2	; 0x02
 744:	f3 81       	ldd	r31, Z+3	; 0x03
 746:	e0 2d       	mov	r30, r0
 748:	19 94       	eijmp
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	08 95       	ret

00000750 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 750:	ea cf       	rjmp	.-44     	; 0x726 <_ZN5Print5writeEPKc>

00000752 <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
 752:	dc 01       	movw	r26, r24
 754:	ed 91       	ld	r30, X+
 756:	fc 91       	ld	r31, X
 758:	01 90       	ld	r0, Z+
 75a:	f0 81       	ld	r31, Z
 75c:	e0 2d       	mov	r30, r0
 75e:	19 94       	eijmp

00000760 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 760:	1f 92       	push	r1
 762:	0f 92       	push	r0
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	0f 92       	push	r0
 768:	11 24       	eor	r1, r1
 76a:	2f 93       	push	r18
 76c:	3f 93       	push	r19
 76e:	8f 93       	push	r24
 770:	9f 93       	push	r25
 772:	af 93       	push	r26
 774:	bf 93       	push	r27
 776:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <timer0_millis>
 77a:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <timer0_millis+0x1>
 77e:	a0 91 b5 02 	lds	r26, 0x02B5	; 0x8002b5 <timer0_millis+0x2>
 782:	b0 91 b6 02 	lds	r27, 0x02B6	; 0x8002b6 <timer0_millis+0x3>
 786:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <timer0_fract>
 78a:	23 e0       	ldi	r18, 0x03	; 3
 78c:	23 0f       	add	r18, r19
 78e:	2d 37       	cpi	r18, 0x7D	; 125
 790:	20 f4       	brcc	.+8      	; 0x79a <__vector_23+0x3a>
 792:	01 96       	adiw	r24, 0x01	; 1
 794:	a1 1d       	adc	r26, r1
 796:	b1 1d       	adc	r27, r1
 798:	05 c0       	rjmp	.+10     	; 0x7a4 <__vector_23+0x44>
 79a:	26 e8       	ldi	r18, 0x86	; 134
 79c:	23 0f       	add	r18, r19
 79e:	02 96       	adiw	r24, 0x02	; 2
 7a0:	a1 1d       	adc	r26, r1
 7a2:	b1 1d       	adc	r27, r1
 7a4:	20 93 b2 02 	sts	0x02B2, r18	; 0x8002b2 <timer0_fract>
 7a8:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <timer0_millis>
 7ac:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <timer0_millis+0x1>
 7b0:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <timer0_millis+0x2>
 7b4:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <timer0_millis+0x3>
 7b8:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <timer0_overflow_count>
 7bc:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <timer0_overflow_count+0x1>
 7c0:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <timer0_overflow_count+0x2>
 7c4:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <timer0_overflow_count+0x3>
 7c8:	01 96       	adiw	r24, 0x01	; 1
 7ca:	a1 1d       	adc	r26, r1
 7cc:	b1 1d       	adc	r27, r1
 7ce:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <timer0_overflow_count>
 7d2:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <timer0_overflow_count+0x1>
 7d6:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <timer0_overflow_count+0x2>
 7da:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <timer0_overflow_count+0x3>
 7de:	bf 91       	pop	r27
 7e0:	af 91       	pop	r26
 7e2:	9f 91       	pop	r25
 7e4:	8f 91       	pop	r24
 7e6:	3f 91       	pop	r19
 7e8:	2f 91       	pop	r18
 7ea:	0f 90       	pop	r0
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	0f 90       	pop	r0
 7f0:	1f 90       	pop	r1
 7f2:	18 95       	reti

000007f4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 7f4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 7f6:	84 b5       	in	r24, 0x24	; 36
 7f8:	82 60       	ori	r24, 0x02	; 2
 7fa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 7fc:	84 b5       	in	r24, 0x24	; 36
 7fe:	81 60       	ori	r24, 0x01	; 1
 800:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 802:	85 b5       	in	r24, 0x25	; 37
 804:	82 60       	ori	r24, 0x02	; 2
 806:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 808:	85 b5       	in	r24, 0x25	; 37
 80a:	81 60       	ori	r24, 0x01	; 1
 80c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 80e:	ee e6       	ldi	r30, 0x6E	; 110
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	81 60       	ori	r24, 0x01	; 1
 816:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 818:	e1 e8       	ldi	r30, 0x81	; 129
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 81e:	80 81       	ld	r24, Z
 820:	82 60       	ori	r24, 0x02	; 2
 822:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 824:	80 81       	ld	r24, Z
 826:	81 60       	ori	r24, 0x01	; 1
 828:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 82a:	e0 e8       	ldi	r30, 0x80	; 128
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	80 81       	ld	r24, Z
 830:	81 60       	ori	r24, 0x01	; 1
 832:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 834:	e1 eb       	ldi	r30, 0xB1	; 177
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	84 60       	ori	r24, 0x04	; 4
 83c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 83e:	e0 eb       	ldi	r30, 0xB0	; 176
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	81 60       	ori	r24, 0x01	; 1
 846:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 848:	e1 e9       	ldi	r30, 0x91	; 145
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	82 60       	ori	r24, 0x02	; 2
 850:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 852:	80 81       	ld	r24, Z
 854:	81 60       	ori	r24, 0x01	; 1
 856:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 858:	e0 e9       	ldi	r30, 0x90	; 144
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
 85e:	81 60       	ori	r24, 0x01	; 1
 860:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 862:	e1 ea       	ldi	r30, 0xA1	; 161
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	82 60       	ori	r24, 0x02	; 2
 86a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 86c:	80 81       	ld	r24, Z
 86e:	81 60       	ori	r24, 0x01	; 1
 870:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 872:	e0 ea       	ldi	r30, 0xA0	; 160
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	81 60       	ori	r24, 0x01	; 1
 87a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 87c:	e1 e2       	ldi	r30, 0x21	; 33
 87e:	f1 e0       	ldi	r31, 0x01	; 1
 880:	80 81       	ld	r24, Z
 882:	82 60       	ori	r24, 0x02	; 2
 884:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 886:	80 81       	ld	r24, Z
 888:	81 60       	ori	r24, 0x01	; 1
 88a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 88c:	e0 e2       	ldi	r30, 0x20	; 32
 88e:	f1 e0       	ldi	r31, 0x01	; 1
 890:	80 81       	ld	r24, Z
 892:	81 60       	ori	r24, 0x01	; 1
 894:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 896:	ea e7       	ldi	r30, 0x7A	; 122
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	84 60       	ori	r24, 0x04	; 4
 89e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 8a0:	80 81       	ld	r24, Z
 8a2:	82 60       	ori	r24, 0x02	; 2
 8a4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 8a6:	80 81       	ld	r24, Z
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 8ac:	80 81       	ld	r24, Z
 8ae:	80 68       	ori	r24, 0x80	; 128
 8b0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 8b2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 8b6:	08 95       	ret

000008b8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	fc 01       	movw	r30, r24
 8bc:	31 97       	sbiw	r30, 0x01	; 1
 8be:	e2 31       	cpi	r30, 0x12	; 18
 8c0:	f1 05       	cpc	r31, r1
 8c2:	08 f0       	brcs	.+2      	; 0x8c6 <turnOffPWM+0xe>
 8c4:	4d c0       	rjmp	.+154    	; 0x960 <turnOffPWM+0xa8>
 8c6:	88 27       	eor	r24, r24
 8c8:	ee 58       	subi	r30, 0x8E	; 142
 8ca:	ff 4f       	sbci	r31, 0xFF	; 255
 8cc:	8f 4f       	sbci	r24, 0xFF	; 255
 8ce:	d5 c0       	rjmp	.+426    	; 0xa7a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 8d0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 8d4:	8f 77       	andi	r24, 0x7F	; 127
 8d6:	03 c0       	rjmp	.+6      	; 0x8de <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 8d8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 8dc:	8f 7d       	andi	r24, 0xDF	; 223
 8de:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 8e2:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 8e4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 8e8:	87 7f       	andi	r24, 0xF7	; 247
 8ea:	f9 cf       	rjmp	.-14     	; 0x8de <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 8ec:	84 b5       	in	r24, 0x24	; 36
 8ee:	8f 77       	andi	r24, 0x7F	; 127
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 8f2:	84 b5       	in	r24, 0x24	; 36
 8f4:	8f 7d       	andi	r24, 0xDF	; 223
 8f6:	84 bd       	out	0x24, r24	; 36
 8f8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 8fa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 8fe:	8f 77       	andi	r24, 0x7F	; 127
 900:	03 c0       	rjmp	.+6      	; 0x908 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 902:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 906:	8f 7d       	andi	r24, 0xDF	; 223
 908:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 90c:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 90e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 912:	8f 77       	andi	r24, 0x7F	; 127
 914:	07 c0       	rjmp	.+14     	; 0x924 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 916:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 91a:	8f 7d       	andi	r24, 0xDF	; 223
 91c:	03 c0       	rjmp	.+6      	; 0x924 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 91e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 922:	87 7f       	andi	r24, 0xF7	; 247
 924:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 928:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 92a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 92e:	8f 77       	andi	r24, 0x7F	; 127
 930:	07 c0       	rjmp	.+14     	; 0x940 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 932:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 936:	8f 7d       	andi	r24, 0xDF	; 223
 938:	03 c0       	rjmp	.+6      	; 0x940 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 93a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 93e:	87 7f       	andi	r24, 0xF7	; 247
 940:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 944:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 946:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 94a:	8f 77       	andi	r24, 0x7F	; 127
 94c:	07 c0       	rjmp	.+14     	; 0x95c <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 94e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 952:	8f 7d       	andi	r24, 0xDF	; 223
 954:	03 c0       	rjmp	.+6      	; 0x95c <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 956:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 95a:	87 7f       	andi	r24, 0xF7	; 247
 95c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 960:	08 95       	ret

00000962 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 962:	cf 93       	push	r28
 964:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	fc 01       	movw	r30, r24
 96a:	e2 5b       	subi	r30, 0xB2	; 178
 96c:	fe 4f       	sbci	r31, 0xFE	; 254
 96e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 970:	fc 01       	movw	r30, r24
 972:	ec 56       	subi	r30, 0x6C	; 108
 974:	fe 4f       	sbci	r31, 0xFE	; 254
 976:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 978:	88 23       	and	r24, r24
 97a:	61 f1       	breq	.+88     	; 0x9d4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	88 0f       	add	r24, r24
 980:	99 1f       	adc	r25, r25
 982:	fc 01       	movw	r30, r24
 984:	ec 50       	subi	r30, 0x0C	; 12
 986:	fe 4f       	sbci	r31, 0xFE	; 254
 988:	c5 91       	lpm	r28, Z+
 98a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 98c:	fc 01       	movw	r30, r24
 98e:	e6 52       	subi	r30, 0x26	; 38
 990:	fe 4f       	sbci	r31, 0xFE	; 254
 992:	a5 91       	lpm	r26, Z+
 994:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 996:	61 11       	cpse	r22, r1
 998:	09 c0       	rjmp	.+18     	; 0x9ac <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 99a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 99c:	f8 94       	cli
		*reg &= ~bit;
 99e:	88 81       	ld	r24, Y
 9a0:	20 95       	com	r18
 9a2:	82 23       	and	r24, r18
 9a4:	88 83       	st	Y, r24
		*out &= ~bit;
 9a6:	ec 91       	ld	r30, X
 9a8:	2e 23       	and	r18, r30
 9aa:	0b c0       	rjmp	.+22     	; 0x9c2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 9ac:	62 30       	cpi	r22, 0x02	; 2
 9ae:	61 f4       	brne	.+24     	; 0x9c8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 9b0:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9b2:	f8 94       	cli
		*reg &= ~bit;
 9b4:	88 81       	ld	r24, Y
 9b6:	32 2f       	mov	r19, r18
 9b8:	30 95       	com	r19
 9ba:	83 23       	and	r24, r19
 9bc:	88 83       	st	Y, r24
		*out |= bit;
 9be:	ec 91       	ld	r30, X
 9c0:	2e 2b       	or	r18, r30
 9c2:	2c 93       	st	X, r18
		SREG = oldSREG;
 9c4:	9f bf       	out	0x3f, r25	; 63
 9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 9c8:	8f b7       	in	r24, 0x3f	; 63
                cli();
 9ca:	f8 94       	cli
		*reg |= bit;
 9cc:	e8 81       	ld	r30, Y
 9ce:	2e 2b       	or	r18, r30
 9d0:	28 83       	st	Y, r18
		SREG = oldSREG;
 9d2:	8f bf       	out	0x3f, r24	; 63
	}
}
 9d4:	df 91       	pop	r29
 9d6:	cf 91       	pop	r28
 9d8:	08 95       	ret

000009da <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 9da:	1f 93       	push	r17
 9dc:	cf 93       	push	r28
 9de:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 9e0:	28 2f       	mov	r18, r24
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	f9 01       	movw	r30, r18
 9e6:	e8 5f       	subi	r30, 0xF8	; 248
 9e8:	fe 4f       	sbci	r31, 0xFE	; 254
 9ea:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 9ec:	f9 01       	movw	r30, r18
 9ee:	e2 5b       	subi	r30, 0xB2	; 178
 9f0:	fe 4f       	sbci	r31, 0xFE	; 254
 9f2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 9f4:	f9 01       	movw	r30, r18
 9f6:	ec 56       	subi	r30, 0x6C	; 108
 9f8:	fe 4f       	sbci	r31, 0xFE	; 254
 9fa:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 9fc:	cc 23       	and	r28, r28
 9fe:	b9 f0       	breq	.+46     	; 0xa2e <digitalWrite+0x54>
 a00:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a02:	81 11       	cpse	r24, r1
 a04:	59 df       	rcall	.-334    	; 0x8b8 <turnOffPWM>

	out = portOutputRegister(port);
 a06:	ec 2f       	mov	r30, r28
 a08:	f0 e0       	ldi	r31, 0x00	; 0
 a0a:	ee 0f       	add	r30, r30
 a0c:	ff 1f       	adc	r31, r31
 a0e:	e6 52       	subi	r30, 0x26	; 38
 a10:	fe 4f       	sbci	r31, 0xFE	; 254
 a12:	a5 91       	lpm	r26, Z+
 a14:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 a16:	9f b7       	in	r25, 0x3f	; 63
	cli();
 a18:	f8 94       	cli

	if (val == LOW) {
 a1a:	11 11       	cpse	r17, r1
 a1c:	04 c0       	rjmp	.+8      	; 0xa26 <digitalWrite+0x4c>
		*out &= ~bit;
 a1e:	8c 91       	ld	r24, X
 a20:	d0 95       	com	r29
 a22:	d8 23       	and	r29, r24
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <digitalWrite+0x50>
	} else {
		*out |= bit;
 a26:	ec 91       	ld	r30, X
 a28:	de 2b       	or	r29, r30
 a2a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 a2c:	9f bf       	out	0x3f, r25	; 63
}
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	1f 91       	pop	r17
 a34:	08 95       	ret

00000a36 <__udivmodsi4>:
 a36:	a1 e2       	ldi	r26, 0x21	; 33
 a38:	1a 2e       	mov	r1, r26
 a3a:	aa 1b       	sub	r26, r26
 a3c:	bb 1b       	sub	r27, r27
 a3e:	fd 01       	movw	r30, r26
 a40:	0d c0       	rjmp	.+26     	; 0xa5c <__udivmodsi4_ep>

00000a42 <__udivmodsi4_loop>:
 a42:	aa 1f       	adc	r26, r26
 a44:	bb 1f       	adc	r27, r27
 a46:	ee 1f       	adc	r30, r30
 a48:	ff 1f       	adc	r31, r31
 a4a:	a2 17       	cp	r26, r18
 a4c:	b3 07       	cpc	r27, r19
 a4e:	e4 07       	cpc	r30, r20
 a50:	f5 07       	cpc	r31, r21
 a52:	20 f0       	brcs	.+8      	; 0xa5c <__udivmodsi4_ep>
 a54:	a2 1b       	sub	r26, r18
 a56:	b3 0b       	sbc	r27, r19
 a58:	e4 0b       	sbc	r30, r20
 a5a:	f5 0b       	sbc	r31, r21

00000a5c <__udivmodsi4_ep>:
 a5c:	66 1f       	adc	r22, r22
 a5e:	77 1f       	adc	r23, r23
 a60:	88 1f       	adc	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	1a 94       	dec	r1
 a66:	69 f7       	brne	.-38     	; 0xa42 <__udivmodsi4_loop>
 a68:	60 95       	com	r22
 a6a:	70 95       	com	r23
 a6c:	80 95       	com	r24
 a6e:	90 95       	com	r25
 a70:	9b 01       	movw	r18, r22
 a72:	ac 01       	movw	r20, r24
 a74:	bd 01       	movw	r22, r26
 a76:	cf 01       	movw	r24, r30
 a78:	08 95       	ret

00000a7a <__tablejump2__>:
 a7a:	ee 0f       	add	r30, r30
 a7c:	ff 1f       	adc	r31, r31
 a7e:	88 1f       	adc	r24, r24
 a80:	8b bf       	out	0x3b, r24	; 59
 a82:	07 90       	elpm	r0, Z+
 a84:	f6 91       	elpm	r31, Z
 a86:	e0 2d       	mov	r30, r0
 a88:	19 94       	eijmp

00000a8a <_exit>:
 a8a:	f8 94       	cli

00000a8c <__stop_program>:
 a8c:	ff cf       	rjmp	.-2      	; 0xa8c <__stop_program>
