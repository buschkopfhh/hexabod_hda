
Blink_Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800200  00000c40  00000cd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  008002a2  008002a2  00000d76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000da8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008149  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d99  00000000  00000000  000091c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000186f  00000000  00000000  0000af5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000078c  00000000  00000000  0000c7cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000226f  00000000  00000000  0000cf58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bc7  00000000  00000000  0000f1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00011d8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	07 c1       	rjmp	.+526    	; 0x210 <__ctors_end>
   2:	00 00       	nop
   4:	33 c1       	rjmp	.+614    	; 0x26c <__bad_interrupt>
   6:	00 00       	nop
   8:	31 c1       	rjmp	.+610    	; 0x26c <__bad_interrupt>
   a:	00 00       	nop
   c:	2f c1       	rjmp	.+606    	; 0x26c <__bad_interrupt>
   e:	00 00       	nop
  10:	2d c1       	rjmp	.+602    	; 0x26c <__bad_interrupt>
  12:	00 00       	nop
  14:	2b c1       	rjmp	.+598    	; 0x26c <__bad_interrupt>
  16:	00 00       	nop
  18:	29 c1       	rjmp	.+594    	; 0x26c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	27 c1       	rjmp	.+590    	; 0x26c <__bad_interrupt>
  1e:	00 00       	nop
  20:	25 c1       	rjmp	.+586    	; 0x26c <__bad_interrupt>
  22:	00 00       	nop
  24:	23 c1       	rjmp	.+582    	; 0x26c <__bad_interrupt>
  26:	00 00       	nop
  28:	21 c1       	rjmp	.+578    	; 0x26c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1f c1       	rjmp	.+574    	; 0x26c <__bad_interrupt>
  2e:	00 00       	nop
  30:	1d c1       	rjmp	.+570    	; 0x26c <__bad_interrupt>
  32:	00 00       	nop
  34:	1b c1       	rjmp	.+566    	; 0x26c <__bad_interrupt>
  36:	00 00       	nop
  38:	19 c1       	rjmp	.+562    	; 0x26c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	17 c1       	rjmp	.+558    	; 0x26c <__bad_interrupt>
  3e:	00 00       	nop
  40:	15 c1       	rjmp	.+554    	; 0x26c <__bad_interrupt>
  42:	00 00       	nop
  44:	13 c1       	rjmp	.+550    	; 0x26c <__bad_interrupt>
  46:	00 00       	nop
  48:	11 c1       	rjmp	.+546    	; 0x26c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0f c1       	rjmp	.+542    	; 0x26c <__bad_interrupt>
  4e:	00 00       	nop
  50:	0d c1       	rjmp	.+538    	; 0x26c <__bad_interrupt>
  52:	00 00       	nop
  54:	0b c1       	rjmp	.+534    	; 0x26c <__bad_interrupt>
  56:	00 00       	nop
  58:	09 c1       	rjmp	.+530    	; 0x26c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c4       	rjmp	.+2228   	; 0x912 <__vector_23>
  5e:	00 00       	nop
  60:	05 c1       	rjmp	.+522    	; 0x26c <__bad_interrupt>
  62:	00 00       	nop
  64:	ab c2       	rjmp	.+1366   	; 0x5bc <__vector_25>
  66:	00 00       	nop
  68:	df c2       	rjmp	.+1470   	; 0x628 <__vector_26>
  6a:	00 00       	nop
  6c:	ff c0       	rjmp	.+510    	; 0x26c <__bad_interrupt>
  6e:	00 00       	nop
  70:	fd c0       	rjmp	.+506    	; 0x26c <__bad_interrupt>
  72:	00 00       	nop
  74:	fb c0       	rjmp	.+502    	; 0x26c <__bad_interrupt>
  76:	00 00       	nop
  78:	f9 c0       	rjmp	.+498    	; 0x26c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	f7 c0       	rjmp	.+494    	; 0x26c <__bad_interrupt>
  7e:	00 00       	nop
  80:	f5 c0       	rjmp	.+490    	; 0x26c <__bad_interrupt>
  82:	00 00       	nop
  84:	f3 c0       	rjmp	.+486    	; 0x26c <__bad_interrupt>
  86:	00 00       	nop
  88:	f1 c0       	rjmp	.+482    	; 0x26c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ef c0       	rjmp	.+478    	; 0x26c <__bad_interrupt>
  8e:	00 00       	nop
  90:	ed c0       	rjmp	.+474    	; 0x26c <__bad_interrupt>
  92:	00 00       	nop
  94:	eb c0       	rjmp	.+470    	; 0x26c <__bad_interrupt>
  96:	00 00       	nop
  98:	e9 c0       	rjmp	.+466    	; 0x26c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	e7 c0       	rjmp	.+462    	; 0x26c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	e5 c0       	rjmp	.+458    	; 0x26c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	e3 c0       	rjmp	.+454    	; 0x26c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e1 c0       	rjmp	.+450    	; 0x26c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	df c0       	rjmp	.+446    	; 0x26c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	dd c0       	rjmp	.+442    	; 0x26c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	db c0       	rjmp	.+438    	; 0x26c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	d9 c0       	rjmp	.+434    	; 0x26c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	d7 c0       	rjmp	.+430    	; 0x26c <__bad_interrupt>
  be:	00 00       	nop
  c0:	d5 c0       	rjmp	.+426    	; 0x26c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	d3 c0       	rjmp	.+422    	; 0x26c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	d1 c0       	rjmp	.+418    	; 0x26c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	cf c0       	rjmp	.+414    	; 0x26c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	cd c0       	rjmp	.+410    	; 0x26c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	cb c0       	rjmp	.+406    	; 0x26c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	c9 c0       	rjmp	.+402    	; 0x26c <__bad_interrupt>
  da:	00 00       	nop
  dc:	c7 c0       	rjmp	.+398    	; 0x26c <__bad_interrupt>
  de:	00 00       	nop
  e0:	c5 c0       	rjmp	.+394    	; 0x26c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	4f 05       	cpc	r20, r15
  e6:	52 05       	cpc	r21, r2
  e8:	41 05       	cpc	r20, r1
  ea:	45 05       	cpc	r20, r5
  ec:	4b 05       	cpc	r20, r11
  ee:	89 05       	cpc	r24, r9
  f0:	56 05       	cpc	r21, r6
  f2:	5a 05       	cpc	r21, r10
  f4:	60 05       	cpc	r22, r0
  f6:	64 05       	cpc	r22, r4
  f8:	68 05       	cpc	r22, r8
  fa:	6e 05       	cpc	r22, r14
  fc:	72 05       	cpc	r23, r2
  fe:	76 05       	cpc	r23, r6
 100:	89 05       	cpc	r24, r9
 102:	7c 05       	cpc	r23, r12
 104:	80 05       	cpc	r24, r0
 106:	84 05       	cpc	r24, r4

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
 1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
 1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
 20e:	46 03       	mulsu	r20, r22

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d1 e2       	ldi	r29, 0x21	; 33
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	0c bf       	out	0x3c, r16	; 60

00000220 <__do_copy_data>:
 220:	12 e0       	ldi	r17, 0x02	; 2
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b2 e0       	ldi	r27, 0x02	; 2
 226:	e0 e4       	ldi	r30, 0x40	; 64
 228:	fc e0       	ldi	r31, 0x0C	; 12
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	0b bf       	out	0x3b, r16	; 59
 22e:	02 c0       	rjmp	.+4      	; 0x234 <__do_copy_data+0x14>
 230:	07 90       	elpm	r0, Z+
 232:	0d 92       	st	X+, r0
 234:	a2 3a       	cpi	r26, 0xA2	; 162
 236:	b1 07       	cpc	r27, r17
 238:	d9 f7       	brne	.-10     	; 0x230 <__do_copy_data+0x10>

0000023a <__do_clear_bss>:
 23a:	23 e0       	ldi	r18, 0x03	; 3
 23c:	a2 ea       	ldi	r26, 0xA2	; 162
 23e:	b2 e0       	ldi	r27, 0x02	; 2
 240:	01 c0       	rjmp	.+2      	; 0x244 <.do_clear_bss_start>

00000242 <.do_clear_bss_loop>:
 242:	1d 92       	st	X+, r1

00000244 <.do_clear_bss_start>:
 244:	a8 34       	cpi	r26, 0x48	; 72
 246:	b2 07       	cpc	r27, r18
 248:	e1 f7       	brne	.-8      	; 0x242 <.do_clear_bss_loop>

0000024a <__do_global_ctors>:
 24a:	11 e0       	ldi	r17, 0x01	; 1
 24c:	c8 e0       	ldi	r28, 0x08	; 8
 24e:	d1 e0       	ldi	r29, 0x01	; 1
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	05 c0       	rjmp	.+10     	; 0x25e <__do_global_ctors+0x14>
 254:	21 97       	sbiw	r28, 0x01	; 1
 256:	01 09       	sbc	r16, r1
 258:	80 2f       	mov	r24, r16
 25a:	fe 01       	movw	r30, r28
 25c:	e7 d4       	rcall	.+2510   	; 0xc2c <__tablejump2__>
 25e:	c7 30       	cpi	r28, 0x07	; 7
 260:	d1 07       	cpc	r29, r17
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 07       	cpc	r16, r24
 266:	b1 f7       	brne	.-20     	; 0x254 <__do_global_ctors+0xa>
 268:	3f d2       	rcall	.+1150   	; 0x6e8 <main>
 26a:	e8 c4       	rjmp	.+2512   	; 0xc3c <_exit>

0000026c <__bad_interrupt>:
 26c:	c9 ce       	rjmp	.-622    	; 0x0 <__vectors>

0000026e <setup>:
}


void setup() {
	// initialize digital pin LED_BUILTIN as an output.
	pinMode(LED_BUILTIN, OUTPUT);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	8d e0       	ldi	r24, 0x0D	; 13
 272:	50 d4       	rcall	.+2208   	; 0xb14 <pinMode>
	pinMode(12, OUTPUT); //also pin 12 as LED output
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	8c e0       	ldi	r24, 0x0C	; 12
 278:	4d d4       	rcall	.+2202   	; 0xb14 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 27a:	26 e0       	ldi	r18, 0x06	; 6
 27c:	40 e8       	ldi	r20, 0x80	; 128
 27e:	55 e2       	ldi	r21, 0x25	; 37
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	82 ea       	ldi	r24, 0xA2	; 162
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	36 d1       	rcall	.+620    	; 0x4f6 <_ZN14HardwareSerial5beginEmh>

	Serial.begin(9600);         //Sets the data rate in bits per second (baud) for serial data transmission
	Serial.println("This is the arduino for Hexapod!!!");
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	72 e0       	ldi	r23, 0x02	; 2
 28e:	82 ea       	ldi	r24, 0xA2	; 162
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	7d d2       	rcall	.+1274   	; 0x78e <_ZN5Print7printlnEPKc>
	Serial.println(" ");
 294:	63 e2       	ldi	r22, 0x23	; 35
 296:	72 e0       	ldi	r23, 0x02	; 2
 298:	82 ea       	ldi	r24, 0xA2	; 162
 29a:	92 e0       	ldi	r25, 0x02	; 2
 29c:	78 d2       	rcall	.+1264   	; 0x78e <_ZN5Print7printlnEPKc>
	Serial.println("To connect, start the LED Controller App on your Smartphone");
 29e:	65 e2       	ldi	r22, 0x25	; 37
 2a0:	72 e0       	ldi	r23, 0x02	; 2
 2a2:	82 ea       	ldi	r24, 0xA2	; 162
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	73 d2       	rcall	.+1254   	; 0x78e <_ZN5Print7printlnEPKc>
	Serial.println("and connect to Bluetooth HC-05");
 2a8:	61 e6       	ldi	r22, 0x61	; 97
 2aa:	72 e0       	ldi	r23, 0x02	; 2
 2ac:	82 ea       	ldi	r24, 0xA2	; 162
 2ae:	92 e0       	ldi	r25, 0x02	; 2
 2b0:	6e d2       	rcall	.+1244   	; 0x78e <_ZN5Print7printlnEPKc>

	//int count = 0;
//	BluetoothInterface to;
//	to:BluetoothInterface();	
	digitalWrite(LED_BUILTIN, HIGH); 
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	8d e0       	ldi	r24, 0x0D	; 13
 2b6:	6a c4       	rjmp	.+2260   	; 0xb8c <digitalWrite>

000002b8 <loop>:
 2b8:	cf 93       	push	r28
  
}


// the loop function runs over and over again forever
void loop() {
 2ba:	df 93       	push	r29
	//data = Serial.read();  // Reads the data from the serial port
	char lotto;
	int count = 0;
	int k;
	
	if(Serial.available() > 0){
 2bc:	82 ea       	ldi	r24, 0xA2	; 162
 2be:	92 e0       	ldi	r25, 0x02	; 2
 2c0:	19 d0       	rcall	.+50     	; 0x2f4 <_ZN14HardwareSerial9availableEv>
 2c2:	18 16       	cp	r1, r24
 2c4:	19 06       	cpc	r1, r25
 2c6:	9c f4       	brge	.+38     	; 0x2ee <loop+0x36>
	lotto = Serial.read();
 2c8:	82 ea       	ldi	r24, 0xA2	; 162
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	2d d0       	rcall	.+90     	; 0x328 <_ZN14HardwareSerial4readEv>
 2ce:	ec 01       	movw	r28, r24
	Serial.println(lotto);
 2d0:	68 2f       	mov	r22, r24
 2d2:	82 ea       	ldi	r24, 0xA2	; 162
 2d4:	92 e0       	ldi	r25, 0x02	; 2
 2d6:	6b d2       	rcall	.+1238   	; 0x7ae <_ZN5Print7printlnEc>
	int itt = (int) lotto - '0';
	Serial.println(itt);
 2d8:	be 01       	movw	r22, r28
 2da:	77 27       	eor	r23, r23
 2dc:	60 53       	subi	r22, 0x30	; 48
 2de:	71 09       	sbc	r23, r1
 2e0:	4a e0       	ldi	r20, 0x0A	; 10
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	82 ea       	ldi	r24, 0xA2	; 162
// 	}
	



}
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	df 91       	pop	r29
	
	if(Serial.available() > 0){
	lotto = Serial.read();
	Serial.println(lotto);
	int itt = (int) lotto - '0';
	Serial.println(itt);
 2ea:	cf 91       	pop	r28
 2ec:	02 c3       	rjmp	.+1540   	; 0x8f2 <_ZN5Print7printlnEii>
// 	}
	



}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2f4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2f6:	91 8d       	ldd	r25, Z+25	; 0x19
 2f8:	22 8d       	ldd	r18, Z+26	; 0x1a
 2fa:	89 2f       	mov	r24, r25
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	80 5c       	subi	r24, 0xC0	; 192
 300:	9f 4f       	sbci	r25, 0xFF	; 255
 302:	82 1b       	sub	r24, r18
 304:	91 09       	sbc	r25, r1
}
 306:	8f 73       	andi	r24, 0x3F	; 63
 308:	99 27       	eor	r25, r25
 30a:	08 95       	ret

0000030c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 30c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 30e:	91 8d       	ldd	r25, Z+25	; 0x19
 310:	82 8d       	ldd	r24, Z+26	; 0x1a
 312:	98 17       	cp	r25, r24
 314:	31 f0       	breq	.+12     	; 0x322 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 316:	82 8d       	ldd	r24, Z+26	; 0x1a
 318:	e8 0f       	add	r30, r24
 31a:	f1 1d       	adc	r31, r1
 31c:	85 8d       	ldd	r24, Z+29	; 0x1d
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 326:	08 95       	ret

00000328 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 328:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 32a:	91 8d       	ldd	r25, Z+25	; 0x19
 32c:	82 8d       	ldd	r24, Z+26	; 0x1a
 32e:	98 17       	cp	r25, r24
 330:	61 f0       	breq	.+24     	; 0x34a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 332:	82 8d       	ldd	r24, Z+26	; 0x1a
 334:	df 01       	movw	r26, r30
 336:	a8 0f       	add	r26, r24
 338:	b1 1d       	adc	r27, r1
 33a:	5d 96       	adiw	r26, 0x1d	; 29
 33c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 33e:	92 8d       	ldd	r25, Z+26	; 0x1a
 340:	9f 5f       	subi	r25, 0xFF	; 255
 342:	9f 73       	andi	r25, 0x3F	; 63
 344:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 34e:	08 95       	ret

00000350 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 350:	fc 01       	movw	r30, r24
 352:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 354:	44 8d       	ldd	r20, Z+28	; 0x1c
 356:	25 2f       	mov	r18, r21
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	84 2f       	mov	r24, r20
 35c:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 35e:	82 1b       	sub	r24, r18
 360:	93 0b       	sbc	r25, r19
 362:	54 17       	cp	r21, r20
 364:	10 f0       	brcs	.+4      	; 0x36a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 366:	cf 96       	adiw	r24, 0x3f	; 63
 368:	08 95       	ret
  return tail - head - 1;
 36a:	01 97       	sbiw	r24, 0x01	; 1
}
 36c:	08 95       	ret

0000036e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 36e:	8d e3       	ldi	r24, 0x3D	; 61
 370:	93 e0       	ldi	r25, 0x03	; 3
 372:	89 2b       	or	r24, r25
 374:	39 f0       	breq	.+14     	; 0x384 <_Z14serialEventRunv+0x16>
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	89 2b       	or	r24, r25
 37c:	19 f0       	breq	.+6      	; 0x384 <_Z14serialEventRunv+0x16>
 37e:	7d d1       	rcall	.+762    	; 0x67a <_Z17Serial0_availablev>
 380:	81 11       	cpse	r24, r1
 382:	25 c0       	rjmp	.+74     	; 0x3ce <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	89 2b       	or	r24, r25
 38a:	41 f0       	breq	.+16     	; 0x39c <_Z14serialEventRunv+0x2e>
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	89 2b       	or	r24, r25
 392:	21 f0       	breq	.+8      	; 0x39c <_Z14serialEventRunv+0x2e>
 394:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 398:	81 11       	cpse	r24, r1
 39a:	1c c0       	rjmp	.+56     	; 0x3d4 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	89 2b       	or	r24, r25
 3a2:	41 f0       	breq	.+16     	; 0x3b4 <_Z14serialEventRunv+0x46>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	89 2b       	or	r24, r25
 3aa:	21 f0       	breq	.+8      	; 0x3b4 <_Z14serialEventRunv+0x46>
 3ac:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3b0:	81 11       	cpse	r24, r1
 3b2:	13 c0       	rjmp	.+38     	; 0x3da <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	89 2b       	or	r24, r25
 3ba:	a1 f0       	breq	.+40     	; 0x3e4 <_Z14serialEventRunv+0x76>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	89 2b       	or	r24, r25
 3c2:	81 f0       	breq	.+32     	; 0x3e4 <_Z14serialEventRunv+0x76>
 3c4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3c8:	81 11       	cpse	r24, r1
 3ca:	0a c0       	rjmp	.+20     	; 0x3e0 <_Z14serialEventRunv+0x72>
 3cc:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 3ce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3d2:	d8 cf       	rjmp	.-80     	; 0x384 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 3d4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3d8:	e1 cf       	rjmp	.-62     	; 0x39c <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 3da:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3de:	ea cf       	rjmp	.-44     	; 0x3b4 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 3e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 3e4:	08 95       	ret

000003e6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 3e6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 3e8:	84 8d       	ldd	r24, Z+28	; 0x1c
 3ea:	df 01       	movw	r26, r30
 3ec:	a8 0f       	add	r26, r24
 3ee:	b1 1d       	adc	r27, r1
 3f0:	a3 5a       	subi	r26, 0xA3	; 163
 3f2:	bf 4f       	sbci	r27, 0xFF	; 255
 3f4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 3f6:	84 8d       	ldd	r24, Z+28	; 0x1c
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	8f 73       	andi	r24, 0x3F	; 63
 3fe:	99 27       	eor	r25, r25
 400:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 402:	a6 89       	ldd	r26, Z+22	; 0x16
 404:	b7 89       	ldd	r27, Z+23	; 0x17
 406:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 408:	a0 89       	ldd	r26, Z+16	; 0x10
 40a:	b1 89       	ldd	r27, Z+17	; 0x11
 40c:	8c 91       	ld	r24, X
 40e:	80 64       	ori	r24, 0x40	; 64
 410:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 412:	93 8d       	ldd	r25, Z+27	; 0x1b
 414:	84 8d       	ldd	r24, Z+28	; 0x1c
 416:	98 13       	cpse	r25, r24
 418:	06 c0       	rjmp	.+12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 41a:	02 88       	ldd	r0, Z+18	; 0x12
 41c:	f3 89       	ldd	r31, Z+19	; 0x13
 41e:	e0 2d       	mov	r30, r0
 420:	80 81       	ld	r24, Z
 422:	8f 7d       	andi	r24, 0xDF	; 223
 424:	80 83       	st	Z, r24
 426:	08 95       	ret

00000428 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 428:	ef 92       	push	r14
 42a:	ff 92       	push	r15
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	ec 01       	movw	r28, r24
  _written = true;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 43a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 43c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 43e:	98 13       	cpse	r25, r24
 440:	05 c0       	rjmp	.+10     	; 0x44c <_ZN14HardwareSerial5writeEh+0x24>
 442:	e8 89       	ldd	r30, Y+16	; 0x10
 444:	f9 89       	ldd	r31, Y+17	; 0x11
 446:	80 81       	ld	r24, Z
 448:	85 fd       	sbrc	r24, 5
 44a:	23 c0       	rjmp	.+70     	; 0x492 <_ZN14HardwareSerial5writeEh+0x6a>
 44c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 44e:	0b 8d       	ldd	r16, Y+27	; 0x1b
 450:	10 e0       	ldi	r17, 0x00	; 0
 452:	0f 5f       	subi	r16, 0xFF	; 255
 454:	1f 4f       	sbci	r17, 0xFF	; 255
 456:	0f 73       	andi	r16, 0x3F	; 63
 458:	11 27       	eor	r17, r17
 45a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 45c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 45e:	e8 12       	cpse	r14, r24
 460:	0b c0       	rjmp	.+22     	; 0x478 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	07 fc       	sbrc	r0, 7
 466:	fa cf       	rjmp	.-12     	; 0x45c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 468:	e8 89       	ldd	r30, Y+16	; 0x10
 46a:	f9 89       	ldd	r31, Y+17	; 0x11
 46c:	80 81       	ld	r24, Z
 46e:	85 ff       	sbrs	r24, 5
 470:	f5 cf       	rjmp	.-22     	; 0x45c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 472:	ce 01       	movw	r24, r28
 474:	b8 df       	rcall	.-144    	; 0x3e6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 476:	f2 cf       	rjmp	.-28     	; 0x45c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 478:	8b 8d       	ldd	r24, Y+27	; 0x1b
 47a:	fe 01       	movw	r30, r28
 47c:	e8 0f       	add	r30, r24
 47e:	f1 1d       	adc	r31, r1
 480:	e3 5a       	subi	r30, 0xA3	; 163
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 486:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 488:	ea 89       	ldd	r30, Y+18	; 0x12
 48a:	fb 89       	ldd	r31, Y+19	; 0x13
 48c:	80 81       	ld	r24, Z
 48e:	80 62       	ori	r24, 0x20	; 32
 490:	07 c0       	rjmp	.+14     	; 0x4a0 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 492:	ee 89       	ldd	r30, Y+22	; 0x16
 494:	ff 89       	ldd	r31, Y+23	; 0x17
 496:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 498:	e8 89       	ldd	r30, Y+16	; 0x10
 49a:	f9 89       	ldd	r31, Y+17	; 0x11
 49c:	80 81       	ld	r24, Z
 49e:	80 64       	ori	r24, 0x40	; 64
 4a0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	08 95       	ret

000004b4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 4ba:	88 8d       	ldd	r24, Y+24	; 0x18
 4bc:	88 23       	and	r24, r24
 4be:	c1 f0       	breq	.+48     	; 0x4f0 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4c0:	ea 89       	ldd	r30, Y+18	; 0x12
 4c2:	fb 89       	ldd	r31, Y+19	; 0x13
 4c4:	80 81       	ld	r24, Z
 4c6:	85 fd       	sbrc	r24, 5
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <_ZN14HardwareSerial5flushEv+0x20>
 4ca:	a8 89       	ldd	r26, Y+16	; 0x10
 4cc:	b9 89       	ldd	r27, Y+17	; 0x11
 4ce:	8c 91       	ld	r24, X
 4d0:	86 fd       	sbrc	r24, 6
 4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	07 fc       	sbrc	r0, 7
 4d8:	f5 cf       	rjmp	.-22     	; 0x4c4 <_ZN14HardwareSerial5flushEv+0x10>
 4da:	80 81       	ld	r24, Z
 4dc:	85 ff       	sbrs	r24, 5
 4de:	f2 cf       	rjmp	.-28     	; 0x4c4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4e0:	a8 89       	ldd	r26, Y+16	; 0x10
 4e2:	b9 89       	ldd	r27, Y+17	; 0x11
 4e4:	8c 91       	ld	r24, X
 4e6:	85 ff       	sbrs	r24, 5
 4e8:	ed cf       	rjmp	.-38     	; 0x4c4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4ea:	ce 01       	movw	r24, r28
 4ec:	7c df       	rcall	.-264    	; 0x3e6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4ee:	e8 cf       	rjmp	.-48     	; 0x4c0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 4f6:	cf 92       	push	r12
 4f8:	df 92       	push	r13
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	ec 01       	movw	r28, r24
 506:	6a 01       	movw	r12, r20
 508:	7b 01       	movw	r14, r22
 50a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 50c:	e8 89       	ldd	r30, Y+16	; 0x10
 50e:	f9 89       	ldd	r31, Y+17	; 0x11
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 514:	41 15       	cp	r20, r1
 516:	51 4e       	sbci	r21, 0xE1	; 225
 518:	61 05       	cpc	r22, r1
 51a:	71 05       	cpc	r23, r1
 51c:	a9 f0       	breq	.+42     	; 0x548 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	79 e0       	ldi	r23, 0x09	; 9
 522:	8d e3       	ldi	r24, 0x3D	; 61
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	a7 01       	movw	r20, r14
 528:	96 01       	movw	r18, r12
 52a:	5e d3       	rcall	.+1724   	; 0xbe8 <__udivmodsi4>
 52c:	da 01       	movw	r26, r20
 52e:	c9 01       	movw	r24, r18
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	a1 09       	sbc	r26, r1
 534:	b1 09       	sbc	r27, r1
 536:	b6 95       	lsr	r27
 538:	a7 95       	ror	r26
 53a:	97 95       	ror	r25
 53c:	87 95       	ror	r24
 53e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 540:	21 15       	cp	r18, r1
 542:	80 e1       	ldi	r24, 0x10	; 16
 544:	38 07       	cpc	r19, r24
 546:	a0 f0       	brcs	.+40     	; 0x570 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 548:	e8 89       	ldd	r30, Y+16	; 0x10
 54a:	f9 89       	ldd	r31, Y+17	; 0x11
 54c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 54e:	60 e8       	ldi	r22, 0x80	; 128
 550:	74 e8       	ldi	r23, 0x84	; 132
 552:	8e e1       	ldi	r24, 0x1E	; 30
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	a7 01       	movw	r20, r14
 558:	96 01       	movw	r18, r12
 55a:	46 d3       	rcall	.+1676   	; 0xbe8 <__udivmodsi4>
 55c:	da 01       	movw	r26, r20
 55e:	c9 01       	movw	r24, r18
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	a1 09       	sbc	r26, r1
 564:	b1 09       	sbc	r27, r1
 566:	b6 95       	lsr	r27
 568:	a7 95       	ror	r26
 56a:	97 95       	ror	r25
 56c:	87 95       	ror	r24
 56e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 570:	ec 85       	ldd	r30, Y+12	; 0x0c
 572:	fd 85       	ldd	r31, Y+13	; 0x0d
 574:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 576:	ee 85       	ldd	r30, Y+14	; 0x0e
 578:	ff 85       	ldd	r31, Y+15	; 0x0f
 57a:	20 83       	st	Z, r18

  _written = false;
 57c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 57e:	ec 89       	ldd	r30, Y+20	; 0x14
 580:	fd 89       	ldd	r31, Y+21	; 0x15
 582:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 584:	ea 89       	ldd	r30, Y+18	; 0x12
 586:	fb 89       	ldd	r31, Y+19	; 0x13
 588:	80 81       	ld	r24, Z
 58a:	80 61       	ori	r24, 0x10	; 16
 58c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 58e:	ea 89       	ldd	r30, Y+18	; 0x12
 590:	fb 89       	ldd	r31, Y+19	; 0x13
 592:	80 81       	ld	r24, Z
 594:	88 60       	ori	r24, 0x08	; 8
 596:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 598:	ea 89       	ldd	r30, Y+18	; 0x12
 59a:	fb 89       	ldd	r31, Y+19	; 0x13
 59c:	80 81       	ld	r24, Z
 59e:	80 68       	ori	r24, 0x80	; 128
 5a0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 5a2:	ea 89       	ldd	r30, Y+18	; 0x12
 5a4:	fb 89       	ldd	r31, Y+19	; 0x13
 5a6:	80 81       	ld	r24, Z
 5a8:	8f 7d       	andi	r24, 0xDF	; 223
 5aa:	80 83       	st	Z, r24
}
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	1f 91       	pop	r17
 5b2:	ff 90       	pop	r15
 5b4:	ef 90       	pop	r14
 5b6:	df 90       	pop	r13
 5b8:	cf 90       	pop	r12
 5ba:	08 95       	ret

000005bc <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 5bc:	1f 92       	push	r1
 5be:	0f 92       	push	r0
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	0f 92       	push	r0
 5c4:	11 24       	eor	r1, r1
 5c6:	0b b6       	in	r0, 0x3b	; 59
 5c8:	0f 92       	push	r0
 5ca:	2f 93       	push	r18
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 5d4:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <__data_end+0x10>
 5d8:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <__data_end+0x11>
 5dc:	80 81       	ld	r24, Z
 5de:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <__data_end+0x16>
 5e2:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <__data_end+0x17>
 5e6:	82 fd       	sbrc	r24, 2
 5e8:	12 c0       	rjmp	.+36     	; 0x60e <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5ea:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5ec:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <__data_end+0x19>
 5f0:	8f 5f       	subi	r24, 0xFF	; 255
 5f2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5f4:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__data_end+0x1a>
 5f8:	82 17       	cp	r24, r18
 5fa:	51 f0       	breq	.+20     	; 0x610 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 5fc:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <__data_end+0x19>
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	ee 55       	subi	r30, 0x5E	; 94
 604:	fd 4f       	sbci	r31, 0xFD	; 253
 606:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 608:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <__data_end+0x19>
 60c:	01 c0       	rjmp	.+2      	; 0x610 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 60e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 610:	ff 91       	pop	r31
 612:	ef 91       	pop	r30
 614:	9f 91       	pop	r25
 616:	8f 91       	pop	r24
 618:	2f 91       	pop	r18
 61a:	0f 90       	pop	r0
 61c:	0b be       	out	0x3b, r0	; 59
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	0b b6       	in	r0, 0x3b	; 59
 634:	0f 92       	push	r0
 636:	2f 93       	push	r18
 638:	3f 93       	push	r19
 63a:	4f 93       	push	r20
 63c:	5f 93       	push	r21
 63e:	6f 93       	push	r22
 640:	7f 93       	push	r23
 642:	8f 93       	push	r24
 644:	9f 93       	push	r25
 646:	af 93       	push	r26
 648:	bf 93       	push	r27
 64a:	ef 93       	push	r30
 64c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 64e:	82 ea       	ldi	r24, 0xA2	; 162
 650:	92 e0       	ldi	r25, 0x02	; 2
 652:	c9 de       	rcall	.-622    	; 0x3e6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 654:	ff 91       	pop	r31
 656:	ef 91       	pop	r30
 658:	bf 91       	pop	r27
 65a:	af 91       	pop	r26
 65c:	9f 91       	pop	r25
 65e:	8f 91       	pop	r24
 660:	7f 91       	pop	r23
 662:	6f 91       	pop	r22
 664:	5f 91       	pop	r21
 666:	4f 91       	pop	r20
 668:	3f 91       	pop	r19
 66a:	2f 91       	pop	r18
 66c:	0f 90       	pop	r0
 66e:	0b be       	out	0x3b, r0	; 59
 670:	0f 90       	pop	r0
 672:	0f be       	out	0x3f, r0	; 63
 674:	0f 90       	pop	r0
 676:	1f 90       	pop	r1
 678:	18 95       	reti

0000067a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 67a:	82 ea       	ldi	r24, 0xA2	; 162
 67c:	92 e0       	ldi	r25, 0x02	; 2
 67e:	3a de       	rcall	.-908    	; 0x2f4 <_ZN14HardwareSerial9availableEv>
 680:	21 e0       	ldi	r18, 0x01	; 1
 682:	89 2b       	or	r24, r25
 684:	09 f4       	brne	.+2      	; 0x688 <_Z17Serial0_availablev+0xe>
 686:	20 e0       	ldi	r18, 0x00	; 0
}
 688:	82 2f       	mov	r24, r18
 68a:	08 95       	ret

0000068c <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 68c:	e2 ea       	ldi	r30, 0xA2	; 162
 68e:	f2 e0       	ldi	r31, 0x02	; 2
 690:	13 82       	std	Z+3, r1	; 0x03
 692:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 694:	88 ee       	ldi	r24, 0xE8	; 232
 696:	93 e0       	ldi	r25, 0x03	; 3
 698:	a0 e0       	ldi	r26, 0x00	; 0
 69a:	b0 e0       	ldi	r27, 0x00	; 0
 69c:	84 83       	std	Z+4, r24	; 0x04
 69e:	95 83       	std	Z+5, r25	; 0x05
 6a0:	a6 83       	std	Z+6, r26	; 0x06
 6a2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 6a4:	84 e8       	ldi	r24, 0x84	; 132
 6a6:	92 e0       	ldi	r25, 0x02	; 2
 6a8:	91 83       	std	Z+1, r25	; 0x01
 6aa:	80 83       	st	Z, r24
 6ac:	85 ec       	ldi	r24, 0xC5	; 197
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	95 87       	std	Z+13, r25	; 0x0d
 6b2:	84 87       	std	Z+12, r24	; 0x0c
 6b4:	84 ec       	ldi	r24, 0xC4	; 196
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	97 87       	std	Z+15, r25	; 0x0f
 6ba:	86 87       	std	Z+14, r24	; 0x0e
 6bc:	80 ec       	ldi	r24, 0xC0	; 192
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	91 8b       	std	Z+17, r25	; 0x11
 6c2:	80 8b       	std	Z+16, r24	; 0x10
 6c4:	81 ec       	ldi	r24, 0xC1	; 193
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	93 8b       	std	Z+19, r25	; 0x13
 6ca:	82 8b       	std	Z+18, r24	; 0x12
 6cc:	82 ec       	ldi	r24, 0xC2	; 194
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	95 8b       	std	Z+21, r25	; 0x15
 6d2:	84 8b       	std	Z+20, r24	; 0x14
 6d4:	86 ec       	ldi	r24, 0xC6	; 198
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	97 8b       	std	Z+23, r25	; 0x17
 6da:	86 8b       	std	Z+22, r24	; 0x16
 6dc:	11 8e       	std	Z+25, r1	; 0x19
 6de:	12 8e       	std	Z+26, r1	; 0x1a
 6e0:	13 8e       	std	Z+27, r1	; 0x1b
 6e2:	14 8e       	std	Z+28, r1	; 0x1c
 6e4:	08 95       	ret

000006e6 <initVariant>:
 6e6:	08 95       	ret

000006e8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6e8:	5e d1       	rcall	.+700    	; 0x9a6 <init>

	initVariant();
 6ea:	fd df       	rcall	.-6      	; 0x6e6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6ec:	c0 dd       	rcall	.-1152   	; 0x26e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6ee:	c7 eb       	ldi	r28, 0xB7	; 183
 6f0:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 6f2:	e2 dd       	rcall	.-1084   	; 0x2b8 <loop>
		if (serialEventRun) serialEventRun();
 6f4:	20 97       	sbiw	r28, 0x00	; 0
 6f6:	e9 f3       	breq	.-6      	; 0x6f2 <main+0xa>
 6f8:	3a de       	rcall	.-908    	; 0x36e <_Z14serialEventRunv>
 6fa:	fb cf       	rjmp	.-10     	; 0x6f2 <main+0xa>

000006fc <_ZN5Print5writeEPKhj>:
 6fc:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 6fe:	df 92       	push	r13
 700:	ef 92       	push	r14
 702:	ff 92       	push	r15
 704:	0f 93       	push	r16
 706:	1f 93       	push	r17
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	6c 01       	movw	r12, r24
 70e:	7a 01       	movw	r14, r20
 710:	8b 01       	movw	r16, r22
 712:	c0 e0       	ldi	r28, 0x00	; 0
 714:	d0 e0       	ldi	r29, 0x00	; 0
 716:	ce 15       	cp	r28, r14
 718:	df 05       	cpc	r29, r15
 71a:	81 f0       	breq	.+32     	; 0x73c <_ZN5Print5writeEPKhj+0x40>
 71c:	d8 01       	movw	r26, r16
 71e:	6d 91       	ld	r22, X+
 720:	8d 01       	movw	r16, r26
 722:	d6 01       	movw	r26, r12
 724:	ed 91       	ld	r30, X+
 726:	fc 91       	ld	r31, X
 728:	01 90       	ld	r0, Z+
 72a:	f0 81       	ld	r31, Z
 72c:	e0 2d       	mov	r30, r0
 72e:	c6 01       	movw	r24, r12
 730:	19 95       	eicall
 732:	89 2b       	or	r24, r25
 734:	11 f0       	breq	.+4      	; 0x73a <_ZN5Print5writeEPKhj+0x3e>
 736:	21 96       	adiw	r28, 0x01	; 1
 738:	ee cf       	rjmp	.-36     	; 0x716 <_ZN5Print5writeEPKhj+0x1a>
 73a:	7e 01       	movw	r14, r28
 73c:	c7 01       	movw	r24, r14
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	1f 91       	pop	r17
 744:	0f 91       	pop	r16
 746:	ff 90       	pop	r15
 748:	ef 90       	pop	r14
 74a:	df 90       	pop	r13
 74c:	cf 90       	pop	r12
 74e:	08 95       	ret

00000750 <_ZN5Print5writeEPKc>:
 750:	61 15       	cp	r22, r1
 752:	71 05       	cpc	r23, r1
 754:	79 f0       	breq	.+30     	; 0x774 <_ZN5Print5writeEPKc+0x24>
 756:	fb 01       	movw	r30, r22
 758:	01 90       	ld	r0, Z+
 75a:	00 20       	and	r0, r0
 75c:	e9 f7       	brne	.-6      	; 0x758 <_ZN5Print5writeEPKc+0x8>
 75e:	31 97       	sbiw	r30, 0x01	; 1
 760:	af 01       	movw	r20, r30
 762:	46 1b       	sub	r20, r22
 764:	57 0b       	sbc	r21, r23
 766:	dc 01       	movw	r26, r24
 768:	ed 91       	ld	r30, X+
 76a:	fc 91       	ld	r31, X
 76c:	02 80       	ldd	r0, Z+2	; 0x02
 76e:	f3 81       	ldd	r31, Z+3	; 0x03
 770:	e0 2d       	mov	r30, r0
 772:	19 94       	eijmp
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	08 95       	ret

0000077a <_ZN5Print5printEc>:
 77a:	dc 01       	movw	r26, r24
 77c:	ed 91       	ld	r30, X+
 77e:	fc 91       	ld	r31, X
 780:	01 90       	ld	r0, Z+
 782:	f0 81       	ld	r31, Z
 784:	e0 2d       	mov	r30, r0
 786:	19 94       	eijmp

00000788 <_ZN5Print7printlnEv>:
 788:	62 e9       	ldi	r22, 0x92	; 146
 78a:	72 e0       	ldi	r23, 0x02	; 2
 78c:	e1 cf       	rjmp	.-62     	; 0x750 <_ZN5Print5writeEPKc>

0000078e <_ZN5Print7printlnEPKc>:
 78e:	0f 93       	push	r16
 790:	1f 93       	push	r17
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	ec 01       	movw	r28, r24
 798:	db df       	rcall	.-74     	; 0x750 <_ZN5Print5writeEPKc>
 79a:	8c 01       	movw	r16, r24
 79c:	ce 01       	movw	r24, r28
 79e:	f4 df       	rcall	.-24     	; 0x788 <_ZN5Print7printlnEv>
 7a0:	80 0f       	add	r24, r16
 7a2:	91 1f       	adc	r25, r17
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	1f 91       	pop	r17
 7aa:	0f 91       	pop	r16
 7ac:	08 95       	ret

000007ae <_ZN5Print7printlnEc>:
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	ec 01       	movw	r28, r24
 7b8:	e0 df       	rcall	.-64     	; 0x77a <_ZN5Print5printEc>
 7ba:	8c 01       	movw	r16, r24
 7bc:	ce 01       	movw	r24, r28
 7be:	e4 df       	rcall	.-56     	; 0x788 <_ZN5Print7printlnEv>
 7c0:	80 0f       	add	r24, r16
 7c2:	91 1f       	adc	r25, r17
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	1f 91       	pop	r17
 7ca:	0f 91       	pop	r16
 7cc:	08 95       	ret

000007ce <_ZN5Print11printNumberEmh>:
 7ce:	8f 92       	push	r8
 7d0:	9f 92       	push	r9
 7d2:	af 92       	push	r10
 7d4:	bf 92       	push	r11
 7d6:	ef 92       	push	r14
 7d8:	ff 92       	push	r15
 7da:	0f 93       	push	r16
 7dc:	1f 93       	push	r17
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
 7e6:	a1 97       	sbiw	r28, 0x21	; 33
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	f8 94       	cli
 7ec:	de bf       	out	0x3e, r29	; 62
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	cd bf       	out	0x3d, r28	; 61
 7f2:	7c 01       	movw	r14, r24
 7f4:	fa 01       	movw	r30, r20
 7f6:	cb 01       	movw	r24, r22
 7f8:	19 a2       	std	Y+33, r1	; 0x21
 7fa:	22 30       	cpi	r18, 0x02	; 2
 7fc:	08 f4       	brcc	.+2      	; 0x800 <_ZN5Print11printNumberEmh+0x32>
 7fe:	2a e0       	ldi	r18, 0x0A	; 10
 800:	8e 01       	movw	r16, r28
 802:	0f 5d       	subi	r16, 0xDF	; 223
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	82 2e       	mov	r8, r18
 808:	91 2c       	mov	r9, r1
 80a:	a1 2c       	mov	r10, r1
 80c:	b1 2c       	mov	r11, r1
 80e:	bf 01       	movw	r22, r30
 810:	a5 01       	movw	r20, r10
 812:	94 01       	movw	r18, r8
 814:	e9 d1       	rcall	.+978    	; 0xbe8 <__udivmodsi4>
 816:	f9 01       	movw	r30, r18
 818:	ca 01       	movw	r24, r20
 81a:	01 50       	subi	r16, 0x01	; 1
 81c:	11 09       	sbc	r17, r1
 81e:	6a 30       	cpi	r22, 0x0A	; 10
 820:	10 f4       	brcc	.+4      	; 0x826 <_ZN5Print11printNumberEmh+0x58>
 822:	60 5d       	subi	r22, 0xD0	; 208
 824:	01 c0       	rjmp	.+2      	; 0x828 <_ZN5Print11printNumberEmh+0x5a>
 826:	69 5c       	subi	r22, 0xC9	; 201
 828:	d8 01       	movw	r26, r16
 82a:	6c 93       	st	X, r22
 82c:	23 2b       	or	r18, r19
 82e:	24 2b       	or	r18, r20
 830:	25 2b       	or	r18, r21
 832:	69 f7       	brne	.-38     	; 0x80e <_ZN5Print11printNumberEmh+0x40>
 834:	b8 01       	movw	r22, r16
 836:	c7 01       	movw	r24, r14
 838:	8b df       	rcall	.-234    	; 0x750 <_ZN5Print5writeEPKc>
 83a:	a1 96       	adiw	r28, 0x21	; 33
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	f8 94       	cli
 840:	de bf       	out	0x3e, r29	; 62
 842:	0f be       	out	0x3f, r0	; 63
 844:	cd bf       	out	0x3d, r28	; 61
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	1f 91       	pop	r17
 84c:	0f 91       	pop	r16
 84e:	ff 90       	pop	r15
 850:	ef 90       	pop	r14
 852:	bf 90       	pop	r11
 854:	af 90       	pop	r10
 856:	9f 90       	pop	r9
 858:	8f 90       	pop	r8
 85a:	08 95       	ret

0000085c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 85c:	cf 92       	push	r12
 85e:	df 92       	push	r13
 860:	ef 92       	push	r14
 862:	ff 92       	push	r15
 864:	0f 93       	push	r16
 866:	1f 93       	push	r17
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
  if (base == 0) {
 86c:	21 15       	cp	r18, r1
 86e:	31 05       	cpc	r19, r1
 870:	81 f4       	brne	.+32     	; 0x892 <_ZN5Print5printEli+0x36>
    return write(n);
 872:	dc 01       	movw	r26, r24
 874:	ed 91       	ld	r30, X+
 876:	fc 91       	ld	r31, X
 878:	01 90       	ld	r0, Z+
 87a:	f0 81       	ld	r31, Z
 87c:	e0 2d       	mov	r30, r0
 87e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	1f 91       	pop	r17
 886:	0f 91       	pop	r16
 888:	ff 90       	pop	r15
 88a:	ef 90       	pop	r14
 88c:	df 90       	pop	r13
 88e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 890:	19 94       	eijmp
  } else if (base == 10) {
 892:	2a 30       	cpi	r18, 0x0A	; 10
 894:	31 05       	cpc	r19, r1
 896:	f1 f4       	brne	.+60     	; 0x8d4 <_ZN5Print5printEli+0x78>
    if (n < 0) {
 898:	77 ff       	sbrs	r23, 7
 89a:	1b c0       	rjmp	.+54     	; 0x8d2 <_ZN5Print5printEli+0x76>
 89c:	6a 01       	movw	r12, r20
 89e:	7b 01       	movw	r14, r22
 8a0:	ec 01       	movw	r28, r24
      int t = print('-');
 8a2:	6d e2       	ldi	r22, 0x2D	; 45
 8a4:	6a df       	rcall	.-300    	; 0x77a <_ZN5Print5printEc>
 8a6:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 8a8:	44 27       	eor	r20, r20
 8aa:	55 27       	eor	r21, r21
 8ac:	ba 01       	movw	r22, r20
 8ae:	4c 19       	sub	r20, r12
 8b0:	5d 09       	sbc	r21, r13
 8b2:	6e 09       	sbc	r22, r14
 8b4:	7f 09       	sbc	r23, r15
 8b6:	2a e0       	ldi	r18, 0x0A	; 10
 8b8:	ce 01       	movw	r24, r28
 8ba:	89 df       	rcall	.-238    	; 0x7ce <_ZN5Print11printNumberEmh>
 8bc:	80 0f       	add	r24, r16
 8be:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	1f 91       	pop	r17
 8c6:	0f 91       	pop	r16
 8c8:	ff 90       	pop	r15
 8ca:	ef 90       	pop	r14
 8cc:	df 90       	pop	r13
 8ce:	cf 90       	pop	r12
 8d0:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 8d2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 8d4:	df 91       	pop	r29
 8d6:	cf 91       	pop	r28
 8d8:	1f 91       	pop	r17
 8da:	0f 91       	pop	r16
 8dc:	ff 90       	pop	r15
 8de:	ef 90       	pop	r14
 8e0:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8e2:	cf 90       	pop	r12
 8e4:	74 cf       	rjmp	.-280    	; 0x7ce <_ZN5Print11printNumberEmh>

000008e6 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 8e6:	9a 01       	movw	r18, r20
  return print((long) n, base);
 8e8:	ab 01       	movw	r20, r22
 8ea:	77 0f       	add	r23, r23
 8ec:	66 0b       	sbc	r22, r22
 8ee:	77 0b       	sbc	r23, r23
 8f0:	b5 cf       	rjmp	.-150    	; 0x85c <_ZN5Print5printEli>

000008f2 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 8f2:	0f 93       	push	r16
 8f4:	1f 93       	push	r17
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 8fc:	f4 df       	rcall	.-24     	; 0x8e6 <_ZN5Print5printEii>
 8fe:	8c 01       	movw	r16, r24
  n += println();
 900:	ce 01       	movw	r24, r28
 902:	42 df       	rcall	.-380    	; 0x788 <_ZN5Print7printlnEv>
  return n;
}
 904:	80 0f       	add	r24, r16
 906:	91 1f       	adc	r25, r17
 908:	df 91       	pop	r29
 90a:	cf 91       	pop	r28
 90c:	1f 91       	pop	r17
 90e:	0f 91       	pop	r16
 910:	08 95       	ret

00000912 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 912:	1f 92       	push	r1
 914:	0f 92       	push	r0
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	0f 92       	push	r0
 91a:	11 24       	eor	r1, r1
 91c:	2f 93       	push	r18
 91e:	3f 93       	push	r19
 920:	8f 93       	push	r24
 922:	9f 93       	push	r25
 924:	af 93       	push	r26
 926:	bf 93       	push	r27
 928:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <timer0_millis>
 92c:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <timer0_millis+0x1>
 930:	a0 91 42 03 	lds	r26, 0x0342	; 0x800342 <timer0_millis+0x2>
 934:	b0 91 43 03 	lds	r27, 0x0343	; 0x800343 <timer0_millis+0x3>
 938:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <timer0_fract>
 93c:	23 e0       	ldi	r18, 0x03	; 3
 93e:	23 0f       	add	r18, r19
 940:	2d 37       	cpi	r18, 0x7D	; 125
 942:	20 f4       	brcc	.+8      	; 0x94c <__vector_23+0x3a>
 944:	01 96       	adiw	r24, 0x01	; 1
 946:	a1 1d       	adc	r26, r1
 948:	b1 1d       	adc	r27, r1
 94a:	05 c0       	rjmp	.+10     	; 0x956 <__vector_23+0x44>
 94c:	26 e8       	ldi	r18, 0x86	; 134
 94e:	23 0f       	add	r18, r19
 950:	02 96       	adiw	r24, 0x02	; 2
 952:	a1 1d       	adc	r26, r1
 954:	b1 1d       	adc	r27, r1
 956:	20 93 3f 03 	sts	0x033F, r18	; 0x80033f <timer0_fract>
 95a:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <timer0_millis>
 95e:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <timer0_millis+0x1>
 962:	a0 93 42 03 	sts	0x0342, r26	; 0x800342 <timer0_millis+0x2>
 966:	b0 93 43 03 	sts	0x0343, r27	; 0x800343 <timer0_millis+0x3>
 96a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <timer0_overflow_count>
 96e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <timer0_overflow_count+0x1>
 972:	a0 91 46 03 	lds	r26, 0x0346	; 0x800346 <timer0_overflow_count+0x2>
 976:	b0 91 47 03 	lds	r27, 0x0347	; 0x800347 <timer0_overflow_count+0x3>
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	a1 1d       	adc	r26, r1
 97e:	b1 1d       	adc	r27, r1
 980:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <timer0_overflow_count>
 984:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <timer0_overflow_count+0x1>
 988:	a0 93 46 03 	sts	0x0346, r26	; 0x800346 <timer0_overflow_count+0x2>
 98c:	b0 93 47 03 	sts	0x0347, r27	; 0x800347 <timer0_overflow_count+0x3>
 990:	bf 91       	pop	r27
 992:	af 91       	pop	r26
 994:	9f 91       	pop	r25
 996:	8f 91       	pop	r24
 998:	3f 91       	pop	r19
 99a:	2f 91       	pop	r18
 99c:	0f 90       	pop	r0
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	0f 90       	pop	r0
 9a2:	1f 90       	pop	r1
 9a4:	18 95       	reti

000009a6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 9a6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 9a8:	84 b5       	in	r24, 0x24	; 36
 9aa:	82 60       	ori	r24, 0x02	; 2
 9ac:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 9ae:	84 b5       	in	r24, 0x24	; 36
 9b0:	81 60       	ori	r24, 0x01	; 1
 9b2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 9b4:	85 b5       	in	r24, 0x25	; 37
 9b6:	82 60       	ori	r24, 0x02	; 2
 9b8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 9ba:	85 b5       	in	r24, 0x25	; 37
 9bc:	81 60       	ori	r24, 0x01	; 1
 9be:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 9c0:	ee e6       	ldi	r30, 0x6E	; 110
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	80 81       	ld	r24, Z
 9c6:	81 60       	ori	r24, 0x01	; 1
 9c8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 9ca:	e1 e8       	ldi	r30, 0x81	; 129
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 9d0:	80 81       	ld	r24, Z
 9d2:	82 60       	ori	r24, 0x02	; 2
 9d4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 9d6:	80 81       	ld	r24, Z
 9d8:	81 60       	ori	r24, 0x01	; 1
 9da:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 9dc:	e0 e8       	ldi	r30, 0x80	; 128
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	80 81       	ld	r24, Z
 9e2:	81 60       	ori	r24, 0x01	; 1
 9e4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 9e6:	e1 eb       	ldi	r30, 0xB1	; 177
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	80 81       	ld	r24, Z
 9ec:	84 60       	ori	r24, 0x04	; 4
 9ee:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 9f0:	e0 eb       	ldi	r30, 0xB0	; 176
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	81 60       	ori	r24, 0x01	; 1
 9f8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 9fa:	e1 e9       	ldi	r30, 0x91	; 145
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	80 81       	ld	r24, Z
 a00:	82 60       	ori	r24, 0x02	; 2
 a02:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 a04:	80 81       	ld	r24, Z
 a06:	81 60       	ori	r24, 0x01	; 1
 a08:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 a0a:	e0 e9       	ldi	r30, 0x90	; 144
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	80 81       	ld	r24, Z
 a10:	81 60       	ori	r24, 0x01	; 1
 a12:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 a14:	e1 ea       	ldi	r30, 0xA1	; 161
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	80 81       	ld	r24, Z
 a1a:	82 60       	ori	r24, 0x02	; 2
 a1c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 a1e:	80 81       	ld	r24, Z
 a20:	81 60       	ori	r24, 0x01	; 1
 a22:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 a24:	e0 ea       	ldi	r30, 0xA0	; 160
 a26:	f0 e0       	ldi	r31, 0x00	; 0
 a28:	80 81       	ld	r24, Z
 a2a:	81 60       	ori	r24, 0x01	; 1
 a2c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 a2e:	e1 e2       	ldi	r30, 0x21	; 33
 a30:	f1 e0       	ldi	r31, 0x01	; 1
 a32:	80 81       	ld	r24, Z
 a34:	82 60       	ori	r24, 0x02	; 2
 a36:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 a38:	80 81       	ld	r24, Z
 a3a:	81 60       	ori	r24, 0x01	; 1
 a3c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 a3e:	e0 e2       	ldi	r30, 0x20	; 32
 a40:	f1 e0       	ldi	r31, 0x01	; 1
 a42:	80 81       	ld	r24, Z
 a44:	81 60       	ori	r24, 0x01	; 1
 a46:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 a48:	ea e7       	ldi	r30, 0x7A	; 122
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	80 81       	ld	r24, Z
 a4e:	84 60       	ori	r24, 0x04	; 4
 a50:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 a52:	80 81       	ld	r24, Z
 a54:	82 60       	ori	r24, 0x02	; 2
 a56:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 a58:	80 81       	ld	r24, Z
 a5a:	81 60       	ori	r24, 0x01	; 1
 a5c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 a5e:	80 81       	ld	r24, Z
 a60:	80 68       	ori	r24, 0x80	; 128
 a62:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 a64:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 a68:	08 95       	ret

00000a6a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	fc 01       	movw	r30, r24
 a6e:	31 97       	sbiw	r30, 0x01	; 1
 a70:	e2 31       	cpi	r30, 0x12	; 18
 a72:	f1 05       	cpc	r31, r1
 a74:	08 f0       	brcs	.+2      	; 0xa78 <turnOffPWM+0xe>
 a76:	4d c0       	rjmp	.+154    	; 0xb12 <turnOffPWM+0xa8>
 a78:	88 27       	eor	r24, r24
 a7a:	ee 58       	subi	r30, 0x8E	; 142
 a7c:	ff 4f       	sbci	r31, 0xFF	; 255
 a7e:	8f 4f       	sbci	r24, 0xFF	; 255
 a80:	d5 c0       	rjmp	.+426    	; 0xc2c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 a82:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 a86:	8f 77       	andi	r24, 0x7F	; 127
 a88:	03 c0       	rjmp	.+6      	; 0xa90 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a8a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 a8e:	8f 7d       	andi	r24, 0xDF	; 223
 a90:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 a94:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 a96:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 a9a:	87 7f       	andi	r24, 0xF7	; 247
 a9c:	f9 cf       	rjmp	.-14     	; 0xa90 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 a9e:	84 b5       	in	r24, 0x24	; 36
 aa0:	8f 77       	andi	r24, 0x7F	; 127
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 aa4:	84 b5       	in	r24, 0x24	; 36
 aa6:	8f 7d       	andi	r24, 0xDF	; 223
 aa8:	84 bd       	out	0x24, r24	; 36
 aaa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 aac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 ab0:	8f 77       	andi	r24, 0x7F	; 127
 ab2:	03 c0       	rjmp	.+6      	; 0xaba <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 ab4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 ab8:	8f 7d       	andi	r24, 0xDF	; 223
 aba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 abe:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 ac0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 ac4:	8f 77       	andi	r24, 0x7F	; 127
 ac6:	07 c0       	rjmp	.+14     	; 0xad6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 ac8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 acc:	8f 7d       	andi	r24, 0xDF	; 223
 ace:	03 c0       	rjmp	.+6      	; 0xad6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 ad0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 ad4:	87 7f       	andi	r24, 0xF7	; 247
 ad6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 ada:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 adc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 ae0:	8f 77       	andi	r24, 0x7F	; 127
 ae2:	07 c0       	rjmp	.+14     	; 0xaf2 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 ae4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 ae8:	8f 7d       	andi	r24, 0xDF	; 223
 aea:	03 c0       	rjmp	.+6      	; 0xaf2 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 aec:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 af0:	87 7f       	andi	r24, 0xF7	; 247
 af2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 af6:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 af8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 afc:	8f 77       	andi	r24, 0x7F	; 127
 afe:	07 c0       	rjmp	.+14     	; 0xb0e <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 b00:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 b04:	8f 7d       	andi	r24, 0xDF	; 223
 b06:	03 c0       	rjmp	.+6      	; 0xb0e <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 b08:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 b0c:	87 7f       	andi	r24, 0xF7	; 247
 b0e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 b12:	08 95       	ret

00000b14 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	fc 01       	movw	r30, r24
 b1c:	e2 5b       	subi	r30, 0xB2	; 178
 b1e:	fe 4f       	sbci	r31, 0xFE	; 254
 b20:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 b22:	fc 01       	movw	r30, r24
 b24:	ec 56       	subi	r30, 0x6C	; 108
 b26:	fe 4f       	sbci	r31, 0xFE	; 254
 b28:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 b2a:	88 23       	and	r24, r24
 b2c:	61 f1       	breq	.+88     	; 0xb86 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	88 0f       	add	r24, r24
 b32:	99 1f       	adc	r25, r25
 b34:	fc 01       	movw	r30, r24
 b36:	ec 50       	subi	r30, 0x0C	; 12
 b38:	fe 4f       	sbci	r31, 0xFE	; 254
 b3a:	c5 91       	lpm	r28, Z+
 b3c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 b3e:	fc 01       	movw	r30, r24
 b40:	e6 52       	subi	r30, 0x26	; 38
 b42:	fe 4f       	sbci	r31, 0xFE	; 254
 b44:	a5 91       	lpm	r26, Z+
 b46:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 b48:	61 11       	cpse	r22, r1
 b4a:	09 c0       	rjmp	.+18     	; 0xb5e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 b4c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 b4e:	f8 94       	cli
		*reg &= ~bit;
 b50:	88 81       	ld	r24, Y
 b52:	20 95       	com	r18
 b54:	82 23       	and	r24, r18
 b56:	88 83       	st	Y, r24
		*out &= ~bit;
 b58:	ec 91       	ld	r30, X
 b5a:	2e 23       	and	r18, r30
 b5c:	0b c0       	rjmp	.+22     	; 0xb74 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 b5e:	62 30       	cpi	r22, 0x02	; 2
 b60:	61 f4       	brne	.+24     	; 0xb7a <pinMode+0x66>
		uint8_t oldSREG = SREG;
 b62:	9f b7       	in	r25, 0x3f	; 63
                cli();
 b64:	f8 94       	cli
		*reg &= ~bit;
 b66:	88 81       	ld	r24, Y
 b68:	32 2f       	mov	r19, r18
 b6a:	30 95       	com	r19
 b6c:	83 23       	and	r24, r19
 b6e:	88 83       	st	Y, r24
		*out |= bit;
 b70:	ec 91       	ld	r30, X
 b72:	2e 2b       	or	r18, r30
 b74:	2c 93       	st	X, r18
		SREG = oldSREG;
 b76:	9f bf       	out	0x3f, r25	; 63
 b78:	06 c0       	rjmp	.+12     	; 0xb86 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 b7a:	8f b7       	in	r24, 0x3f	; 63
                cli();
 b7c:	f8 94       	cli
		*reg |= bit;
 b7e:	e8 81       	ld	r30, Y
 b80:	2e 2b       	or	r18, r30
 b82:	28 83       	st	Y, r18
		SREG = oldSREG;
 b84:	8f bf       	out	0x3f, r24	; 63
	}
}
 b86:	df 91       	pop	r29
 b88:	cf 91       	pop	r28
 b8a:	08 95       	ret

00000b8c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 b92:	28 2f       	mov	r18, r24
 b94:	30 e0       	ldi	r19, 0x00	; 0
 b96:	f9 01       	movw	r30, r18
 b98:	e8 5f       	subi	r30, 0xF8	; 248
 b9a:	fe 4f       	sbci	r31, 0xFE	; 254
 b9c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 b9e:	f9 01       	movw	r30, r18
 ba0:	e2 5b       	subi	r30, 0xB2	; 178
 ba2:	fe 4f       	sbci	r31, 0xFE	; 254
 ba4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 ba6:	f9 01       	movw	r30, r18
 ba8:	ec 56       	subi	r30, 0x6C	; 108
 baa:	fe 4f       	sbci	r31, 0xFE	; 254
 bac:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 bae:	cc 23       	and	r28, r28
 bb0:	b9 f0       	breq	.+46     	; 0xbe0 <digitalWrite+0x54>
 bb2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 bb4:	81 11       	cpse	r24, r1
 bb6:	59 df       	rcall	.-334    	; 0xa6a <turnOffPWM>

	out = portOutputRegister(port);
 bb8:	ec 2f       	mov	r30, r28
 bba:	f0 e0       	ldi	r31, 0x00	; 0
 bbc:	ee 0f       	add	r30, r30
 bbe:	ff 1f       	adc	r31, r31
 bc0:	e6 52       	subi	r30, 0x26	; 38
 bc2:	fe 4f       	sbci	r31, 0xFE	; 254
 bc4:	a5 91       	lpm	r26, Z+
 bc6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 bc8:	9f b7       	in	r25, 0x3f	; 63
	cli();
 bca:	f8 94       	cli

	if (val == LOW) {
 bcc:	11 11       	cpse	r17, r1
 bce:	04 c0       	rjmp	.+8      	; 0xbd8 <digitalWrite+0x4c>
		*out &= ~bit;
 bd0:	8c 91       	ld	r24, X
 bd2:	d0 95       	com	r29
 bd4:	d8 23       	and	r29, r24
 bd6:	02 c0       	rjmp	.+4      	; 0xbdc <digitalWrite+0x50>
	} else {
		*out |= bit;
 bd8:	ec 91       	ld	r30, X
 bda:	de 2b       	or	r29, r30
 bdc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 bde:	9f bf       	out	0x3f, r25	; 63
}
 be0:	df 91       	pop	r29
 be2:	cf 91       	pop	r28
 be4:	1f 91       	pop	r17
 be6:	08 95       	ret

00000be8 <__udivmodsi4>:
 be8:	a1 e2       	ldi	r26, 0x21	; 33
 bea:	1a 2e       	mov	r1, r26
 bec:	aa 1b       	sub	r26, r26
 bee:	bb 1b       	sub	r27, r27
 bf0:	fd 01       	movw	r30, r26
 bf2:	0d c0       	rjmp	.+26     	; 0xc0e <__udivmodsi4_ep>

00000bf4 <__udivmodsi4_loop>:
 bf4:	aa 1f       	adc	r26, r26
 bf6:	bb 1f       	adc	r27, r27
 bf8:	ee 1f       	adc	r30, r30
 bfa:	ff 1f       	adc	r31, r31
 bfc:	a2 17       	cp	r26, r18
 bfe:	b3 07       	cpc	r27, r19
 c00:	e4 07       	cpc	r30, r20
 c02:	f5 07       	cpc	r31, r21
 c04:	20 f0       	brcs	.+8      	; 0xc0e <__udivmodsi4_ep>
 c06:	a2 1b       	sub	r26, r18
 c08:	b3 0b       	sbc	r27, r19
 c0a:	e4 0b       	sbc	r30, r20
 c0c:	f5 0b       	sbc	r31, r21

00000c0e <__udivmodsi4_ep>:
 c0e:	66 1f       	adc	r22, r22
 c10:	77 1f       	adc	r23, r23
 c12:	88 1f       	adc	r24, r24
 c14:	99 1f       	adc	r25, r25
 c16:	1a 94       	dec	r1
 c18:	69 f7       	brne	.-38     	; 0xbf4 <__udivmodsi4_loop>
 c1a:	60 95       	com	r22
 c1c:	70 95       	com	r23
 c1e:	80 95       	com	r24
 c20:	90 95       	com	r25
 c22:	9b 01       	movw	r18, r22
 c24:	ac 01       	movw	r20, r24
 c26:	bd 01       	movw	r22, r26
 c28:	cf 01       	movw	r24, r30
 c2a:	08 95       	ret

00000c2c <__tablejump2__>:
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	88 1f       	adc	r24, r24
 c32:	8b bf       	out	0x3b, r24	; 59
 c34:	07 90       	elpm	r0, Z+
 c36:	f6 91       	elpm	r31, Z
 c38:	e0 2d       	mov	r30, r0
 c3a:	19 94       	eijmp

00000c3c <_exit>:
 c3c:	f8 94       	cli

00000c3e <__stop_program>:
 c3e:	ff cf       	rjmp	.-2      	; 0xc3e <__stop_program>
