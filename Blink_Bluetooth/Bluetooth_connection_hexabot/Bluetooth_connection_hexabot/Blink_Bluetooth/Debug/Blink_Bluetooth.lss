
Blink_Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800200  00000e20  00000eb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000143  008002f6  008002f6  00000faa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000faa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009e1e  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000216a  00000000  00000000  0000b112  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b68  00000000  00000000  0000d27c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000086c  00000000  00000000  0000ede4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022e4  00000000  00000000  0000f650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d93  00000000  00000000  00011934  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  000146c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	08 c1       	rjmp	.+528    	; 0x212 <__ctors_end>
   2:	00 00       	nop
   4:	34 c1       	rjmp	.+616    	; 0x26e <__bad_interrupt>
   6:	00 00       	nop
   8:	32 c1       	rjmp	.+612    	; 0x26e <__bad_interrupt>
   a:	00 00       	nop
   c:	30 c1       	rjmp	.+608    	; 0x26e <__bad_interrupt>
   e:	00 00       	nop
  10:	2e c1       	rjmp	.+604    	; 0x26e <__bad_interrupt>
  12:	00 00       	nop
  14:	2c c1       	rjmp	.+600    	; 0x26e <__bad_interrupt>
  16:	00 00       	nop
  18:	2a c1       	rjmp	.+596    	; 0x26e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	28 c1       	rjmp	.+592    	; 0x26e <__bad_interrupt>
  1e:	00 00       	nop
  20:	26 c1       	rjmp	.+588    	; 0x26e <__bad_interrupt>
  22:	00 00       	nop
  24:	24 c1       	rjmp	.+584    	; 0x26e <__bad_interrupt>
  26:	00 00       	nop
  28:	22 c1       	rjmp	.+580    	; 0x26e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	20 c1       	rjmp	.+576    	; 0x26e <__bad_interrupt>
  2e:	00 00       	nop
  30:	1e c1       	rjmp	.+572    	; 0x26e <__bad_interrupt>
  32:	00 00       	nop
  34:	1c c1       	rjmp	.+568    	; 0x26e <__bad_interrupt>
  36:	00 00       	nop
  38:	1a c1       	rjmp	.+564    	; 0x26e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	18 c1       	rjmp	.+560    	; 0x26e <__bad_interrupt>
  3e:	00 00       	nop
  40:	16 c1       	rjmp	.+556    	; 0x26e <__bad_interrupt>
  42:	00 00       	nop
  44:	14 c1       	rjmp	.+552    	; 0x26e <__bad_interrupt>
  46:	00 00       	nop
  48:	12 c1       	rjmp	.+548    	; 0x26e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	10 c1       	rjmp	.+544    	; 0x26e <__bad_interrupt>
  4e:	00 00       	nop
  50:	0e c1       	rjmp	.+540    	; 0x26e <__bad_interrupt>
  52:	00 00       	nop
  54:	0c c1       	rjmp	.+536    	; 0x26e <__bad_interrupt>
  56:	00 00       	nop
  58:	0a c1       	rjmp	.+532    	; 0x26e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4a c5       	rjmp	.+2708   	; 0xaf2 <__vector_23>
  5e:	00 00       	nop
  60:	06 c1       	rjmp	.+524    	; 0x26e <__bad_interrupt>
  62:	00 00       	nop
  64:	05 c3       	rjmp	.+1546   	; 0x670 <__vector_25>
  66:	00 00       	nop
  68:	39 c3       	rjmp	.+1650   	; 0x6dc <__vector_26>
  6a:	00 00       	nop
  6c:	00 c1       	rjmp	.+512    	; 0x26e <__bad_interrupt>
  6e:	00 00       	nop
  70:	fe c0       	rjmp	.+508    	; 0x26e <__bad_interrupt>
  72:	00 00       	nop
  74:	fc c0       	rjmp	.+504    	; 0x26e <__bad_interrupt>
  76:	00 00       	nop
  78:	fa c0       	rjmp	.+500    	; 0x26e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	f8 c0       	rjmp	.+496    	; 0x26e <__bad_interrupt>
  7e:	00 00       	nop
  80:	f6 c0       	rjmp	.+492    	; 0x26e <__bad_interrupt>
  82:	00 00       	nop
  84:	f4 c0       	rjmp	.+488    	; 0x26e <__bad_interrupt>
  86:	00 00       	nop
  88:	f2 c0       	rjmp	.+484    	; 0x26e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	f0 c0       	rjmp	.+480    	; 0x26e <__bad_interrupt>
  8e:	00 00       	nop
  90:	ee c0       	rjmp	.+476    	; 0x26e <__bad_interrupt>
  92:	00 00       	nop
  94:	ec c0       	rjmp	.+472    	; 0x26e <__bad_interrupt>
  96:	00 00       	nop
  98:	ea c0       	rjmp	.+468    	; 0x26e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	e8 c0       	rjmp	.+464    	; 0x26e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	e6 c0       	rjmp	.+460    	; 0x26e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	e4 c0       	rjmp	.+456    	; 0x26e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e2 c0       	rjmp	.+452    	; 0x26e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	e0 c0       	rjmp	.+448    	; 0x26e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	de c0       	rjmp	.+444    	; 0x26e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	dc c0       	rjmp	.+440    	; 0x26e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	da c0       	rjmp	.+436    	; 0x26e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	d8 c0       	rjmp	.+432    	; 0x26e <__bad_interrupt>
  be:	00 00       	nop
  c0:	d6 c0       	rjmp	.+428    	; 0x26e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	d4 c0       	rjmp	.+424    	; 0x26e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	d2 c0       	rjmp	.+420    	; 0x26e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	d0 c0       	rjmp	.+416    	; 0x26e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ce c0       	rjmp	.+412    	; 0x26e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	cc c0       	rjmp	.+408    	; 0x26e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	60 c3       	rjmp	.+1728   	; 0x79a <__vector_54>
  da:	00 00       	nop
  dc:	94 c3       	rjmp	.+1832   	; 0x806 <__vector_55>
  de:	00 00       	nop
  e0:	c6 c0       	rjmp	.+396    	; 0x26e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3f 06       	cpc	r3, r31
  e6:	42 06       	cpc	r4, r18
  e8:	31 06       	cpc	r3, r17
  ea:	35 06       	cpc	r3, r21
  ec:	3b 06       	cpc	r3, r27
  ee:	79 06       	cpc	r7, r25
  f0:	46 06       	cpc	r4, r22
  f2:	4a 06       	cpc	r4, r26
  f4:	50 06       	cpc	r5, r16
  f6:	54 06       	cpc	r5, r20
  f8:	58 06       	cpc	r5, r24
  fa:	5e 06       	cpc	r5, r30
  fc:	62 06       	cpc	r6, r18
  fe:	66 06       	cpc	r6, r22
 100:	79 06       	cpc	r7, r25
 102:	6c 06       	cpc	r6, r28
 104:	70 06       	cpc	r7, r16
 106:	74 06       	cpc	r7, r20

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
 1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
 1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
 20e:	a0 03       	fmuls	r18, r16
 210:	35 04       	cpc	r3, r5

00000212 <__ctors_end>:
 212:	11 24       	eor	r1, r1
 214:	1f be       	out	0x3f, r1	; 63
 216:	cf ef       	ldi	r28, 0xFF	; 255
 218:	d1 e2       	ldi	r29, 0x21	; 33
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0c bf       	out	0x3c, r16	; 60

00000222 <__do_copy_data>:
 222:	12 e0       	ldi	r17, 0x02	; 2
 224:	a0 e0       	ldi	r26, 0x00	; 0
 226:	b2 e0       	ldi	r27, 0x02	; 2
 228:	e0 e2       	ldi	r30, 0x20	; 32
 22a:	fe e0       	ldi	r31, 0x0E	; 14
 22c:	00 e0       	ldi	r16, 0x00	; 0
 22e:	0b bf       	out	0x3b, r16	; 59
 230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
 232:	07 90       	elpm	r0, Z+
 234:	0d 92       	st	X+, r0
 236:	a6 3f       	cpi	r26, 0xF6	; 246
 238:	b1 07       	cpc	r27, r17
 23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>

0000023c <__do_clear_bss>:
 23c:	24 e0       	ldi	r18, 0x04	; 4
 23e:	a6 ef       	ldi	r26, 0xF6	; 246
 240:	b2 e0       	ldi	r27, 0x02	; 2
 242:	01 c0       	rjmp	.+2      	; 0x246 <.do_clear_bss_start>

00000244 <.do_clear_bss_loop>:
 244:	1d 92       	st	X+, r1

00000246 <.do_clear_bss_start>:
 246:	a9 33       	cpi	r26, 0x39	; 57
 248:	b2 07       	cpc	r27, r18
 24a:	e1 f7       	brne	.-8      	; 0x244 <.do_clear_bss_loop>

0000024c <__do_global_ctors>:
 24c:	11 e0       	ldi	r17, 0x01	; 1
 24e:	c9 e0       	ldi	r28, 0x09	; 9
 250:	d1 e0       	ldi	r29, 0x01	; 1
 252:	00 e0       	ldi	r16, 0x00	; 0
 254:	05 c0       	rjmp	.+10     	; 0x260 <__do_global_ctors+0x14>
 256:	21 97       	sbiw	r28, 0x01	; 1
 258:	01 09       	sbc	r16, r1
 25a:	80 2f       	mov	r24, r16
 25c:	fe 01       	movw	r30, r28
 25e:	d6 d5       	rcall	.+2988   	; 0xe0c <__tablejump2__>
 260:	c7 30       	cpi	r28, 0x07	; 7
 262:	d1 07       	cpc	r29, r17
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 07       	cpc	r16, r24
 268:	b1 f7       	brne	.-20     	; 0x256 <__do_global_ctors+0xa>
 26a:	2d d3       	rcall	.+1626   	; 0x8c6 <main>
 26c:	d7 c5       	rjmp	.+2990   	; 0xe1c <_exit>

0000026e <__bad_interrupt>:
 26e:	c8 ce       	rjmp	.-624    	; 0x0 <__vectors>

00000270 <setup>:
}


void setup() {
	// initialize digital pin LED_BUILTIN as an output.
	pinMode(LED_BUILTIN, OUTPUT);
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	8d e0       	ldi	r24, 0x0D	; 13
 274:	3f d5       	rcall	.+2686   	; 0xcf4 <pinMode>
	pinMode(12, OUTPUT); //also pin 12 as LED output
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	8c e0       	ldi	r24, 0x0C	; 12
 27a:	3c d5       	rcall	.+2680   	; 0xcf4 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 27c:	26 e0       	ldi	r18, 0x06	; 6
 27e:	40 e8       	ldi	r20, 0x80	; 128
 280:	55 e2       	ldi	r21, 0x25	; 37
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	86 ef       	ldi	r24, 0xF6	; 246
 288:	92 e0       	ldi	r25, 0x02	; 2
 28a:	8f d1       	rcall	.+798    	; 0x5aa <_ZN14HardwareSerial5beginEmh>

	Serial.begin(9600);         //Sets the data rate in bits per second (baud) for serial data transmission
	Serial.println("This is the arduino for Hexapod!!!");
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	72 e0       	ldi	r23, 0x02	; 2
 290:	86 ef       	ldi	r24, 0xF6	; 246
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	6c d3       	rcall	.+1752   	; 0x96e <_ZN5Print7printlnEPKc>
	Serial.println(" ");
 296:	6c e8       	ldi	r22, 0x8C	; 140
 298:	72 e0       	ldi	r23, 0x02	; 2
 29a:	86 ef       	ldi	r24, 0xF6	; 246
 29c:	92 e0       	ldi	r25, 0x02	; 2
 29e:	67 d3       	rcall	.+1742   	; 0x96e <_ZN5Print7printlnEPKc>
	Serial.println("To connect, start the LED Controller App on your Smartphone");
 2a0:	63 e2       	ldi	r22, 0x23	; 35
 2a2:	72 e0       	ldi	r23, 0x02	; 2
 2a4:	86 ef       	ldi	r24, 0xF6	; 246
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	62 d3       	rcall	.+1732   	; 0x96e <_ZN5Print7printlnEPKc>
	Serial.println("and connect to Bluetooth HC-05");
 2aa:	6f e5       	ldi	r22, 0x5F	; 95
 2ac:	72 e0       	ldi	r23, 0x02	; 2
 2ae:	86 ef       	ldi	r24, 0xF6	; 246
 2b0:	92 e0       	ldi	r25, 0x02	; 2
 2b2:	5d d3       	rcall	.+1722   	; 0x96e <_ZN5Print7printlnEPKc>

	//int count = 0;
//	BluetoothInterface to;
//	to:BluetoothInterface();	
	digitalWrite(LED_BUILTIN, HIGH); 
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	8d e0       	ldi	r24, 0x0D	; 13
 2b8:	59 c5       	rjmp	.+2738   	; 0xd6c <digitalWrite>

000002ba <loop>:
 2ba:	cf 93       	push	r28
  
}


// the loop function runs over and over again forever
void loop() {
 2bc:	df 93       	push	r29
	int serv3;
	char data;
	int count = 0;
	int k;
	
	if(Serial.available() > 0){
 2be:	86 ef       	ldi	r24, 0xF6	; 246
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	73 d0       	rcall	.+230    	; 0x3aa <_ZN14HardwareSerial9availableEv>
 2c4:	18 16       	cp	r1, r24
 2c6:	19 06       	cpc	r1, r25
 2c8:	0c f0       	brlt	.+2      	; 0x2cc <loop+0x12>
 2ca:	6c c0       	rjmp	.+216    	; 0x3a4 <loop+0xea>
	data = Serial.read();
 2cc:	86 ef       	ldi	r24, 0xF6	; 246
 2ce:	92 e0       	ldi	r25, 0x02	; 2
 2d0:	86 d0       	rcall	.+268    	; 0x3de <_ZN14HardwareSerial4readEv>
 2d2:	ec 01       	movw	r28, r24
	Serial.println(data);
 2d4:	68 2f       	mov	r22, r24
 2d6:	86 ef       	ldi	r24, 0xF6	; 246
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	59 d3       	rcall	.+1714   	; 0x98e <_ZN5Print7printlnEc>
	switch (data)
 2dc:	ce 01       	movw	r24, r28
 2de:	99 27       	eor	r25, r25
 2e0:	81 34       	cpi	r24, 0x41	; 65
 2e2:	91 05       	cpc	r25, r1
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <loop+0x2e>
 2e6:	39 c0       	rjmp	.+114    	; 0x35a <loop+0xa0>
 2e8:	2c f5       	brge	.+74     	; 0x334 <loop+0x7a>
 2ea:	83 97       	sbiw	r24, 0x23	; 35
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <loop+0x36>
 2ee:	53 c0       	rjmp	.+166    	; 0x396 <loop+0xdc>
			Serial.print("Servo 3 value: ");
			Serial.println(serv3);		
			break;
			
		case '#':
			Serial.print("The values are \nS1= ");
 2f0:	6e ea       	ldi	r22, 0xAE	; 174
 2f2:	72 e0       	ldi	r23, 0x02	; 2
 2f4:	86 ef       	ldi	r24, 0xF6	; 246
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	2f d3       	rcall	.+1630   	; 0x958 <_ZN5Print5printEPKc>
			Serial.println(serv1);
 2fa:	4a e0       	ldi	r20, 0x0A	; 10
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	86 ef       	ldi	r24, 0xF6	; 246
 304:	92 e0       	ldi	r25, 0x02	; 2
 306:	e5 d3       	rcall	.+1994   	; 0xad2 <_ZN5Print7printlnEii>
			Serial.print("S2= ");
 308:	63 ec       	ldi	r22, 0xC3	; 195
 30a:	72 e0       	ldi	r23, 0x02	; 2
 30c:	86 ef       	ldi	r24, 0xF6	; 246
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	23 d3       	rcall	.+1606   	; 0x958 <_ZN5Print5printEPKc>
 312:	4a e0       	ldi	r20, 0x0A	; 10
			Serial.println(serv2);
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	86 ef       	ldi	r24, 0xF6	; 246
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	d9 d3       	rcall	.+1970   	; 0xad2 <_ZN5Print7printlnEii>
			Serial.print("S3= ");
 320:	68 ec       	ldi	r22, 0xC8	; 200
 322:	72 e0       	ldi	r23, 0x02	; 2
 324:	86 ef       	ldi	r24, 0xF6	; 246
 326:	92 e0       	ldi	r25, 0x02	; 2
 328:	17 d3       	rcall	.+1582   	; 0x958 <_ZN5Print5printEPKc>
 32a:	4a e0       	ldi	r20, 0x0A	; 10
			Serial.println(serv3);
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	2c c0       	rjmp	.+88     	; 0x38c <loop+0xd2>
 334:	82 34       	cpi	r24, 0x42	; 66
	int k;
	
	if(Serial.available() > 0){
	data = Serial.read();
	Serial.println(data);
	switch (data)
 336:	91 05       	cpc	r25, r1
 338:	e9 f0       	breq	.+58     	; 0x374 <loop+0xba>
 33a:	83 34       	cpi	r24, 0x43	; 67
 33c:	91 05       	cpc	r25, r1
 33e:	59 f5       	brne	.+86     	; 0x396 <loop+0xdc>
			Serial.print("Servo 2 value: ");
			Serial.println(serv2);
			break;
			
		case 'C':
			servo3 = Serial.read();
 340:	86 ef       	ldi	r24, 0xF6	; 246
 342:	92 e0       	ldi	r25, 0x02	; 2
 344:	4c d0       	rcall	.+152    	; 0x3de <_ZN14HardwareSerial4readEv>
 346:	6e e9       	ldi	r22, 0x9E	; 158
			serv3 = (int) data -'0';
			Serial.print("Servo 3 value: ");
 348:	72 e0       	ldi	r23, 0x02	; 2
 34a:	86 ef       	ldi	r24, 0xF6	; 246
 34c:	92 e0       	ldi	r25, 0x02	; 2
 34e:	04 d3       	rcall	.+1544   	; 0x958 <_ZN5Print5printEPKc>
 350:	4a e0       	ldi	r20, 0x0A	; 10
			Serial.println(serv3);		
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	63 e1       	ldi	r22, 0x13	; 19
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	19 c0       	rjmp	.+50     	; 0x38c <loop+0xd2>
	data = Serial.read();
	Serial.println(data);
	switch (data)
	{
		case 'A':
			servo1 = Serial.read();
 35a:	86 ef       	ldi	r24, 0xF6	; 246
 35c:	92 e0       	ldi	r25, 0x02	; 2
 35e:	3f d0       	rcall	.+126    	; 0x3de <_ZN14HardwareSerial4readEv>
 360:	6e e7       	ldi	r22, 0x7E	; 126
			serv1 = (int) data -'0';
			Serial.print("Servo 1 value: ");
 362:	72 e0       	ldi	r23, 0x02	; 2
 364:	86 ef       	ldi	r24, 0xF6	; 246
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	f7 d2       	rcall	.+1518   	; 0x958 <_ZN5Print5printEPKc>
 36a:	4a e0       	ldi	r20, 0x0A	; 10
			Serial.println(serv1);
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	61 e1       	ldi	r22, 0x11	; 17
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	0c c0       	rjmp	.+24     	; 0x38c <loop+0xd2>
			break;
			
		case 'B':
			servo2 = Serial.read();
 374:	86 ef       	ldi	r24, 0xF6	; 246
 376:	92 e0       	ldi	r25, 0x02	; 2
 378:	32 d0       	rcall	.+100    	; 0x3de <_ZN14HardwareSerial4readEv>
 37a:	6e e8       	ldi	r22, 0x8E	; 142
			serv2 = (int) data -'0';
			Serial.print("Servo 2 value: ");
 37c:	72 e0       	ldi	r23, 0x02	; 2
 37e:	86 ef       	ldi	r24, 0xF6	; 246
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	ea d2       	rcall	.+1492   	; 0x958 <_ZN5Print5printEPKc>
 384:	4a e0       	ldi	r20, 0x0A	; 10
			Serial.println(serv2);
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	62 e1       	ldi	r22, 0x12	; 18
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	86 ef       	ldi	r24, 0xF6	; 246
 38e:	92 e0       	ldi	r25, 0x02	; 2
// 	}
	



}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
			
		case 'B':
			servo2 = Serial.read();
			serv2 = (int) data -'0';
			Serial.print("Servo 2 value: ");
			Serial.println(serv2);
 394:	9e c3       	rjmp	.+1852   	; 0xad2 <_ZN5Print7printlnEii>
 396:	6d ec       	ldi	r22, 0xCD	; 205
			Serial.print("S3= ");
			Serial.println(serv3);
			break;
		
		default:
			Serial.println("default");		
 398:	72 e0       	ldi	r23, 0x02	; 2
 39a:	86 ef       	ldi	r24, 0xF6	; 246
 39c:	92 e0       	ldi	r25, 0x02	; 2
 39e:	df 91       	pop	r29
// 	}
	



}
 3a0:	cf 91       	pop	r28
 3a2:	e5 c2       	rjmp	.+1482   	; 0x96e <_ZN5Print7printlnEPKc>
			Serial.print("S3= ");
			Serial.println(serv3);
			break;
		
		default:
			Serial.println("default");		
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
// 	}
	



}
 3a8:	08 95       	ret

000003aa <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 3aa:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 3ac:	91 8d       	ldd	r25, Z+25	; 0x19
 3ae:	22 8d       	ldd	r18, Z+26	; 0x1a
 3b0:	89 2f       	mov	r24, r25
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	80 5c       	subi	r24, 0xC0	; 192
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	82 1b       	sub	r24, r18
 3ba:	91 09       	sbc	r25, r1
}
 3bc:	8f 73       	andi	r24, 0x3F	; 63
 3be:	99 27       	eor	r25, r25
 3c0:	08 95       	ret

000003c2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 3c2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 3c4:	91 8d       	ldd	r25, Z+25	; 0x19
 3c6:	82 8d       	ldd	r24, Z+26	; 0x1a
 3c8:	98 17       	cp	r25, r24
 3ca:	31 f0       	breq	.+12     	; 0x3d8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 3cc:	82 8d       	ldd	r24, Z+26	; 0x1a
 3ce:	e8 0f       	add	r30, r24
 3d0:	f1 1d       	adc	r31, r1
 3d2:	85 8d       	ldd	r24, Z+29	; 0x1d
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 3dc:	08 95       	ret

000003de <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 3de:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 3e0:	91 8d       	ldd	r25, Z+25	; 0x19
 3e2:	82 8d       	ldd	r24, Z+26	; 0x1a
 3e4:	98 17       	cp	r25, r24
 3e6:	61 f0       	breq	.+24     	; 0x400 <__LOCK_REGION_LENGTH__>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 3e8:	82 8d       	ldd	r24, Z+26	; 0x1a
 3ea:	df 01       	movw	r26, r30
 3ec:	a8 0f       	add	r26, r24
 3ee:	b1 1d       	adc	r27, r1
 3f0:	5d 96       	adiw	r26, 0x1d	; 29
 3f2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 3f4:	92 8d       	ldd	r25, Z+26	; 0x1a
 3f6:	9f 5f       	subi	r25, 0xFF	; 255
 3f8:	9f 73       	andi	r25, 0x3F	; 63
 3fa:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 404:	08 95       	ret

00000406 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 406:	fc 01       	movw	r30, r24
 408:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 40a:	44 8d       	ldd	r20, Z+28	; 0x1c
 40c:	25 2f       	mov	r18, r21
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	84 2f       	mov	r24, r20
 412:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 414:	82 1b       	sub	r24, r18
 416:	93 0b       	sbc	r25, r19
 418:	54 17       	cp	r21, r20
 41a:	10 f0       	brcs	.+4      	; 0x420 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 41c:	cf 96       	adiw	r24, 0x3f	; 63
 41e:	08 95       	ret
  return tail - head - 1;
 420:	01 97       	sbiw	r24, 0x01	; 1
}
 422:	08 95       	ret

00000424 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 424:	87 e9       	ldi	r24, 0x97	; 151
 426:	93 e0       	ldi	r25, 0x03	; 3
 428:	89 2b       	or	r24, r25
 42a:	39 f0       	breq	.+14     	; 0x43a <_Z14serialEventRunv+0x16>
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	89 2b       	or	r24, r25
 432:	19 f0       	breq	.+6      	; 0x43a <_Z14serialEventRunv+0x16>
 434:	7c d1       	rcall	.+760    	; 0x72e <_Z17Serial0_availablev>
 436:	81 11       	cpse	r24, r1
 438:	24 c0       	rjmp	.+72     	; 0x482 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	89 2b       	or	r24, r25
 440:	41 f0       	breq	.+16     	; 0x452 <_Z14serialEventRunv+0x2e>
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	89 2b       	or	r24, r25
 448:	21 f0       	breq	.+8      	; 0x452 <_Z14serialEventRunv+0x2e>
 44a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 44e:	81 11       	cpse	r24, r1
 450:	1b c0       	rjmp	.+54     	; 0x488 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	89 2b       	or	r24, r25
 458:	41 f0       	breq	.+16     	; 0x46a <_Z14serialEventRunv+0x46>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	89 2b       	or	r24, r25
 460:	21 f0       	breq	.+8      	; 0x46a <_Z14serialEventRunv+0x46>
 462:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 466:	81 11       	cpse	r24, r1
 468:	12 c0       	rjmp	.+36     	; 0x48e <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 46a:	8c e2       	ldi	r24, 0x2C	; 44
 46c:	94 e0       	ldi	r25, 0x04	; 4
 46e:	89 2b       	or	r24, r25
 470:	99 f0       	breq	.+38     	; 0x498 <_Z14serialEventRunv+0x74>
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	89 2b       	or	r24, r25
 478:	79 f0       	breq	.+30     	; 0x498 <_Z14serialEventRunv+0x74>
 47a:	ee d1       	rcall	.+988    	; 0x858 <_Z17Serial3_availablev>
 47c:	81 11       	cpse	r24, r1
 47e:	0a c0       	rjmp	.+20     	; 0x494 <_Z14serialEventRunv+0x70>
 480:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 482:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 486:	d9 cf       	rjmp	.-78     	; 0x43a <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 488:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 48c:	e2 cf       	rjmp	.-60     	; 0x452 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 48e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 492:	eb cf       	rjmp	.-42     	; 0x46a <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 494:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 498:	08 95       	ret

0000049a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 49a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 49c:	84 8d       	ldd	r24, Z+28	; 0x1c
 49e:	df 01       	movw	r26, r30
 4a0:	a8 0f       	add	r26, r24
 4a2:	b1 1d       	adc	r27, r1
 4a4:	a3 5a       	subi	r26, 0xA3	; 163
 4a6:	bf 4f       	sbci	r27, 0xFF	; 255
 4a8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 4aa:	84 8d       	ldd	r24, Z+28	; 0x1c
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	8f 73       	andi	r24, 0x3F	; 63
 4b2:	99 27       	eor	r25, r25
 4b4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 4b6:	a6 89       	ldd	r26, Z+22	; 0x16
 4b8:	b7 89       	ldd	r27, Z+23	; 0x17
 4ba:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 4bc:	a0 89       	ldd	r26, Z+16	; 0x10
 4be:	b1 89       	ldd	r27, Z+17	; 0x11
 4c0:	8c 91       	ld	r24, X
 4c2:	80 64       	ori	r24, 0x40	; 64
 4c4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 4c6:	93 8d       	ldd	r25, Z+27	; 0x1b
 4c8:	84 8d       	ldd	r24, Z+28	; 0x1c
 4ca:	98 13       	cpse	r25, r24
 4cc:	06 c0       	rjmp	.+12     	; 0x4da <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 4ce:	02 88       	ldd	r0, Z+18	; 0x12
 4d0:	f3 89       	ldd	r31, Z+19	; 0x13
 4d2:	e0 2d       	mov	r30, r0
 4d4:	80 81       	ld	r24, Z
 4d6:	8f 7d       	andi	r24, 0xDF	; 223
 4d8:	80 83       	st	Z, r24
 4da:	08 95       	ret

000004dc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	ec 01       	movw	r28, r24
  _written = true;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 4ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
 4f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4f2:	98 13       	cpse	r25, r24
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <_ZN14HardwareSerial5writeEh+0x24>
 4f6:	e8 89       	ldd	r30, Y+16	; 0x10
 4f8:	f9 89       	ldd	r31, Y+17	; 0x11
 4fa:	80 81       	ld	r24, Z
 4fc:	85 fd       	sbrc	r24, 5
 4fe:	23 c0       	rjmp	.+70     	; 0x546 <_ZN14HardwareSerial5writeEh+0x6a>
 500:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 502:	0b 8d       	ldd	r16, Y+27	; 0x1b
 504:	10 e0       	ldi	r17, 0x00	; 0
 506:	0f 5f       	subi	r16, 0xFF	; 255
 508:	1f 4f       	sbci	r17, 0xFF	; 255
 50a:	0f 73       	andi	r16, 0x3F	; 63
 50c:	11 27       	eor	r17, r17
 50e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 510:	8c 8d       	ldd	r24, Y+28	; 0x1c
 512:	e8 12       	cpse	r14, r24
 514:	0b c0       	rjmp	.+22     	; 0x52c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	07 fc       	sbrc	r0, 7
 51a:	fa cf       	rjmp	.-12     	; 0x510 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 51c:	e8 89       	ldd	r30, Y+16	; 0x10
 51e:	f9 89       	ldd	r31, Y+17	; 0x11
 520:	80 81       	ld	r24, Z
 522:	85 ff       	sbrs	r24, 5
 524:	f5 cf       	rjmp	.-22     	; 0x510 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 526:	ce 01       	movw	r24, r28
 528:	b8 df       	rcall	.-144    	; 0x49a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 52a:	f2 cf       	rjmp	.-28     	; 0x510 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 52c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 52e:	fe 01       	movw	r30, r28
 530:	e8 0f       	add	r30, r24
 532:	f1 1d       	adc	r31, r1
 534:	e3 5a       	subi	r30, 0xA3	; 163
 536:	ff 4f       	sbci	r31, 0xFF	; 255
 538:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 53a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 53c:	ea 89       	ldd	r30, Y+18	; 0x12
 53e:	fb 89       	ldd	r31, Y+19	; 0x13
 540:	80 81       	ld	r24, Z
 542:	80 62       	ori	r24, 0x20	; 32
 544:	07 c0       	rjmp	.+14     	; 0x554 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 546:	ee 89       	ldd	r30, Y+22	; 0x16
 548:	ff 89       	ldd	r31, Y+23	; 0x17
 54a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 54c:	e8 89       	ldd	r30, Y+16	; 0x10
 54e:	f9 89       	ldd	r31, Y+17	; 0x11
 550:	80 81       	ld	r24, Z
 552:	80 64       	ori	r24, 0x40	; 64
 554:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	08 95       	ret

00000568 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 56e:	88 8d       	ldd	r24, Y+24	; 0x18
 570:	88 23       	and	r24, r24
 572:	c1 f0       	breq	.+48     	; 0x5a4 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 574:	ea 89       	ldd	r30, Y+18	; 0x12
 576:	fb 89       	ldd	r31, Y+19	; 0x13
 578:	80 81       	ld	r24, Z
 57a:	85 fd       	sbrc	r24, 5
 57c:	05 c0       	rjmp	.+10     	; 0x588 <_ZN14HardwareSerial5flushEv+0x20>
 57e:	a8 89       	ldd	r26, Y+16	; 0x10
 580:	b9 89       	ldd	r27, Y+17	; 0x11
 582:	8c 91       	ld	r24, X
 584:	86 fd       	sbrc	r24, 6
 586:	0e c0       	rjmp	.+28     	; 0x5a4 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	07 fc       	sbrc	r0, 7
 58c:	f5 cf       	rjmp	.-22     	; 0x578 <_ZN14HardwareSerial5flushEv+0x10>
 58e:	80 81       	ld	r24, Z
 590:	85 ff       	sbrs	r24, 5
 592:	f2 cf       	rjmp	.-28     	; 0x578 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 594:	a8 89       	ldd	r26, Y+16	; 0x10
 596:	b9 89       	ldd	r27, Y+17	; 0x11
 598:	8c 91       	ld	r24, X
 59a:	85 ff       	sbrs	r24, 5
 59c:	ed cf       	rjmp	.-38     	; 0x578 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 59e:	ce 01       	movw	r24, r28
 5a0:	7c df       	rcall	.-264    	; 0x49a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 5a2:	e8 cf       	rjmp	.-48     	; 0x574 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 5aa:	cf 92       	push	r12
 5ac:	df 92       	push	r13
 5ae:	ef 92       	push	r14
 5b0:	ff 92       	push	r15
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	ec 01       	movw	r28, r24
 5ba:	6a 01       	movw	r12, r20
 5bc:	7b 01       	movw	r14, r22
 5be:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 5c0:	e8 89       	ldd	r30, Y+16	; 0x10
 5c2:	f9 89       	ldd	r31, Y+17	; 0x11
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5c8:	41 15       	cp	r20, r1
 5ca:	51 4e       	sbci	r21, 0xE1	; 225
 5cc:	61 05       	cpc	r22, r1
 5ce:	71 05       	cpc	r23, r1
 5d0:	a9 f0       	breq	.+42     	; 0x5fc <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	79 e0       	ldi	r23, 0x09	; 9
 5d6:	8d e3       	ldi	r24, 0x3D	; 61
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	a7 01       	movw	r20, r14
 5dc:	96 01       	movw	r18, r12
 5de:	f4 d3       	rcall	.+2024   	; 0xdc8 <__udivmodsi4>
 5e0:	da 01       	movw	r26, r20
 5e2:	c9 01       	movw	r24, r18
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	a1 09       	sbc	r26, r1
 5e8:	b1 09       	sbc	r27, r1
 5ea:	b6 95       	lsr	r27
 5ec:	a7 95       	ror	r26
 5ee:	97 95       	ror	r25
 5f0:	87 95       	ror	r24
 5f2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5f4:	21 15       	cp	r18, r1
 5f6:	80 e1       	ldi	r24, 0x10	; 16
 5f8:	38 07       	cpc	r19, r24
 5fa:	a0 f0       	brcs	.+40     	; 0x624 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 5fc:	e8 89       	ldd	r30, Y+16	; 0x10
 5fe:	f9 89       	ldd	r31, Y+17	; 0x11
 600:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 602:	60 e8       	ldi	r22, 0x80	; 128
 604:	74 e8       	ldi	r23, 0x84	; 132
 606:	8e e1       	ldi	r24, 0x1E	; 30
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	a7 01       	movw	r20, r14
 60c:	96 01       	movw	r18, r12
 60e:	dc d3       	rcall	.+1976   	; 0xdc8 <__udivmodsi4>
 610:	da 01       	movw	r26, r20
 612:	c9 01       	movw	r24, r18
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	a1 09       	sbc	r26, r1
 618:	b1 09       	sbc	r27, r1
 61a:	b6 95       	lsr	r27
 61c:	a7 95       	ror	r26
 61e:	97 95       	ror	r25
 620:	87 95       	ror	r24
 622:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 624:	ec 85       	ldd	r30, Y+12	; 0x0c
 626:	fd 85       	ldd	r31, Y+13	; 0x0d
 628:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 62a:	ee 85       	ldd	r30, Y+14	; 0x0e
 62c:	ff 85       	ldd	r31, Y+15	; 0x0f
 62e:	20 83       	st	Z, r18

  _written = false;
 630:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 632:	ec 89       	ldd	r30, Y+20	; 0x14
 634:	fd 89       	ldd	r31, Y+21	; 0x15
 636:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 638:	ea 89       	ldd	r30, Y+18	; 0x12
 63a:	fb 89       	ldd	r31, Y+19	; 0x13
 63c:	80 81       	ld	r24, Z
 63e:	80 61       	ori	r24, 0x10	; 16
 640:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 642:	ea 89       	ldd	r30, Y+18	; 0x12
 644:	fb 89       	ldd	r31, Y+19	; 0x13
 646:	80 81       	ld	r24, Z
 648:	88 60       	ori	r24, 0x08	; 8
 64a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 64c:	ea 89       	ldd	r30, Y+18	; 0x12
 64e:	fb 89       	ldd	r31, Y+19	; 0x13
 650:	80 81       	ld	r24, Z
 652:	80 68       	ori	r24, 0x80	; 128
 654:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 656:	ea 89       	ldd	r30, Y+18	; 0x12
 658:	fb 89       	ldd	r31, Y+19	; 0x13
 65a:	80 81       	ld	r24, Z
 65c:	8f 7d       	andi	r24, 0xDF	; 223
 65e:	80 83       	st	Z, r24
}
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	ff 90       	pop	r15
 668:	ef 90       	pop	r14
 66a:	df 90       	pop	r13
 66c:	cf 90       	pop	r12
 66e:	08 95       	ret

00000670 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	0b b6       	in	r0, 0x3b	; 59
 67c:	0f 92       	push	r0
 67e:	2f 93       	push	r18
 680:	8f 93       	push	r24
 682:	9f 93       	push	r25
 684:	ef 93       	push	r30
 686:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 688:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <__data_end+0x10>
 68c:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <__data_end+0x11>
 690:	80 81       	ld	r24, Z
 692:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <__data_end+0x16>
 696:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <__data_end+0x17>
 69a:	82 fd       	sbrc	r24, 2
 69c:	12 c0       	rjmp	.+36     	; 0x6c2 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 69e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 6a0:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <__data_end+0x19>
 6a4:	8f 5f       	subi	r24, 0xFF	; 255
 6a6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 6a8:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <__data_end+0x1a>
 6ac:	82 17       	cp	r24, r18
 6ae:	51 f0       	breq	.+20     	; 0x6c4 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 6b0:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <__data_end+0x19>
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	ea 50       	subi	r30, 0x0A	; 10
 6b8:	fd 4f       	sbci	r31, 0xFD	; 253
 6ba:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 6bc:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <__data_end+0x19>
 6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 6c2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 6c4:	ff 91       	pop	r31
 6c6:	ef 91       	pop	r30
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	2f 91       	pop	r18
 6ce:	0f 90       	pop	r0
 6d0:	0b be       	out	0x3b, r0	; 59
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	0f 90       	pop	r0
 6d8:	1f 90       	pop	r1
 6da:	18 95       	reti

000006dc <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 6dc:	1f 92       	push	r1
 6de:	0f 92       	push	r0
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	0f 92       	push	r0
 6e4:	11 24       	eor	r1, r1
 6e6:	0b b6       	in	r0, 0x3b	; 59
 6e8:	0f 92       	push	r0
 6ea:	2f 93       	push	r18
 6ec:	3f 93       	push	r19
 6ee:	4f 93       	push	r20
 6f0:	5f 93       	push	r21
 6f2:	6f 93       	push	r22
 6f4:	7f 93       	push	r23
 6f6:	8f 93       	push	r24
 6f8:	9f 93       	push	r25
 6fa:	af 93       	push	r26
 6fc:	bf 93       	push	r27
 6fe:	ef 93       	push	r30
 700:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 702:	86 ef       	ldi	r24, 0xF6	; 246
 704:	92 e0       	ldi	r25, 0x02	; 2
 706:	c9 de       	rcall	.-622    	; 0x49a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 708:	ff 91       	pop	r31
 70a:	ef 91       	pop	r30
 70c:	bf 91       	pop	r27
 70e:	af 91       	pop	r26
 710:	9f 91       	pop	r25
 712:	8f 91       	pop	r24
 714:	7f 91       	pop	r23
 716:	6f 91       	pop	r22
 718:	5f 91       	pop	r21
 71a:	4f 91       	pop	r20
 71c:	3f 91       	pop	r19
 71e:	2f 91       	pop	r18
 720:	0f 90       	pop	r0
 722:	0b be       	out	0x3b, r0	; 59
 724:	0f 90       	pop	r0
 726:	0f be       	out	0x3f, r0	; 63
 728:	0f 90       	pop	r0
 72a:	1f 90       	pop	r1
 72c:	18 95       	reti

0000072e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 72e:	86 ef       	ldi	r24, 0xF6	; 246
 730:	92 e0       	ldi	r25, 0x02	; 2
 732:	3b de       	rcall	.-906    	; 0x3aa <_ZN14HardwareSerial9availableEv>
 734:	21 e0       	ldi	r18, 0x01	; 1
 736:	89 2b       	or	r24, r25
 738:	09 f4       	brne	.+2      	; 0x73c <_Z17Serial0_availablev+0xe>
 73a:	20 e0       	ldi	r18, 0x00	; 0
}
 73c:	82 2f       	mov	r24, r18
 73e:	08 95       	ret

00000740 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 740:	e6 ef       	ldi	r30, 0xF6	; 246
 742:	f2 e0       	ldi	r31, 0x02	; 2
 744:	13 82       	std	Z+3, r1	; 0x03
 746:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 748:	88 ee       	ldi	r24, 0xE8	; 232
 74a:	93 e0       	ldi	r25, 0x03	; 3
 74c:	a0 e0       	ldi	r26, 0x00	; 0
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	84 83       	std	Z+4, r24	; 0x04
 752:	95 83       	std	Z+5, r25	; 0x05
 754:	a6 83       	std	Z+6, r26	; 0x06
 756:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 758:	89 ed       	ldi	r24, 0xD9	; 217
 75a:	92 e0       	ldi	r25, 0x02	; 2
 75c:	91 83       	std	Z+1, r25	; 0x01
 75e:	80 83       	st	Z, r24
 760:	85 ec       	ldi	r24, 0xC5	; 197
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	95 87       	std	Z+13, r25	; 0x0d
 766:	84 87       	std	Z+12, r24	; 0x0c
 768:	84 ec       	ldi	r24, 0xC4	; 196
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	97 87       	std	Z+15, r25	; 0x0f
 76e:	86 87       	std	Z+14, r24	; 0x0e
 770:	80 ec       	ldi	r24, 0xC0	; 192
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	91 8b       	std	Z+17, r25	; 0x11
 776:	80 8b       	std	Z+16, r24	; 0x10
 778:	81 ec       	ldi	r24, 0xC1	; 193
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	93 8b       	std	Z+19, r25	; 0x13
 77e:	82 8b       	std	Z+18, r24	; 0x12
 780:	82 ec       	ldi	r24, 0xC2	; 194
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	95 8b       	std	Z+21, r25	; 0x15
 786:	84 8b       	std	Z+20, r24	; 0x14
 788:	86 ec       	ldi	r24, 0xC6	; 198
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	97 8b       	std	Z+23, r25	; 0x17
 78e:	86 8b       	std	Z+22, r24	; 0x16
 790:	11 8e       	std	Z+25, r1	; 0x19
 792:	12 8e       	std	Z+26, r1	; 0x1a
 794:	13 8e       	std	Z+27, r1	; 0x1b
 796:	14 8e       	std	Z+28, r1	; 0x1c
 798:	08 95       	ret

0000079a <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
 79a:	1f 92       	push	r1
 79c:	0f 92       	push	r0
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	0f 92       	push	r0
 7a2:	11 24       	eor	r1, r1
 7a4:	0b b6       	in	r0, 0x3b	; 59
 7a6:	0f 92       	push	r0
 7a8:	2f 93       	push	r18
 7aa:	8f 93       	push	r24
 7ac:	9f 93       	push	r25
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 7b2:	e0 91 a3 03 	lds	r30, 0x03A3	; 0x8003a3 <Serial3+0x10>
 7b6:	f0 91 a4 03 	lds	r31, 0x03A4	; 0x8003a4 <Serial3+0x11>
 7ba:	80 81       	ld	r24, Z
 7bc:	e0 91 a9 03 	lds	r30, 0x03A9	; 0x8003a9 <Serial3+0x16>
 7c0:	f0 91 aa 03 	lds	r31, 0x03AA	; 0x8003aa <Serial3+0x17>
 7c4:	82 fd       	sbrc	r24, 2
 7c6:	12 c0       	rjmp	.+36     	; 0x7ec <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 7c8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 7ca:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <Serial3+0x19>
 7ce:	8f 5f       	subi	r24, 0xFF	; 255
 7d0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 7d2:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <Serial3+0x1a>
 7d6:	82 17       	cp	r24, r18
 7d8:	51 f0       	breq	.+20     	; 0x7ee <__vector_54+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 7da:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <Serial3+0x19>
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	ed 56       	subi	r30, 0x6D	; 109
 7e2:	fc 4f       	sbci	r31, 0xFC	; 252
 7e4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 7e6:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <Serial3+0x19>
 7ea:	01 c0       	rjmp	.+2      	; 0x7ee <__vector_54+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 7ec:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
 7ee:	ff 91       	pop	r31
 7f0:	ef 91       	pop	r30
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	2f 91       	pop	r18
 7f8:	0f 90       	pop	r0
 7fa:	0b be       	out	0x3b, r0	; 59
 7fc:	0f 90       	pop	r0
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	0f 90       	pop	r0
 802:	1f 90       	pop	r1
 804:	18 95       	reti

00000806 <__vector_55>:

ISR(USART3_UDRE_vect)
{
 806:	1f 92       	push	r1
 808:	0f 92       	push	r0
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	0f 92       	push	r0
 80e:	11 24       	eor	r1, r1
 810:	0b b6       	in	r0, 0x3b	; 59
 812:	0f 92       	push	r0
 814:	2f 93       	push	r18
 816:	3f 93       	push	r19
 818:	4f 93       	push	r20
 81a:	5f 93       	push	r21
 81c:	6f 93       	push	r22
 81e:	7f 93       	push	r23
 820:	8f 93       	push	r24
 822:	9f 93       	push	r25
 824:	af 93       	push	r26
 826:	bf 93       	push	r27
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
 82c:	83 e9       	ldi	r24, 0x93	; 147
 82e:	93 e0       	ldi	r25, 0x03	; 3
 830:	34 de       	rcall	.-920    	; 0x49a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 832:	ff 91       	pop	r31
 834:	ef 91       	pop	r30
 836:	bf 91       	pop	r27
 838:	af 91       	pop	r26
 83a:	9f 91       	pop	r25
 83c:	8f 91       	pop	r24
 83e:	7f 91       	pop	r23
 840:	6f 91       	pop	r22
 842:	5f 91       	pop	r21
 844:	4f 91       	pop	r20
 846:	3f 91       	pop	r19
 848:	2f 91       	pop	r18
 84a:	0f 90       	pop	r0
 84c:	0b be       	out	0x3b, r0	; 59
 84e:	0f 90       	pop	r0
 850:	0f be       	out	0x3f, r0	; 63
 852:	0f 90       	pop	r0
 854:	1f 90       	pop	r1
 856:	18 95       	reti

00000858 <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
 858:	83 e9       	ldi	r24, 0x93	; 147
 85a:	93 e0       	ldi	r25, 0x03	; 3
 85c:	a6 dd       	rcall	.-1204   	; 0x3aa <_ZN14HardwareSerial9availableEv>
 85e:	21 e0       	ldi	r18, 0x01	; 1
 860:	89 2b       	or	r24, r25
 862:	09 f4       	brne	.+2      	; 0x866 <_Z17Serial3_availablev+0xe>
 864:	20 e0       	ldi	r18, 0x00	; 0
}
 866:	82 2f       	mov	r24, r18
 868:	08 95       	ret

0000086a <_GLOBAL__sub_I___vector_54>:
 86a:	e3 e9       	ldi	r30, 0x93	; 147
 86c:	f3 e0       	ldi	r31, 0x03	; 3
 86e:	13 82       	std	Z+3, r1	; 0x03
 870:	12 82       	std	Z+2, r1	; 0x02
 872:	88 ee       	ldi	r24, 0xE8	; 232
 874:	93 e0       	ldi	r25, 0x03	; 3
 876:	a0 e0       	ldi	r26, 0x00	; 0
 878:	b0 e0       	ldi	r27, 0x00	; 0
 87a:	84 83       	std	Z+4, r24	; 0x04
 87c:	95 83       	std	Z+5, r25	; 0x05
 87e:	a6 83       	std	Z+6, r26	; 0x06
 880:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 882:	89 ed       	ldi	r24, 0xD9	; 217
 884:	92 e0       	ldi	r25, 0x02	; 2
 886:	91 83       	std	Z+1, r25	; 0x01
 888:	80 83       	st	Z, r24
 88a:	85 e3       	ldi	r24, 0x35	; 53
 88c:	91 e0       	ldi	r25, 0x01	; 1
 88e:	95 87       	std	Z+13, r25	; 0x0d
 890:	84 87       	std	Z+12, r24	; 0x0c
 892:	84 e3       	ldi	r24, 0x34	; 52
 894:	91 e0       	ldi	r25, 0x01	; 1
 896:	97 87       	std	Z+15, r25	; 0x0f
 898:	86 87       	std	Z+14, r24	; 0x0e
 89a:	80 e3       	ldi	r24, 0x30	; 48
 89c:	91 e0       	ldi	r25, 0x01	; 1
 89e:	91 8b       	std	Z+17, r25	; 0x11
 8a0:	80 8b       	std	Z+16, r24	; 0x10
 8a2:	81 e3       	ldi	r24, 0x31	; 49
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	93 8b       	std	Z+19, r25	; 0x13
 8a8:	82 8b       	std	Z+18, r24	; 0x12
 8aa:	82 e3       	ldi	r24, 0x32	; 50
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	95 8b       	std	Z+21, r25	; 0x15
 8b0:	84 8b       	std	Z+20, r24	; 0x14
 8b2:	86 e3       	ldi	r24, 0x36	; 54
 8b4:	91 e0       	ldi	r25, 0x01	; 1
 8b6:	97 8b       	std	Z+23, r25	; 0x17
 8b8:	86 8b       	std	Z+22, r24	; 0x16
 8ba:	11 8e       	std	Z+25, r1	; 0x19
 8bc:	12 8e       	std	Z+26, r1	; 0x1a
 8be:	13 8e       	std	Z+27, r1	; 0x1b
 8c0:	14 8e       	std	Z+28, r1	; 0x1c
 8c2:	08 95       	ret

000008c4 <initVariant>:
 8c4:	08 95       	ret

000008c6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 8c6:	5f d1       	rcall	.+702    	; 0xb86 <init>

	initVariant();
 8c8:	fd df       	rcall	.-6      	; 0x8c4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 8ca:	d2 dc       	rcall	.-1628   	; 0x270 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 8cc:	c2 e1       	ldi	r28, 0x12	; 18
 8ce:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 8d0:	f4 dc       	rcall	.-1560   	; 0x2ba <loop>
		if (serialEventRun) serialEventRun();
 8d2:	20 97       	sbiw	r28, 0x00	; 0
 8d4:	e9 f3       	breq	.-6      	; 0x8d0 <main+0xa>
 8d6:	a6 dd       	rcall	.-1204   	; 0x424 <_Z14serialEventRunv>
 8d8:	fb cf       	rjmp	.-10     	; 0x8d0 <main+0xa>

000008da <_ZN5Print5writeEPKhj>:
 8da:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 8dc:	df 92       	push	r13
 8de:	ef 92       	push	r14
 8e0:	ff 92       	push	r15
 8e2:	0f 93       	push	r16
 8e4:	1f 93       	push	r17
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	6c 01       	movw	r12, r24
 8ec:	7a 01       	movw	r14, r20
 8ee:	8b 01       	movw	r16, r22
 8f0:	c0 e0       	ldi	r28, 0x00	; 0
 8f2:	d0 e0       	ldi	r29, 0x00	; 0
 8f4:	ce 15       	cp	r28, r14
 8f6:	df 05       	cpc	r29, r15
 8f8:	81 f0       	breq	.+32     	; 0x91a <_ZN5Print5writeEPKhj+0x40>
 8fa:	d8 01       	movw	r26, r16
 8fc:	6d 91       	ld	r22, X+
 8fe:	8d 01       	movw	r16, r26
 900:	d6 01       	movw	r26, r12
 902:	ed 91       	ld	r30, X+
 904:	fc 91       	ld	r31, X
 906:	01 90       	ld	r0, Z+
 908:	f0 81       	ld	r31, Z
 90a:	e0 2d       	mov	r30, r0
 90c:	c6 01       	movw	r24, r12
 90e:	19 95       	eicall
 910:	89 2b       	or	r24, r25
 912:	11 f0       	breq	.+4      	; 0x918 <_ZN5Print5writeEPKhj+0x3e>
 914:	21 96       	adiw	r28, 0x01	; 1
 916:	ee cf       	rjmp	.-36     	; 0x8f4 <_ZN5Print5writeEPKhj+0x1a>
 918:	7e 01       	movw	r14, r28
 91a:	c7 01       	movw	r24, r14
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	1f 91       	pop	r17
 922:	0f 91       	pop	r16
 924:	ff 90       	pop	r15
 926:	ef 90       	pop	r14
 928:	df 90       	pop	r13
 92a:	cf 90       	pop	r12
 92c:	08 95       	ret

0000092e <_ZN5Print5writeEPKc>:
 92e:	61 15       	cp	r22, r1
 930:	71 05       	cpc	r23, r1
 932:	79 f0       	breq	.+30     	; 0x952 <_ZN5Print5writeEPKc+0x24>
 934:	fb 01       	movw	r30, r22
 936:	01 90       	ld	r0, Z+
 938:	00 20       	and	r0, r0
 93a:	e9 f7       	brne	.-6      	; 0x936 <_ZN5Print5writeEPKc+0x8>
 93c:	31 97       	sbiw	r30, 0x01	; 1
 93e:	af 01       	movw	r20, r30
 940:	46 1b       	sub	r20, r22
 942:	57 0b       	sbc	r21, r23
 944:	dc 01       	movw	r26, r24
 946:	ed 91       	ld	r30, X+
 948:	fc 91       	ld	r31, X
 94a:	02 80       	ldd	r0, Z+2	; 0x02
 94c:	f3 81       	ldd	r31, Z+3	; 0x03
 94e:	e0 2d       	mov	r30, r0
 950:	19 94       	eijmp
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	08 95       	ret

00000958 <_ZN5Print5printEPKc>:
 958:	ea cf       	rjmp	.-44     	; 0x92e <_ZN5Print5writeEPKc>

0000095a <_ZN5Print5printEc>:
 95a:	dc 01       	movw	r26, r24
 95c:	ed 91       	ld	r30, X+
 95e:	fc 91       	ld	r31, X
 960:	01 90       	ld	r0, Z+
 962:	f0 81       	ld	r31, Z
 964:	e0 2d       	mov	r30, r0
 966:	19 94       	eijmp

00000968 <_ZN5Print7printlnEv>:
 968:	67 ee       	ldi	r22, 0xE7	; 231
 96a:	72 e0       	ldi	r23, 0x02	; 2
 96c:	e0 cf       	rjmp	.-64     	; 0x92e <_ZN5Print5writeEPKc>

0000096e <_ZN5Print7printlnEPKc>:
 96e:	0f 93       	push	r16
 970:	1f 93       	push	r17
 972:	cf 93       	push	r28
 974:	df 93       	push	r29
 976:	ec 01       	movw	r28, r24
 978:	da df       	rcall	.-76     	; 0x92e <_ZN5Print5writeEPKc>
 97a:	8c 01       	movw	r16, r24
 97c:	ce 01       	movw	r24, r28
 97e:	f4 df       	rcall	.-24     	; 0x968 <_ZN5Print7printlnEv>
 980:	80 0f       	add	r24, r16
 982:	91 1f       	adc	r25, r17
 984:	df 91       	pop	r29
 986:	cf 91       	pop	r28
 988:	1f 91       	pop	r17
 98a:	0f 91       	pop	r16
 98c:	08 95       	ret

0000098e <_ZN5Print7printlnEc>:
 98e:	0f 93       	push	r16
 990:	1f 93       	push	r17
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	ec 01       	movw	r28, r24
 998:	e0 df       	rcall	.-64     	; 0x95a <_ZN5Print5printEc>
 99a:	8c 01       	movw	r16, r24
 99c:	ce 01       	movw	r24, r28
 99e:	e4 df       	rcall	.-56     	; 0x968 <_ZN5Print7printlnEv>
 9a0:	80 0f       	add	r24, r16
 9a2:	91 1f       	adc	r25, r17
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	1f 91       	pop	r17
 9aa:	0f 91       	pop	r16
 9ac:	08 95       	ret

000009ae <_ZN5Print11printNumberEmh>:
 9ae:	8f 92       	push	r8
 9b0:	9f 92       	push	r9
 9b2:	af 92       	push	r10
 9b4:	bf 92       	push	r11
 9b6:	ef 92       	push	r14
 9b8:	ff 92       	push	r15
 9ba:	0f 93       	push	r16
 9bc:	1f 93       	push	r17
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	cd b7       	in	r28, 0x3d	; 61
 9c4:	de b7       	in	r29, 0x3e	; 62
 9c6:	a1 97       	sbiw	r28, 0x21	; 33
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	7c 01       	movw	r14, r24
 9d4:	fa 01       	movw	r30, r20
 9d6:	cb 01       	movw	r24, r22
 9d8:	19 a2       	std	Y+33, r1	; 0x21
 9da:	22 30       	cpi	r18, 0x02	; 2
 9dc:	08 f4       	brcc	.+2      	; 0x9e0 <_ZN5Print11printNumberEmh+0x32>
 9de:	2a e0       	ldi	r18, 0x0A	; 10
 9e0:	8e 01       	movw	r16, r28
 9e2:	0f 5d       	subi	r16, 0xDF	; 223
 9e4:	1f 4f       	sbci	r17, 0xFF	; 255
 9e6:	82 2e       	mov	r8, r18
 9e8:	91 2c       	mov	r9, r1
 9ea:	a1 2c       	mov	r10, r1
 9ec:	b1 2c       	mov	r11, r1
 9ee:	bf 01       	movw	r22, r30
 9f0:	a5 01       	movw	r20, r10
 9f2:	94 01       	movw	r18, r8
 9f4:	e9 d1       	rcall	.+978    	; 0xdc8 <__udivmodsi4>
 9f6:	f9 01       	movw	r30, r18
 9f8:	ca 01       	movw	r24, r20
 9fa:	01 50       	subi	r16, 0x01	; 1
 9fc:	11 09       	sbc	r17, r1
 9fe:	6a 30       	cpi	r22, 0x0A	; 10
 a00:	10 f4       	brcc	.+4      	; 0xa06 <_ZN5Print11printNumberEmh+0x58>
 a02:	60 5d       	subi	r22, 0xD0	; 208
 a04:	01 c0       	rjmp	.+2      	; 0xa08 <_ZN5Print11printNumberEmh+0x5a>
 a06:	69 5c       	subi	r22, 0xC9	; 201
 a08:	d8 01       	movw	r26, r16
 a0a:	6c 93       	st	X, r22
 a0c:	23 2b       	or	r18, r19
 a0e:	24 2b       	or	r18, r20
 a10:	25 2b       	or	r18, r21
 a12:	69 f7       	brne	.-38     	; 0x9ee <_ZN5Print11printNumberEmh+0x40>
 a14:	b8 01       	movw	r22, r16
 a16:	c7 01       	movw	r24, r14
 a18:	8a df       	rcall	.-236    	; 0x92e <_ZN5Print5writeEPKc>
 a1a:	a1 96       	adiw	r28, 0x21	; 33
 a1c:	0f b6       	in	r0, 0x3f	; 63
 a1e:	f8 94       	cli
 a20:	de bf       	out	0x3e, r29	; 62
 a22:	0f be       	out	0x3f, r0	; 63
 a24:	cd bf       	out	0x3d, r28	; 61
 a26:	df 91       	pop	r29
 a28:	cf 91       	pop	r28
 a2a:	1f 91       	pop	r17
 a2c:	0f 91       	pop	r16
 a2e:	ff 90       	pop	r15
 a30:	ef 90       	pop	r14
 a32:	bf 90       	pop	r11
 a34:	af 90       	pop	r10
 a36:	9f 90       	pop	r9
 a38:	8f 90       	pop	r8
 a3a:	08 95       	ret

00000a3c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 a3c:	cf 92       	push	r12
 a3e:	df 92       	push	r13
 a40:	ef 92       	push	r14
 a42:	ff 92       	push	r15
 a44:	0f 93       	push	r16
 a46:	1f 93       	push	r17
 a48:	cf 93       	push	r28
 a4a:	df 93       	push	r29
  if (base == 0) {
 a4c:	21 15       	cp	r18, r1
 a4e:	31 05       	cpc	r19, r1
 a50:	81 f4       	brne	.+32     	; 0xa72 <_ZN5Print5printEli+0x36>
    return write(n);
 a52:	dc 01       	movw	r26, r24
 a54:	ed 91       	ld	r30, X+
 a56:	fc 91       	ld	r31, X
 a58:	01 90       	ld	r0, Z+
 a5a:	f0 81       	ld	r31, Z
 a5c:	e0 2d       	mov	r30, r0
 a5e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	1f 91       	pop	r17
 a66:	0f 91       	pop	r16
 a68:	ff 90       	pop	r15
 a6a:	ef 90       	pop	r14
 a6c:	df 90       	pop	r13
 a6e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 a70:	19 94       	eijmp
  } else if (base == 10) {
 a72:	2a 30       	cpi	r18, 0x0A	; 10
 a74:	31 05       	cpc	r19, r1
 a76:	f1 f4       	brne	.+60     	; 0xab4 <_ZN5Print5printEli+0x78>
    if (n < 0) {
 a78:	77 ff       	sbrs	r23, 7
 a7a:	1b c0       	rjmp	.+54     	; 0xab2 <_ZN5Print5printEli+0x76>
 a7c:	6a 01       	movw	r12, r20
 a7e:	7b 01       	movw	r14, r22
 a80:	ec 01       	movw	r28, r24
      int t = print('-');
 a82:	6d e2       	ldi	r22, 0x2D	; 45
 a84:	6a df       	rcall	.-300    	; 0x95a <_ZN5Print5printEc>
 a86:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 a88:	44 27       	eor	r20, r20
 a8a:	55 27       	eor	r21, r21
 a8c:	ba 01       	movw	r22, r20
 a8e:	4c 19       	sub	r20, r12
 a90:	5d 09       	sbc	r21, r13
 a92:	6e 09       	sbc	r22, r14
 a94:	7f 09       	sbc	r23, r15
 a96:	2a e0       	ldi	r18, 0x0A	; 10
 a98:	ce 01       	movw	r24, r28
 a9a:	89 df       	rcall	.-238    	; 0x9ae <_ZN5Print11printNumberEmh>
 a9c:	80 0f       	add	r24, r16
 a9e:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 aa0:	df 91       	pop	r29
 aa2:	cf 91       	pop	r28
 aa4:	1f 91       	pop	r17
 aa6:	0f 91       	pop	r16
 aa8:	ff 90       	pop	r15
 aaa:	ef 90       	pop	r14
 aac:	df 90       	pop	r13
 aae:	cf 90       	pop	r12
 ab0:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 ab2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 ab4:	df 91       	pop	r29
 ab6:	cf 91       	pop	r28
 ab8:	1f 91       	pop	r17
 aba:	0f 91       	pop	r16
 abc:	ff 90       	pop	r15
 abe:	ef 90       	pop	r14
 ac0:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 ac2:	cf 90       	pop	r12
 ac4:	74 cf       	rjmp	.-280    	; 0x9ae <_ZN5Print11printNumberEmh>

00000ac6 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 ac6:	9a 01       	movw	r18, r20
  return print((long) n, base);
 ac8:	ab 01       	movw	r20, r22
 aca:	77 0f       	add	r23, r23
 acc:	66 0b       	sbc	r22, r22
 ace:	77 0b       	sbc	r23, r23
 ad0:	b5 cf       	rjmp	.-150    	; 0xa3c <_ZN5Print5printEli>

00000ad2 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 ad2:	0f 93       	push	r16
 ad4:	1f 93       	push	r17
 ad6:	cf 93       	push	r28
 ad8:	df 93       	push	r29
 ada:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 adc:	f4 df       	rcall	.-24     	; 0xac6 <_ZN5Print5printEii>
 ade:	8c 01       	movw	r16, r24
  n += println();
 ae0:	ce 01       	movw	r24, r28
 ae2:	42 df       	rcall	.-380    	; 0x968 <_ZN5Print7printlnEv>
  return n;
}
 ae4:	80 0f       	add	r24, r16
 ae6:	91 1f       	adc	r25, r17
 ae8:	df 91       	pop	r29
 aea:	cf 91       	pop	r28
 aec:	1f 91       	pop	r17
 aee:	0f 91       	pop	r16
 af0:	08 95       	ret

00000af2 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 af2:	1f 92       	push	r1
 af4:	0f 92       	push	r0
 af6:	0f b6       	in	r0, 0x3f	; 63
 af8:	0f 92       	push	r0
 afa:	11 24       	eor	r1, r1
 afc:	2f 93       	push	r18
 afe:	3f 93       	push	r19
 b00:	8f 93       	push	r24
 b02:	9f 93       	push	r25
 b04:	af 93       	push	r26
 b06:	bf 93       	push	r27
 b08:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <timer0_millis>
 b0c:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <timer0_millis+0x1>
 b10:	a0 91 33 04 	lds	r26, 0x0433	; 0x800433 <timer0_millis+0x2>
 b14:	b0 91 34 04 	lds	r27, 0x0434	; 0x800434 <timer0_millis+0x3>
 b18:	30 91 30 04 	lds	r19, 0x0430	; 0x800430 <timer0_fract>
 b1c:	23 e0       	ldi	r18, 0x03	; 3
 b1e:	23 0f       	add	r18, r19
 b20:	2d 37       	cpi	r18, 0x7D	; 125
 b22:	20 f4       	brcc	.+8      	; 0xb2c <__vector_23+0x3a>
 b24:	01 96       	adiw	r24, 0x01	; 1
 b26:	a1 1d       	adc	r26, r1
 b28:	b1 1d       	adc	r27, r1
 b2a:	05 c0       	rjmp	.+10     	; 0xb36 <__vector_23+0x44>
 b2c:	26 e8       	ldi	r18, 0x86	; 134
 b2e:	23 0f       	add	r18, r19
 b30:	02 96       	adiw	r24, 0x02	; 2
 b32:	a1 1d       	adc	r26, r1
 b34:	b1 1d       	adc	r27, r1
 b36:	20 93 30 04 	sts	0x0430, r18	; 0x800430 <timer0_fract>
 b3a:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <timer0_millis>
 b3e:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <timer0_millis+0x1>
 b42:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <timer0_millis+0x2>
 b46:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <timer0_millis+0x3>
 b4a:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <timer0_overflow_count>
 b4e:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <timer0_overflow_count+0x1>
 b52:	a0 91 37 04 	lds	r26, 0x0437	; 0x800437 <timer0_overflow_count+0x2>
 b56:	b0 91 38 04 	lds	r27, 0x0438	; 0x800438 <timer0_overflow_count+0x3>
 b5a:	01 96       	adiw	r24, 0x01	; 1
 b5c:	a1 1d       	adc	r26, r1
 b5e:	b1 1d       	adc	r27, r1
 b60:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <timer0_overflow_count>
 b64:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <timer0_overflow_count+0x1>
 b68:	a0 93 37 04 	sts	0x0437, r26	; 0x800437 <timer0_overflow_count+0x2>
 b6c:	b0 93 38 04 	sts	0x0438, r27	; 0x800438 <timer0_overflow_count+0x3>
 b70:	bf 91       	pop	r27
 b72:	af 91       	pop	r26
 b74:	9f 91       	pop	r25
 b76:	8f 91       	pop	r24
 b78:	3f 91       	pop	r19
 b7a:	2f 91       	pop	r18
 b7c:	0f 90       	pop	r0
 b7e:	0f be       	out	0x3f, r0	; 63
 b80:	0f 90       	pop	r0
 b82:	1f 90       	pop	r1
 b84:	18 95       	reti

00000b86 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 b86:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 b88:	84 b5       	in	r24, 0x24	; 36
 b8a:	82 60       	ori	r24, 0x02	; 2
 b8c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 b8e:	84 b5       	in	r24, 0x24	; 36
 b90:	81 60       	ori	r24, 0x01	; 1
 b92:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 b94:	85 b5       	in	r24, 0x25	; 37
 b96:	82 60       	ori	r24, 0x02	; 2
 b98:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 b9a:	85 b5       	in	r24, 0x25	; 37
 b9c:	81 60       	ori	r24, 0x01	; 1
 b9e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 ba0:	ee e6       	ldi	r30, 0x6E	; 110
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	80 81       	ld	r24, Z
 ba6:	81 60       	ori	r24, 0x01	; 1
 ba8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 baa:	e1 e8       	ldi	r30, 0x81	; 129
 bac:	f0 e0       	ldi	r31, 0x00	; 0
 bae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 bb0:	80 81       	ld	r24, Z
 bb2:	82 60       	ori	r24, 0x02	; 2
 bb4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 bb6:	80 81       	ld	r24, Z
 bb8:	81 60       	ori	r24, 0x01	; 1
 bba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 bbc:	e0 e8       	ldi	r30, 0x80	; 128
 bbe:	f0 e0       	ldi	r31, 0x00	; 0
 bc0:	80 81       	ld	r24, Z
 bc2:	81 60       	ori	r24, 0x01	; 1
 bc4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 bc6:	e1 eb       	ldi	r30, 0xB1	; 177
 bc8:	f0 e0       	ldi	r31, 0x00	; 0
 bca:	80 81       	ld	r24, Z
 bcc:	84 60       	ori	r24, 0x04	; 4
 bce:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 bd0:	e0 eb       	ldi	r30, 0xB0	; 176
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	80 81       	ld	r24, Z
 bd6:	81 60       	ori	r24, 0x01	; 1
 bd8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 bda:	e1 e9       	ldi	r30, 0x91	; 145
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	80 81       	ld	r24, Z
 be0:	82 60       	ori	r24, 0x02	; 2
 be2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 be4:	80 81       	ld	r24, Z
 be6:	81 60       	ori	r24, 0x01	; 1
 be8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 bea:	e0 e9       	ldi	r30, 0x90	; 144
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	80 81       	ld	r24, Z
 bf0:	81 60       	ori	r24, 0x01	; 1
 bf2:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 bf4:	e1 ea       	ldi	r30, 0xA1	; 161
 bf6:	f0 e0       	ldi	r31, 0x00	; 0
 bf8:	80 81       	ld	r24, Z
 bfa:	82 60       	ori	r24, 0x02	; 2
 bfc:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 bfe:	80 81       	ld	r24, Z
 c00:	81 60       	ori	r24, 0x01	; 1
 c02:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 c04:	e0 ea       	ldi	r30, 0xA0	; 160
 c06:	f0 e0       	ldi	r31, 0x00	; 0
 c08:	80 81       	ld	r24, Z
 c0a:	81 60       	ori	r24, 0x01	; 1
 c0c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 c0e:	e1 e2       	ldi	r30, 0x21	; 33
 c10:	f1 e0       	ldi	r31, 0x01	; 1
 c12:	80 81       	ld	r24, Z
 c14:	82 60       	ori	r24, 0x02	; 2
 c16:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 c18:	80 81       	ld	r24, Z
 c1a:	81 60       	ori	r24, 0x01	; 1
 c1c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 c1e:	e0 e2       	ldi	r30, 0x20	; 32
 c20:	f1 e0       	ldi	r31, 0x01	; 1
 c22:	80 81       	ld	r24, Z
 c24:	81 60       	ori	r24, 0x01	; 1
 c26:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 c28:	ea e7       	ldi	r30, 0x7A	; 122
 c2a:	f0 e0       	ldi	r31, 0x00	; 0
 c2c:	80 81       	ld	r24, Z
 c2e:	84 60       	ori	r24, 0x04	; 4
 c30:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 c32:	80 81       	ld	r24, Z
 c34:	82 60       	ori	r24, 0x02	; 2
 c36:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 c38:	80 81       	ld	r24, Z
 c3a:	81 60       	ori	r24, 0x01	; 1
 c3c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 c3e:	80 81       	ld	r24, Z
 c40:	80 68       	ori	r24, 0x80	; 128
 c42:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 c44:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 c48:	08 95       	ret

00000c4a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	fc 01       	movw	r30, r24
 c4e:	31 97       	sbiw	r30, 0x01	; 1
 c50:	e2 31       	cpi	r30, 0x12	; 18
 c52:	f1 05       	cpc	r31, r1
 c54:	08 f0       	brcs	.+2      	; 0xc58 <turnOffPWM+0xe>
 c56:	4d c0       	rjmp	.+154    	; 0xcf2 <turnOffPWM+0xa8>
 c58:	88 27       	eor	r24, r24
 c5a:	ee 58       	subi	r30, 0x8E	; 142
 c5c:	ff 4f       	sbci	r31, 0xFF	; 255
 c5e:	8f 4f       	sbci	r24, 0xFF	; 255
 c60:	d5 c0       	rjmp	.+426    	; 0xe0c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 c62:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 c66:	8f 77       	andi	r24, 0x7F	; 127
 c68:	03 c0       	rjmp	.+6      	; 0xc70 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 c6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 c6e:	8f 7d       	andi	r24, 0xDF	; 223
 c70:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 c74:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 c76:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 c7a:	87 7f       	andi	r24, 0xF7	; 247
 c7c:	f9 cf       	rjmp	.-14     	; 0xc70 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 c7e:	84 b5       	in	r24, 0x24	; 36
 c80:	8f 77       	andi	r24, 0x7F	; 127
 c82:	02 c0       	rjmp	.+4      	; 0xc88 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 c84:	84 b5       	in	r24, 0x24	; 36
 c86:	8f 7d       	andi	r24, 0xDF	; 223
 c88:	84 bd       	out	0x24, r24	; 36
 c8a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 c8c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 c90:	8f 77       	andi	r24, 0x7F	; 127
 c92:	03 c0       	rjmp	.+6      	; 0xc9a <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 c94:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 c98:	8f 7d       	andi	r24, 0xDF	; 223
 c9a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 c9e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 ca0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 ca4:	8f 77       	andi	r24, 0x7F	; 127
 ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 ca8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 cac:	8f 7d       	andi	r24, 0xDF	; 223
 cae:	03 c0       	rjmp	.+6      	; 0xcb6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 cb0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 cb4:	87 7f       	andi	r24, 0xF7	; 247
 cb6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 cba:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 cbc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 cc0:	8f 77       	andi	r24, 0x7F	; 127
 cc2:	07 c0       	rjmp	.+14     	; 0xcd2 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 cc4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 cc8:	8f 7d       	andi	r24, 0xDF	; 223
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 ccc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 cd0:	87 7f       	andi	r24, 0xF7	; 247
 cd2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 cd6:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 cd8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 cdc:	8f 77       	andi	r24, 0x7F	; 127
 cde:	07 c0       	rjmp	.+14     	; 0xcee <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 ce0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 ce4:	8f 7d       	andi	r24, 0xDF	; 223
 ce6:	03 c0       	rjmp	.+6      	; 0xcee <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 ce8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 cec:	87 7f       	andi	r24, 0xF7	; 247
 cee:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 cf2:	08 95       	ret

00000cf4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 cf4:	cf 93       	push	r28
 cf6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	fc 01       	movw	r30, r24
 cfc:	e2 5b       	subi	r30, 0xB2	; 178
 cfe:	fe 4f       	sbci	r31, 0xFE	; 254
 d00:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 d02:	fc 01       	movw	r30, r24
 d04:	ec 56       	subi	r30, 0x6C	; 108
 d06:	fe 4f       	sbci	r31, 0xFE	; 254
 d08:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 d0a:	88 23       	and	r24, r24
 d0c:	61 f1       	breq	.+88     	; 0xd66 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	88 0f       	add	r24, r24
 d12:	99 1f       	adc	r25, r25
 d14:	fc 01       	movw	r30, r24
 d16:	ec 50       	subi	r30, 0x0C	; 12
 d18:	fe 4f       	sbci	r31, 0xFE	; 254
 d1a:	c5 91       	lpm	r28, Z+
 d1c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 d1e:	fc 01       	movw	r30, r24
 d20:	e6 52       	subi	r30, 0x26	; 38
 d22:	fe 4f       	sbci	r31, 0xFE	; 254
 d24:	a5 91       	lpm	r26, Z+
 d26:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 d28:	61 11       	cpse	r22, r1
 d2a:	09 c0       	rjmp	.+18     	; 0xd3e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 d2c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 d2e:	f8 94       	cli
		*reg &= ~bit;
 d30:	88 81       	ld	r24, Y
 d32:	20 95       	com	r18
 d34:	82 23       	and	r24, r18
 d36:	88 83       	st	Y, r24
		*out &= ~bit;
 d38:	ec 91       	ld	r30, X
 d3a:	2e 23       	and	r18, r30
 d3c:	0b c0       	rjmp	.+22     	; 0xd54 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 d3e:	62 30       	cpi	r22, 0x02	; 2
 d40:	61 f4       	brne	.+24     	; 0xd5a <pinMode+0x66>
		uint8_t oldSREG = SREG;
 d42:	9f b7       	in	r25, 0x3f	; 63
                cli();
 d44:	f8 94       	cli
		*reg &= ~bit;
 d46:	88 81       	ld	r24, Y
 d48:	32 2f       	mov	r19, r18
 d4a:	30 95       	com	r19
 d4c:	83 23       	and	r24, r19
 d4e:	88 83       	st	Y, r24
		*out |= bit;
 d50:	ec 91       	ld	r30, X
 d52:	2e 2b       	or	r18, r30
 d54:	2c 93       	st	X, r18
		SREG = oldSREG;
 d56:	9f bf       	out	0x3f, r25	; 63
 d58:	06 c0       	rjmp	.+12     	; 0xd66 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 d5a:	8f b7       	in	r24, 0x3f	; 63
                cli();
 d5c:	f8 94       	cli
		*reg |= bit;
 d5e:	e8 81       	ld	r30, Y
 d60:	2e 2b       	or	r18, r30
 d62:	28 83       	st	Y, r18
		SREG = oldSREG;
 d64:	8f bf       	out	0x3f, r24	; 63
	}
}
 d66:	df 91       	pop	r29
 d68:	cf 91       	pop	r28
 d6a:	08 95       	ret

00000d6c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 d6c:	1f 93       	push	r17
 d6e:	cf 93       	push	r28
 d70:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 d72:	28 2f       	mov	r18, r24
 d74:	30 e0       	ldi	r19, 0x00	; 0
 d76:	f9 01       	movw	r30, r18
 d78:	e8 5f       	subi	r30, 0xF8	; 248
 d7a:	fe 4f       	sbci	r31, 0xFE	; 254
 d7c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 d7e:	f9 01       	movw	r30, r18
 d80:	e2 5b       	subi	r30, 0xB2	; 178
 d82:	fe 4f       	sbci	r31, 0xFE	; 254
 d84:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 d86:	f9 01       	movw	r30, r18
 d88:	ec 56       	subi	r30, 0x6C	; 108
 d8a:	fe 4f       	sbci	r31, 0xFE	; 254
 d8c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 d8e:	cc 23       	and	r28, r28
 d90:	b9 f0       	breq	.+46     	; 0xdc0 <digitalWrite+0x54>
 d92:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 d94:	81 11       	cpse	r24, r1
 d96:	59 df       	rcall	.-334    	; 0xc4a <turnOffPWM>

	out = portOutputRegister(port);
 d98:	ec 2f       	mov	r30, r28
 d9a:	f0 e0       	ldi	r31, 0x00	; 0
 d9c:	ee 0f       	add	r30, r30
 d9e:	ff 1f       	adc	r31, r31
 da0:	e6 52       	subi	r30, 0x26	; 38
 da2:	fe 4f       	sbci	r31, 0xFE	; 254
 da4:	a5 91       	lpm	r26, Z+
 da6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 da8:	9f b7       	in	r25, 0x3f	; 63
	cli();
 daa:	f8 94       	cli

	if (val == LOW) {
 dac:	11 11       	cpse	r17, r1
 dae:	04 c0       	rjmp	.+8      	; 0xdb8 <digitalWrite+0x4c>
		*out &= ~bit;
 db0:	8c 91       	ld	r24, X
 db2:	d0 95       	com	r29
 db4:	d8 23       	and	r29, r24
 db6:	02 c0       	rjmp	.+4      	; 0xdbc <digitalWrite+0x50>
	} else {
		*out |= bit;
 db8:	ec 91       	ld	r30, X
 dba:	de 2b       	or	r29, r30
 dbc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 dbe:	9f bf       	out	0x3f, r25	; 63
}
 dc0:	df 91       	pop	r29
 dc2:	cf 91       	pop	r28
 dc4:	1f 91       	pop	r17
 dc6:	08 95       	ret

00000dc8 <__udivmodsi4>:
 dc8:	a1 e2       	ldi	r26, 0x21	; 33
 dca:	1a 2e       	mov	r1, r26
 dcc:	aa 1b       	sub	r26, r26
 dce:	bb 1b       	sub	r27, r27
 dd0:	fd 01       	movw	r30, r26
 dd2:	0d c0       	rjmp	.+26     	; 0xdee <__udivmodsi4_ep>

00000dd4 <__udivmodsi4_loop>:
 dd4:	aa 1f       	adc	r26, r26
 dd6:	bb 1f       	adc	r27, r27
 dd8:	ee 1f       	adc	r30, r30
 dda:	ff 1f       	adc	r31, r31
 ddc:	a2 17       	cp	r26, r18
 dde:	b3 07       	cpc	r27, r19
 de0:	e4 07       	cpc	r30, r20
 de2:	f5 07       	cpc	r31, r21
 de4:	20 f0       	brcs	.+8      	; 0xdee <__udivmodsi4_ep>
 de6:	a2 1b       	sub	r26, r18
 de8:	b3 0b       	sbc	r27, r19
 dea:	e4 0b       	sbc	r30, r20
 dec:	f5 0b       	sbc	r31, r21

00000dee <__udivmodsi4_ep>:
 dee:	66 1f       	adc	r22, r22
 df0:	77 1f       	adc	r23, r23
 df2:	88 1f       	adc	r24, r24
 df4:	99 1f       	adc	r25, r25
 df6:	1a 94       	dec	r1
 df8:	69 f7       	brne	.-38     	; 0xdd4 <__udivmodsi4_loop>
 dfa:	60 95       	com	r22
 dfc:	70 95       	com	r23
 dfe:	80 95       	com	r24
 e00:	90 95       	com	r25
 e02:	9b 01       	movw	r18, r22
 e04:	ac 01       	movw	r20, r24
 e06:	bd 01       	movw	r22, r26
 e08:	cf 01       	movw	r24, r30
 e0a:	08 95       	ret

00000e0c <__tablejump2__>:
 e0c:	ee 0f       	add	r30, r30
 e0e:	ff 1f       	adc	r31, r31
 e10:	88 1f       	adc	r24, r24
 e12:	8b bf       	out	0x3b, r24	; 59
 e14:	07 90       	elpm	r0, Z+
 e16:	f6 91       	elpm	r31, Z
 e18:	e0 2d       	mov	r30, r0
 e1a:	19 94       	eijmp

00000e1c <_exit>:
 e1c:	f8 94       	cli

00000e1e <__stop_program>:
 e1e:	ff cf       	rjmp	.-2      	; 0xe1e <__stop_program>
