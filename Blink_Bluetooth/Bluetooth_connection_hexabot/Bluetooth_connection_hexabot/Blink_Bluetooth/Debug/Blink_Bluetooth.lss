
Blink_Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800200  00000e92  00000f26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  00800320  00800320  00001046  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009da4  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000219e  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bdf  00000000  00000000  0000d2da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000880  00000000  00000000  0000eebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002307  00000000  00000000  0000f73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ded  00000000  00000000  00011a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  00014830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0f c1       	rjmp	.+542    	; 0x220 <__ctors_end>
   2:	00 00       	nop
   4:	3b c1       	rjmp	.+630    	; 0x27c <__bad_interrupt>
   6:	00 00       	nop
   8:	39 c1       	rjmp	.+626    	; 0x27c <__bad_interrupt>
   a:	00 00       	nop
   c:	37 c1       	rjmp	.+622    	; 0x27c <__bad_interrupt>
   e:	00 00       	nop
  10:	35 c1       	rjmp	.+618    	; 0x27c <__bad_interrupt>
  12:	00 00       	nop
  14:	33 c1       	rjmp	.+614    	; 0x27c <__bad_interrupt>
  16:	00 00       	nop
  18:	31 c1       	rjmp	.+610    	; 0x27c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2f c1       	rjmp	.+606    	; 0x27c <__bad_interrupt>
  1e:	00 00       	nop
  20:	2d c1       	rjmp	.+602    	; 0x27c <__bad_interrupt>
  22:	00 00       	nop
  24:	2b c1       	rjmp	.+598    	; 0x27c <__bad_interrupt>
  26:	00 00       	nop
  28:	29 c1       	rjmp	.+594    	; 0x27c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	27 c1       	rjmp	.+590    	; 0x27c <__bad_interrupt>
  2e:	00 00       	nop
  30:	25 c1       	rjmp	.+586    	; 0x27c <__bad_interrupt>
  32:	00 00       	nop
  34:	23 c1       	rjmp	.+582    	; 0x27c <__bad_interrupt>
  36:	00 00       	nop
  38:	21 c1       	rjmp	.+578    	; 0x27c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1f c1       	rjmp	.+574    	; 0x27c <__bad_interrupt>
  3e:	00 00       	nop
  40:	1d c1       	rjmp	.+570    	; 0x27c <__bad_interrupt>
  42:	00 00       	nop
  44:	1b c1       	rjmp	.+566    	; 0x27c <__bad_interrupt>
  46:	00 00       	nop
  48:	19 c1       	rjmp	.+562    	; 0x27c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	17 c1       	rjmp	.+558    	; 0x27c <__bad_interrupt>
  4e:	00 00       	nop
  50:	15 c1       	rjmp	.+554    	; 0x27c <__bad_interrupt>
  52:	00 00       	nop
  54:	13 c1       	rjmp	.+550    	; 0x27c <__bad_interrupt>
  56:	00 00       	nop
  58:	11 c1       	rjmp	.+546    	; 0x27c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	83 c5       	rjmp	.+2822   	; 0xb64 <__vector_23>
  5e:	00 00       	nop
  60:	0d c1       	rjmp	.+538    	; 0x27c <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c3       	rjmp	.+1660   	; 0x6e2 <__vector_25>
  66:	00 00       	nop
  68:	72 c3       	rjmp	.+1764   	; 0x74e <__vector_26>
  6a:	00 00       	nop
  6c:	07 c1       	rjmp	.+526    	; 0x27c <__bad_interrupt>
  6e:	00 00       	nop
  70:	05 c1       	rjmp	.+522    	; 0x27c <__bad_interrupt>
  72:	00 00       	nop
  74:	03 c1       	rjmp	.+518    	; 0x27c <__bad_interrupt>
  76:	00 00       	nop
  78:	01 c1       	rjmp	.+514    	; 0x27c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ff c0       	rjmp	.+510    	; 0x27c <__bad_interrupt>
  7e:	00 00       	nop
  80:	fd c0       	rjmp	.+506    	; 0x27c <__bad_interrupt>
  82:	00 00       	nop
  84:	fb c0       	rjmp	.+502    	; 0x27c <__bad_interrupt>
  86:	00 00       	nop
  88:	f9 c0       	rjmp	.+498    	; 0x27c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	f7 c0       	rjmp	.+494    	; 0x27c <__bad_interrupt>
  8e:	00 00       	nop
  90:	f5 c0       	rjmp	.+490    	; 0x27c <__bad_interrupt>
  92:	00 00       	nop
  94:	f3 c0       	rjmp	.+486    	; 0x27c <__bad_interrupt>
  96:	00 00       	nop
  98:	f1 c0       	rjmp	.+482    	; 0x27c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ef c0       	rjmp	.+478    	; 0x27c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	ed c0       	rjmp	.+474    	; 0x27c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	eb c0       	rjmp	.+470    	; 0x27c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e9 c0       	rjmp	.+466    	; 0x27c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	e7 c0       	rjmp	.+462    	; 0x27c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	e5 c0       	rjmp	.+458    	; 0x27c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	e3 c0       	rjmp	.+454    	; 0x27c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	e1 c0       	rjmp	.+450    	; 0x27c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	df c0       	rjmp	.+446    	; 0x27c <__bad_interrupt>
  be:	00 00       	nop
  c0:	dd c0       	rjmp	.+442    	; 0x27c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	db c0       	rjmp	.+438    	; 0x27c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	d9 c0       	rjmp	.+434    	; 0x27c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	d7 c0       	rjmp	.+430    	; 0x27c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	d5 c0       	rjmp	.+426    	; 0x27c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	d3 c0       	rjmp	.+422    	; 0x27c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	99 c3       	rjmp	.+1842   	; 0x80c <__vector_54>
  da:	00 00       	nop
  dc:	cd c3       	rjmp	.+1946   	; 0x878 <__vector_55>
  de:	00 00       	nop
  e0:	cd c0       	rjmp	.+410    	; 0x27c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	91 01       	movw	r18, r2
  e6:	9f 01       	movw	r18, r30
  e8:	ae 01       	movw	r20, r28
  ea:	bc 01       	movw	r22, r24
  ec:	c4 01       	movw	r24, r8
  ee:	d2 01       	movw	r26, r4
  f0:	e0 01       	movw	r28, r0
  f2:	78 06       	cpc	r7, r24
  f4:	7b 06       	cpc	r7, r27
  f6:	6a 06       	cpc	r6, r26
  f8:	6e 06       	cpc	r6, r30
  fa:	74 06       	cpc	r7, r20
  fc:	b2 06       	cpc	r11, r18
  fe:	7f 06       	cpc	r7, r31
 100:	83 06       	cpc	r8, r19
 102:	89 06       	cpc	r8, r25
 104:	8d 06       	cpc	r8, r29
 106:	91 06       	cpc	r9, r17
 108:	97 06       	cpc	r9, r23
 10a:	9b 06       	cpc	r9, r27
 10c:	9f 06       	cpc	r9, r31
 10e:	b2 06       	cpc	r11, r18
 110:	a5 06       	cpc	r10, r21
 112:	a9 06       	cpc	r10, r25
 114:	ad 06       	cpc	r10, r29

00000116 <__trampolines_end>:
 116:	00 00       	nop
 118:	0a 0b       	sbc	r16, r26
 11a:	02 09       	sbc	r16, r2
 11c:	0c 0d       	add	r16, r12
 11e:	0e 08       	sbc	r0, r14
 120:	07 03       	mulsu	r16, r23
 122:	04 01       	movw	r0, r8
	...
 140:	00 00       	nop
 142:	12 11       	cpse	r17, r2
 144:	10 00       	.word	0x0010	; ????
	...

0000015c <digital_pin_to_bit_mask_PGM>:
 15c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 16c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 17c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 18c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 19c:	04 08 10 20 40 80                                   ... @.

000001a2 <digital_pin_to_port_PGM>:
 1a2:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1b2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1c2:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1d2:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1e2:	0b 0b 0b 0b 0b 0b                                   ......

000001e8 <port_to_output_PGM>:
 1e8:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1f8:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000202 <port_to_mode_PGM>:
 202:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 212:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000021c <__ctors_start>:
 21c:	d9 03       	fmulsu	r21, r17
 21e:	6e 04       	cpc	r6, r14

00000220 <__ctors_end>:
 220:	11 24       	eor	r1, r1
 222:	1f be       	out	0x3f, r1	; 63
 224:	cf ef       	ldi	r28, 0xFF	; 255
 226:	d1 e2       	ldi	r29, 0x21	; 33
 228:	de bf       	out	0x3e, r29	; 62
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	00 e0       	ldi	r16, 0x00	; 0
 22e:	0c bf       	out	0x3c, r16	; 60

00000230 <__do_copy_data>:
 230:	13 e0       	ldi	r17, 0x03	; 3
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b2 e0       	ldi	r27, 0x02	; 2
 236:	e2 e9       	ldi	r30, 0x92	; 146
 238:	fe e0       	ldi	r31, 0x0E	; 14
 23a:	00 e0       	ldi	r16, 0x00	; 0
 23c:	0b bf       	out	0x3b, r16	; 59
 23e:	02 c0       	rjmp	.+4      	; 0x244 <__do_copy_data+0x14>
 240:	07 90       	elpm	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	a0 32       	cpi	r26, 0x20	; 32
 246:	b1 07       	cpc	r27, r17
 248:	d9 f7       	brne	.-10     	; 0x240 <__do_copy_data+0x10>

0000024a <__do_clear_bss>:
 24a:	24 e0       	ldi	r18, 0x04	; 4
 24c:	a0 e2       	ldi	r26, 0x20	; 32
 24e:	b3 e0       	ldi	r27, 0x03	; 3
 250:	01 c0       	rjmp	.+2      	; 0x254 <.do_clear_bss_start>

00000252 <.do_clear_bss_loop>:
 252:	1d 92       	st	X+, r1

00000254 <.do_clear_bss_start>:
 254:	a5 36       	cpi	r26, 0x65	; 101
 256:	b2 07       	cpc	r27, r18
 258:	e1 f7       	brne	.-8      	; 0x252 <.do_clear_bss_loop>

0000025a <__do_global_ctors>:
 25a:	11 e0       	ldi	r17, 0x01	; 1
 25c:	c0 e1       	ldi	r28, 0x10	; 16
 25e:	d1 e0       	ldi	r29, 0x01	; 1
 260:	00 e0       	ldi	r16, 0x00	; 0
 262:	05 c0       	rjmp	.+10     	; 0x26e <__do_global_ctors+0x14>
 264:	21 97       	sbiw	r28, 0x01	; 1
 266:	01 09       	sbc	r16, r1
 268:	80 2f       	mov	r24, r16
 26a:	fe 01       	movw	r30, r28
 26c:	08 d6       	rcall	.+3088   	; 0xe7e <__tablejump2__>
 26e:	ce 30       	cpi	r28, 0x0E	; 14
 270:	d1 07       	cpc	r29, r17
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 07       	cpc	r16, r24
 276:	b1 f7       	brne	.-20     	; 0x264 <__do_global_ctors+0xa>
 278:	5f d3       	rcall	.+1726   	; 0x938 <main>
 27a:	09 c6       	rjmp	.+3090   	; 0xe8e <_exit>

0000027c <__bad_interrupt>:
 27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>

0000027e <setup>:
}


void setup() {
	// initialize digital pin LED_BUILTIN as an output.
	pinMode(LED_BUILTIN, OUTPUT);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	8d e0       	ldi	r24, 0x0D	; 13
 282:	71 d5       	rcall	.+2786   	; 0xd66 <pinMode>
	pinMode(12, OUTPUT); //also pin 12 as LED output
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	8c e0       	ldi	r24, 0x0C	; 12
 288:	6e d5       	rcall	.+2780   	; 0xd66 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 28a:	26 e0       	ldi	r18, 0x06	; 6
 28c:	40 e8       	ldi	r20, 0x80	; 128
 28e:	55 e2       	ldi	r21, 0x25	; 37
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	82 e2       	ldi	r24, 0x22	; 34
 296:	93 e0       	ldi	r25, 0x03	; 3
 298:	c1 d1       	rcall	.+898    	; 0x61c <_ZN14HardwareSerial5beginEmh>

	Serial.begin(9600);         //Sets the data rate in bits per second (baud) for serial data transmission
	Serial.println("This is the arduino for Hexapod!!!");
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	72 e0       	ldi	r23, 0x02	; 2
 29e:	82 e2       	ldi	r24, 0x22	; 34
 2a0:	93 e0       	ldi	r25, 0x03	; 3
 2a2:	9e d3       	rcall	.+1852   	; 0x9e0 <_ZN5Print7printlnEPKc>
	Serial.println(" ");
 2a4:	64 e8       	ldi	r22, 0x84	; 132
 2a6:	72 e0       	ldi	r23, 0x02	; 2
 2a8:	82 e2       	ldi	r24, 0x22	; 34
 2aa:	93 e0       	ldi	r25, 0x03	; 3
 2ac:	99 d3       	rcall	.+1842   	; 0x9e0 <_ZN5Print7printlnEPKc>
	Serial.println("To connect, start the LED Controller App on your Smartphone");
 2ae:	63 e2       	ldi	r22, 0x23	; 35
 2b0:	72 e0       	ldi	r23, 0x02	; 2
 2b2:	82 e2       	ldi	r24, 0x22	; 34
 2b4:	93 e0       	ldi	r25, 0x03	; 3
 2b6:	94 d3       	rcall	.+1832   	; 0x9e0 <_ZN5Print7printlnEPKc>
	Serial.println("and connect to Bluetooth HC-05");
 2b8:	6f e5       	ldi	r22, 0x5F	; 95
 2ba:	72 e0       	ldi	r23, 0x02	; 2
 2bc:	82 e2       	ldi	r24, 0x22	; 34
 2be:	93 e0       	ldi	r25, 0x03	; 3
 2c0:	8f d3       	rcall	.+1822   	; 0x9e0 <_ZN5Print7printlnEPKc>

	//int count = 0;
//	BluetoothInterface to;
//	to:BluetoothInterface();	
	digitalWrite(LED_BUILTIN, HIGH); 
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	8b c5       	rjmp	.+2838   	; 0xdde <digitalWrite>

000002c8 <loop>:
 2c8:	1f 93       	push	r17
  
}


// the loop function runs over and over again forever
void loop() {
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
	int serv3;
	char data;

	int k;
	
	if(Serial.available() > 0){
 2ce:	82 e2       	ldi	r24, 0x22	; 34
 2d0:	93 e0       	ldi	r25, 0x03	; 3
 2d2:	a4 d0       	rcall	.+328    	; 0x41c <_ZN14HardwareSerial9availableEv>
 2d4:	18 16       	cp	r1, r24
 2d6:	19 06       	cpc	r1, r25
 2d8:	0c f0       	brlt	.+2      	; 0x2dc <loop+0x14>
 2da:	9c c0       	rjmp	.+312    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		data = Serial.read();
 2dc:	82 e2       	ldi	r24, 0x22	; 34
 2de:	93 e0       	ldi	r25, 0x03	; 3
 2e0:	b7 d0       	rcall	.+366    	; 0x450 <_ZN14HardwareSerial4readEv>
 2e2:	ec 01       	movw	r28, r24
		Serial.println(data);
 2e4:	68 2f       	mov	r22, r24
 2e6:	82 e2       	ldi	r24, 0x22	; 34
 2e8:	93 e0       	ldi	r25, 0x03	; 3
 2ea:	8a d3       	rcall	.+1812   	; 0xa00 <_ZN5Print7printlnEc>
		Serial.print("Count: ");
 2ec:	6e e7       	ldi	r22, 0x7E	; 126
 2ee:	72 e0       	ldi	r23, 0x02	; 2
 2f0:	82 e2       	ldi	r24, 0x22	; 34
 2f2:	93 e0       	ldi	r25, 0x03	; 3
 2f4:	6a d3       	rcall	.+1748   	; 0x9ca <_ZN5Print5printEPKc>
		Serial.println(count);
 2f6:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <__data_end>
 2fa:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <__data_end+0x1>
 2fe:	4a e0       	ldi	r20, 0x0A	; 10
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	82 e2       	ldi	r24, 0x22	; 34
 304:	93 e0       	ldi	r25, 0x03	; 3
 306:	1e d4       	rcall	.+2108   	; 0xb44 <_ZN5Print7printlnEii>
		switch (count)
 308:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <__data_end>
 30c:	f0 91 21 03 	lds	r31, 0x0321	; 0x800321 <__data_end+0x1>
 310:	e7 30       	cpi	r30, 0x07	; 7
 312:	f1 05       	cpc	r31, r1
 314:	08 f0       	brcs	.+2      	; 0x318 <loop+0x50>
 316:	5e c0       	rjmp	.+188    	; 0x3d4 <loop+0x10c>
 318:	88 27       	eor	r24, r24
 31a:	ee 58       	subi	r30, 0x8E	; 142
 31c:	ff 4f       	sbci	r31, 0xFF	; 255
 31e:	8f 4f       	sbci	r24, 0xFF	; 255
 320:	ae c5       	rjmp	.+2908   	; 0xe7e <__tablejump2__>
		{
			case 0:
				if(data == 'A'){
 322:	c1 34       	cpi	r28, 0x41	; 65
 324:	49 f4       	brne	.+18     	; 0x338 <loop+0x70>
					count++;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 32e:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
					Serial.println("data = A");
 332:	66 e8       	ldi	r22, 0x86	; 134
 334:	72 e0       	ldi	r23, 0x02	; 2
 336:	68 c0       	rjmp	.+208    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
				else{
					Serial.println("Arsch 1");
 338:	6f e8       	ldi	r22, 0x8F	; 143
 33a:	72 e0       	ldi	r23, 0x02	; 2
 33c:	65 c0       	rjmp	.+202    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
					
				break;
			
			case 1:
				if(int2char(data) >= 0 && int2char(data) < 10){
 33e:	ce 01       	movw	r24, r28
 340:	99 27       	eor	r25, r25
 342:	c0 97       	sbiw	r24, 0x30	; 48
 344:	0a 97       	sbiw	r24, 0x0a	; 10
 346:	08 f0       	brcs	.+2      	; 0x34a <loop+0x82>
 348:	48 c0       	rjmp	.+144    	; 0x3da <loop+0x112>
					servo1 = data;
					count++;
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 352:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
					Serial.print("Servo1 = ");
 356:	69 ec       	ldi	r22, 0xC9	; 201
 358:	72 e0       	ldi	r23, 0x02	; 2
 35a:	4a c0       	rjmp	.+148    	; 0x3f0 <loop+0x128>
				}
				
				break;
				
			case 2:
				if(data == 'B'){
 35c:	c2 34       	cpi	r28, 0x42	; 66
 35e:	49 f4       	brne	.+18     	; 0x372 <loop+0xaa>
					count++;
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 368:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
					Serial.println("data = B");
 36c:	67 e9       	ldi	r22, 0x97	; 151
 36e:	72 e0       	ldi	r23, 0x02	; 2
 370:	4b c0       	rjmp	.+150    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
				else{
					Serial.println("Arsch 3");
 372:	60 ea       	ldi	r22, 0xA0	; 160
 374:	72 e0       	ldi	r23, 0x02	; 2
 376:	48 c0       	rjmp	.+144    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
				
				break;
				
			case 3:
				if(int2char(data) >= 0 && int2char(data) < 10){
 378:	ce 01       	movw	r24, r28
 37a:	99 27       	eor	r25, r25
 37c:	c0 97       	sbiw	r24, 0x30	; 48
 37e:	0a 97       	sbiw	r24, 0x0a	; 10
 380:	78 f1       	brcs	.+94     	; 0x3e0 <loop+0x118>
					count++;
					Serial.print("Servo2 = ");
					Serial.println(servo2);
				}
				else{
					Serial.println("Arsch 4");
 382:	6b ed       	ldi	r22, 0xDB	; 219
 384:	72 e0       	ldi	r23, 0x02	; 2
 386:	40 c0       	rjmp	.+128    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
				
				break;
						
			case 4:
				if(data == 'C'){
 388:	c3 34       	cpi	r28, 0x43	; 67
 38a:	49 f4       	brne	.+18     	; 0x39e <loop+0xd6>
					count++;
 38c:	85 e0       	ldi	r24, 0x05	; 5
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 394:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
					Serial.println("data = C");
 398:	68 ea       	ldi	r22, 0xA8	; 168
 39a:	72 e0       	ldi	r23, 0x02	; 2
 39c:	35 c0       	rjmp	.+106    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
				else{
					Serial.println("Arsch 5");
 39e:	61 eb       	ldi	r22, 0xB1	; 177
 3a0:	72 e0       	ldi	r23, 0x02	; 2
 3a2:	32 c0       	rjmp	.+100    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
									
				break;
									
			case 5:
				if(int2char(data) >= 0 && int2char(data) < 10){
 3a4:	ce 01       	movw	r24, r28
 3a6:	99 27       	eor	r25, r25
 3a8:	c0 97       	sbiw	r24, 0x30	; 48
 3aa:	0a 97       	sbiw	r24, 0x0a	; 10
 3ac:	58 f5       	brcc	.+86     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
					servo3 = data;
					count++;
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 3b6:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
					Serial.print("Servo3 = ");
 3ba:	6d ee       	ldi	r22, 0xED	; 237
 3bc:	72 e0       	ldi	r23, 0x02	; 2
 3be:	18 c0       	rjmp	.+48     	; 0x3f0 <loop+0x128>
				}
									
				break;
		
			case 6:
				if(data == '#'){
 3c0:	c3 32       	cpi	r28, 0x23	; 35
 3c2:	29 f4       	brne	.+10     	; 0x3ce <loop+0x106>
					count = 0;
 3c4:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__data_end+0x1>
 3c8:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__data_end>
 3cc:	23 c0       	rjmp	.+70     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
				}
				else{
					Serial.println("Arsch 7");
 3ce:	69 eb       	ldi	r22, 0xB9	; 185
 3d0:	72 e0       	ldi	r23, 0x02	; 2
 3d2:	1a c0       	rjmp	.+52     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				
						
					
			
			default:
				Serial.println("default");		
 3d4:	61 ec       	ldi	r22, 0xC1	; 193
 3d6:	72 e0       	ldi	r23, 0x02	; 2
 3d8:	17 c0       	rjmp	.+46     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					count++;
					Serial.print("Servo1 = ");
					Serial.println(servo1);
				}
				else{
					Serial.println("Arsch 2");
 3da:	63 ed       	ldi	r22, 0xD3	; 211
 3dc:	72 e0       	ldi	r23, 0x02	; 2
 3de:	14 c0       	rjmp	.+40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				break;
				
			case 3:
				if(int2char(data) >= 0 && int2char(data) < 10){
					servo2 = data;
					count++;
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
 3e8:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
					Serial.print("Servo2 = ");
 3ec:	63 ee       	ldi	r22, 0xE3	; 227
									
			case 5:
				if(int2char(data) >= 0 && int2char(data) < 10){
					servo3 = data;
					count++;
					Serial.print("Servo3 = ");
 3ee:	72 e0       	ldi	r23, 0x02	; 2
 3f0:	82 e2       	ldi	r24, 0x22	; 34
 3f2:	93 e0       	ldi	r25, 0x03	; 3
					Serial.println(servo3);
 3f4:	ea d2       	rcall	.+1492   	; 0x9ca <_ZN5Print5printEPKc>
 3f6:	6c 2f       	mov	r22, r28
 3f8:	82 e2       	ldi	r24, 0x22	; 34
// 	}
	



}
 3fa:	93 e0       	ldi	r25, 0x03	; 3
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
			case 5:
				if(int2char(data) >= 0 && int2char(data) < 10){
					servo3 = data;
					count++;
					Serial.print("Servo3 = ");
					Serial.println(servo3);
 400:	1f 91       	pop	r17
				}
				else{
					Serial.println("Arsch 6");
 402:	fe c2       	rjmp	.+1532   	; 0xa00 <_ZN5Print7printlnEc>
 404:	67 ef       	ldi	r22, 0xF7	; 247
 406:	72 e0       	ldi	r23, 0x02	; 2
 408:	82 e2       	ldi	r24, 0x22	; 34
// 	}
	



}
 40a:	93 e0       	ldi	r25, 0x03	; 3
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
					count++;
					Serial.print("Servo3 = ");
					Serial.println(servo3);
				}
				else{
					Serial.println("Arsch 6");
 410:	1f 91       	pop	r17
 412:	e6 c2       	rjmp	.+1484   	; 0x9e0 <_ZN5Print7printlnEPKc>
// 	}
	



}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	08 95       	ret

0000041c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 41c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 41e:	91 8d       	ldd	r25, Z+25	; 0x19
 420:	22 8d       	ldd	r18, Z+26	; 0x1a
 422:	89 2f       	mov	r24, r25
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	80 5c       	subi	r24, 0xC0	; 192
 428:	9f 4f       	sbci	r25, 0xFF	; 255
 42a:	82 1b       	sub	r24, r18
 42c:	91 09       	sbc	r25, r1
}
 42e:	8f 73       	andi	r24, 0x3F	; 63
 430:	99 27       	eor	r25, r25
 432:	08 95       	ret

00000434 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 434:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 436:	91 8d       	ldd	r25, Z+25	; 0x19
 438:	82 8d       	ldd	r24, Z+26	; 0x1a
 43a:	98 17       	cp	r25, r24
 43c:	31 f0       	breq	.+12     	; 0x44a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 43e:	82 8d       	ldd	r24, Z+26	; 0x1a
 440:	e8 0f       	add	r30, r24
 442:	f1 1d       	adc	r31, r1
 444:	85 8d       	ldd	r24, Z+29	; 0x1d
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 44e:	08 95       	ret

00000450 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 450:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 452:	91 8d       	ldd	r25, Z+25	; 0x19
 454:	82 8d       	ldd	r24, Z+26	; 0x1a
 456:	98 17       	cp	r25, r24
 458:	61 f0       	breq	.+24     	; 0x472 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 45a:	82 8d       	ldd	r24, Z+26	; 0x1a
 45c:	df 01       	movw	r26, r30
 45e:	a8 0f       	add	r26, r24
 460:	b1 1d       	adc	r27, r1
 462:	5d 96       	adiw	r26, 0x1d	; 29
 464:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 466:	92 8d       	ldd	r25, Z+26	; 0x1a
 468:	9f 5f       	subi	r25, 0xFF	; 255
 46a:	9f 73       	andi	r25, 0x3F	; 63
 46c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 472:	8f ef       	ldi	r24, 0xFF	; 255
 474:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 476:	08 95       	ret

00000478 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 478:	fc 01       	movw	r30, r24
 47a:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 47c:	44 8d       	ldd	r20, Z+28	; 0x1c
 47e:	25 2f       	mov	r18, r21
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	84 2f       	mov	r24, r20
 484:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 486:	82 1b       	sub	r24, r18
 488:	93 0b       	sbc	r25, r19
 48a:	54 17       	cp	r21, r20
 48c:	10 f0       	brcs	.+4      	; 0x492 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 48e:	cf 96       	adiw	r24, 0x3f	; 63
 490:	08 95       	ret
  return tail - head - 1;
 492:	01 97       	sbiw	r24, 0x01	; 1
}
 494:	08 95       	ret

00000496 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 496:	80 ed       	ldi	r24, 0xD0	; 208
 498:	93 e0       	ldi	r25, 0x03	; 3
 49a:	89 2b       	or	r24, r25
 49c:	39 f0       	breq	.+14     	; 0x4ac <_Z14serialEventRunv+0x16>
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	89 2b       	or	r24, r25
 4a4:	19 f0       	breq	.+6      	; 0x4ac <_Z14serialEventRunv+0x16>
 4a6:	7c d1       	rcall	.+760    	; 0x7a0 <_Z17Serial0_availablev>
 4a8:	81 11       	cpse	r24, r1
 4aa:	24 c0       	rjmp	.+72     	; 0x4f4 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	89 2b       	or	r24, r25
 4b2:	41 f0       	breq	.+16     	; 0x4c4 <_Z14serialEventRunv+0x2e>
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	89 2b       	or	r24, r25
 4ba:	21 f0       	breq	.+8      	; 0x4c4 <_Z14serialEventRunv+0x2e>
 4bc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 4c0:	81 11       	cpse	r24, r1
 4c2:	1b c0       	rjmp	.+54     	; 0x4fa <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	89 2b       	or	r24, r25
 4ca:	41 f0       	breq	.+16     	; 0x4dc <_Z14serialEventRunv+0x46>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	89 2b       	or	r24, r25
 4d2:	21 f0       	breq	.+8      	; 0x4dc <_Z14serialEventRunv+0x46>
 4d4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 4d8:	81 11       	cpse	r24, r1
 4da:	12 c0       	rjmp	.+36     	; 0x500 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 4dc:	85 e6       	ldi	r24, 0x65	; 101
 4de:	94 e0       	ldi	r25, 0x04	; 4
 4e0:	89 2b       	or	r24, r25
 4e2:	99 f0       	breq	.+38     	; 0x50a <_Z14serialEventRunv+0x74>
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	89 2b       	or	r24, r25
 4ea:	79 f0       	breq	.+30     	; 0x50a <_Z14serialEventRunv+0x74>
 4ec:	ee d1       	rcall	.+988    	; 0x8ca <_Z17Serial3_availablev>
 4ee:	81 11       	cpse	r24, r1
 4f0:	0a c0       	rjmp	.+20     	; 0x506 <_Z14serialEventRunv+0x70>
 4f2:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 4f4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 4f8:	d9 cf       	rjmp	.-78     	; 0x4ac <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 4fa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 4fe:	e2 cf       	rjmp	.-60     	; 0x4c4 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 500:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 504:	eb cf       	rjmp	.-42     	; 0x4dc <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 506:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 50a:	08 95       	ret

0000050c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 50c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 50e:	84 8d       	ldd	r24, Z+28	; 0x1c
 510:	df 01       	movw	r26, r30
 512:	a8 0f       	add	r26, r24
 514:	b1 1d       	adc	r27, r1
 516:	a3 5a       	subi	r26, 0xA3	; 163
 518:	bf 4f       	sbci	r27, 0xFF	; 255
 51a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 51c:	84 8d       	ldd	r24, Z+28	; 0x1c
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	8f 73       	andi	r24, 0x3F	; 63
 524:	99 27       	eor	r25, r25
 526:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 528:	a6 89       	ldd	r26, Z+22	; 0x16
 52a:	b7 89       	ldd	r27, Z+23	; 0x17
 52c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 52e:	a0 89       	ldd	r26, Z+16	; 0x10
 530:	b1 89       	ldd	r27, Z+17	; 0x11
 532:	8c 91       	ld	r24, X
 534:	80 64       	ori	r24, 0x40	; 64
 536:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 538:	93 8d       	ldd	r25, Z+27	; 0x1b
 53a:	84 8d       	ldd	r24, Z+28	; 0x1c
 53c:	98 13       	cpse	r25, r24
 53e:	06 c0       	rjmp	.+12     	; 0x54c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 540:	02 88       	ldd	r0, Z+18	; 0x12
 542:	f3 89       	ldd	r31, Z+19	; 0x13
 544:	e0 2d       	mov	r30, r0
 546:	80 81       	ld	r24, Z
 548:	8f 7d       	andi	r24, 0xDF	; 223
 54a:	80 83       	st	Z, r24
 54c:	08 95       	ret

0000054e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 54e:	ef 92       	push	r14
 550:	ff 92       	push	r15
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	ec 01       	movw	r28, r24
  _written = true;
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 560:	9b 8d       	ldd	r25, Y+27	; 0x1b
 562:	8c 8d       	ldd	r24, Y+28	; 0x1c
 564:	98 13       	cpse	r25, r24
 566:	05 c0       	rjmp	.+10     	; 0x572 <_ZN14HardwareSerial5writeEh+0x24>
 568:	e8 89       	ldd	r30, Y+16	; 0x10
 56a:	f9 89       	ldd	r31, Y+17	; 0x11
 56c:	80 81       	ld	r24, Z
 56e:	85 fd       	sbrc	r24, 5
 570:	23 c0       	rjmp	.+70     	; 0x5b8 <_ZN14HardwareSerial5writeEh+0x6a>
 572:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 574:	0b 8d       	ldd	r16, Y+27	; 0x1b
 576:	10 e0       	ldi	r17, 0x00	; 0
 578:	0f 5f       	subi	r16, 0xFF	; 255
 57a:	1f 4f       	sbci	r17, 0xFF	; 255
 57c:	0f 73       	andi	r16, 0x3F	; 63
 57e:	11 27       	eor	r17, r17
 580:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 582:	8c 8d       	ldd	r24, Y+28	; 0x1c
 584:	e8 12       	cpse	r14, r24
 586:	0b c0       	rjmp	.+22     	; 0x59e <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	07 fc       	sbrc	r0, 7
 58c:	fa cf       	rjmp	.-12     	; 0x582 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 58e:	e8 89       	ldd	r30, Y+16	; 0x10
 590:	f9 89       	ldd	r31, Y+17	; 0x11
 592:	80 81       	ld	r24, Z
 594:	85 ff       	sbrs	r24, 5
 596:	f5 cf       	rjmp	.-22     	; 0x582 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 598:	ce 01       	movw	r24, r28
 59a:	b8 df       	rcall	.-144    	; 0x50c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 59c:	f2 cf       	rjmp	.-28     	; 0x582 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 59e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 5a0:	fe 01       	movw	r30, r28
 5a2:	e8 0f       	add	r30, r24
 5a4:	f1 1d       	adc	r31, r1
 5a6:	e3 5a       	subi	r30, 0xA3	; 163
 5a8:	ff 4f       	sbci	r31, 0xFF	; 255
 5aa:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 5ac:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 5ae:	ea 89       	ldd	r30, Y+18	; 0x12
 5b0:	fb 89       	ldd	r31, Y+19	; 0x13
 5b2:	80 81       	ld	r24, Z
 5b4:	80 62       	ori	r24, 0x20	; 32
 5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 5b8:	ee 89       	ldd	r30, Y+22	; 0x16
 5ba:	ff 89       	ldd	r31, Y+23	; 0x17
 5bc:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 5be:	e8 89       	ldd	r30, Y+16	; 0x10
 5c0:	f9 89       	ldd	r31, Y+17	; 0x11
 5c2:	80 81       	ld	r24, Z
 5c4:	80 64       	ori	r24, 0x40	; 64
 5c6:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	08 95       	ret

000005da <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 5e0:	88 8d       	ldd	r24, Y+24	; 0x18
 5e2:	88 23       	and	r24, r24
 5e4:	c1 f0       	breq	.+48     	; 0x616 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 5e6:	ea 89       	ldd	r30, Y+18	; 0x12
 5e8:	fb 89       	ldd	r31, Y+19	; 0x13
 5ea:	80 81       	ld	r24, Z
 5ec:	85 fd       	sbrc	r24, 5
 5ee:	05 c0       	rjmp	.+10     	; 0x5fa <_ZN14HardwareSerial5flushEv+0x20>
 5f0:	a8 89       	ldd	r26, Y+16	; 0x10
 5f2:	b9 89       	ldd	r27, Y+17	; 0x11
 5f4:	8c 91       	ld	r24, X
 5f6:	86 fd       	sbrc	r24, 6
 5f8:	0e c0       	rjmp	.+28     	; 0x616 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	07 fc       	sbrc	r0, 7
 5fe:	f5 cf       	rjmp	.-22     	; 0x5ea <_ZN14HardwareSerial5flushEv+0x10>
 600:	80 81       	ld	r24, Z
 602:	85 ff       	sbrs	r24, 5
 604:	f2 cf       	rjmp	.-28     	; 0x5ea <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 606:	a8 89       	ldd	r26, Y+16	; 0x10
 608:	b9 89       	ldd	r27, Y+17	; 0x11
 60a:	8c 91       	ld	r24, X
 60c:	85 ff       	sbrs	r24, 5
 60e:	ed cf       	rjmp	.-38     	; 0x5ea <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 610:	ce 01       	movw	r24, r28
 612:	7c df       	rcall	.-264    	; 0x50c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 614:	e8 cf       	rjmp	.-48     	; 0x5e6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 61c:	cf 92       	push	r12
 61e:	df 92       	push	r13
 620:	ef 92       	push	r14
 622:	ff 92       	push	r15
 624:	1f 93       	push	r17
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	ec 01       	movw	r28, r24
 62c:	6a 01       	movw	r12, r20
 62e:	7b 01       	movw	r14, r22
 630:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 632:	e8 89       	ldd	r30, Y+16	; 0x10
 634:	f9 89       	ldd	r31, Y+17	; 0x11
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 63a:	41 15       	cp	r20, r1
 63c:	51 4e       	sbci	r21, 0xE1	; 225
 63e:	61 05       	cpc	r22, r1
 640:	71 05       	cpc	r23, r1
 642:	a9 f0       	breq	.+42     	; 0x66e <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	79 e0       	ldi	r23, 0x09	; 9
 648:	8d e3       	ldi	r24, 0x3D	; 61
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	a7 01       	movw	r20, r14
 64e:	96 01       	movw	r18, r12
 650:	f4 d3       	rcall	.+2024   	; 0xe3a <__udivmodsi4>
 652:	da 01       	movw	r26, r20
 654:	c9 01       	movw	r24, r18
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	a1 09       	sbc	r26, r1
 65a:	b1 09       	sbc	r27, r1
 65c:	b6 95       	lsr	r27
 65e:	a7 95       	ror	r26
 660:	97 95       	ror	r25
 662:	87 95       	ror	r24
 664:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 666:	21 15       	cp	r18, r1
 668:	80 e1       	ldi	r24, 0x10	; 16
 66a:	38 07       	cpc	r19, r24
 66c:	a0 f0       	brcs	.+40     	; 0x696 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 66e:	e8 89       	ldd	r30, Y+16	; 0x10
 670:	f9 89       	ldd	r31, Y+17	; 0x11
 672:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 674:	60 e8       	ldi	r22, 0x80	; 128
 676:	74 e8       	ldi	r23, 0x84	; 132
 678:	8e e1       	ldi	r24, 0x1E	; 30
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	a7 01       	movw	r20, r14
 67e:	96 01       	movw	r18, r12
 680:	dc d3       	rcall	.+1976   	; 0xe3a <__udivmodsi4>
 682:	da 01       	movw	r26, r20
 684:	c9 01       	movw	r24, r18
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	a1 09       	sbc	r26, r1
 68a:	b1 09       	sbc	r27, r1
 68c:	b6 95       	lsr	r27
 68e:	a7 95       	ror	r26
 690:	97 95       	ror	r25
 692:	87 95       	ror	r24
 694:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 696:	ec 85       	ldd	r30, Y+12	; 0x0c
 698:	fd 85       	ldd	r31, Y+13	; 0x0d
 69a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 69c:	ee 85       	ldd	r30, Y+14	; 0x0e
 69e:	ff 85       	ldd	r31, Y+15	; 0x0f
 6a0:	20 83       	st	Z, r18

  _written = false;
 6a2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 6a4:	ec 89       	ldd	r30, Y+20	; 0x14
 6a6:	fd 89       	ldd	r31, Y+21	; 0x15
 6a8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 6aa:	ea 89       	ldd	r30, Y+18	; 0x12
 6ac:	fb 89       	ldd	r31, Y+19	; 0x13
 6ae:	80 81       	ld	r24, Z
 6b0:	80 61       	ori	r24, 0x10	; 16
 6b2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 6b4:	ea 89       	ldd	r30, Y+18	; 0x12
 6b6:	fb 89       	ldd	r31, Y+19	; 0x13
 6b8:	80 81       	ld	r24, Z
 6ba:	88 60       	ori	r24, 0x08	; 8
 6bc:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 6be:	ea 89       	ldd	r30, Y+18	; 0x12
 6c0:	fb 89       	ldd	r31, Y+19	; 0x13
 6c2:	80 81       	ld	r24, Z
 6c4:	80 68       	ori	r24, 0x80	; 128
 6c6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 6c8:	ea 89       	ldd	r30, Y+18	; 0x12
 6ca:	fb 89       	ldd	r31, Y+19	; 0x13
 6cc:	80 81       	ld	r24, Z
 6ce:	8f 7d       	andi	r24, 0xDF	; 223
 6d0:	80 83       	st	Z, r24
}
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	1f 91       	pop	r17
 6d8:	ff 90       	pop	r15
 6da:	ef 90       	pop	r14
 6dc:	df 90       	pop	r13
 6de:	cf 90       	pop	r12
 6e0:	08 95       	ret

000006e2 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	0b b6       	in	r0, 0x3b	; 59
 6ee:	0f 92       	push	r0
 6f0:	2f 93       	push	r18
 6f2:	8f 93       	push	r24
 6f4:	9f 93       	push	r25
 6f6:	ef 93       	push	r30
 6f8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 6fa:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <Serial+0x10>
 6fe:	f0 91 33 03 	lds	r31, 0x0333	; 0x800333 <Serial+0x11>
 702:	80 81       	ld	r24, Z
 704:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <Serial+0x16>
 708:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <Serial+0x17>
 70c:	82 fd       	sbrc	r24, 2
 70e:	12 c0       	rjmp	.+36     	; 0x734 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 710:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 712:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <Serial+0x19>
 716:	8f 5f       	subi	r24, 0xFF	; 255
 718:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 71a:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <Serial+0x1a>
 71e:	82 17       	cp	r24, r18
 720:	51 f0       	breq	.+20     	; 0x736 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 722:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <Serial+0x19>
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	ee 5d       	subi	r30, 0xDE	; 222
 72a:	fc 4f       	sbci	r31, 0xFC	; 252
 72c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 72e:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <Serial+0x19>
 732:	01 c0       	rjmp	.+2      	; 0x736 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 734:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 736:	ff 91       	pop	r31
 738:	ef 91       	pop	r30
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	2f 91       	pop	r18
 740:	0f 90       	pop	r0
 742:	0b be       	out	0x3b, r0	; 59
 744:	0f 90       	pop	r0
 746:	0f be       	out	0x3f, r0	; 63
 748:	0f 90       	pop	r0
 74a:	1f 90       	pop	r1
 74c:	18 95       	reti

0000074e <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 74e:	1f 92       	push	r1
 750:	0f 92       	push	r0
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	0f 92       	push	r0
 756:	11 24       	eor	r1, r1
 758:	0b b6       	in	r0, 0x3b	; 59
 75a:	0f 92       	push	r0
 75c:	2f 93       	push	r18
 75e:	3f 93       	push	r19
 760:	4f 93       	push	r20
 762:	5f 93       	push	r21
 764:	6f 93       	push	r22
 766:	7f 93       	push	r23
 768:	8f 93       	push	r24
 76a:	9f 93       	push	r25
 76c:	af 93       	push	r26
 76e:	bf 93       	push	r27
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 774:	82 e2       	ldi	r24, 0x22	; 34
 776:	93 e0       	ldi	r25, 0x03	; 3
 778:	c9 de       	rcall	.-622    	; 0x50c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 77a:	ff 91       	pop	r31
 77c:	ef 91       	pop	r30
 77e:	bf 91       	pop	r27
 780:	af 91       	pop	r26
 782:	9f 91       	pop	r25
 784:	8f 91       	pop	r24
 786:	7f 91       	pop	r23
 788:	6f 91       	pop	r22
 78a:	5f 91       	pop	r21
 78c:	4f 91       	pop	r20
 78e:	3f 91       	pop	r19
 790:	2f 91       	pop	r18
 792:	0f 90       	pop	r0
 794:	0b be       	out	0x3b, r0	; 59
 796:	0f 90       	pop	r0
 798:	0f be       	out	0x3f, r0	; 63
 79a:	0f 90       	pop	r0
 79c:	1f 90       	pop	r1
 79e:	18 95       	reti

000007a0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 7a0:	82 e2       	ldi	r24, 0x22	; 34
 7a2:	93 e0       	ldi	r25, 0x03	; 3
 7a4:	3b de       	rcall	.-906    	; 0x41c <_ZN14HardwareSerial9availableEv>
 7a6:	21 e0       	ldi	r18, 0x01	; 1
 7a8:	89 2b       	or	r24, r25
 7aa:	09 f4       	brne	.+2      	; 0x7ae <_Z17Serial0_availablev+0xe>
 7ac:	20 e0       	ldi	r18, 0x00	; 0
}
 7ae:	82 2f       	mov	r24, r18
 7b0:	08 95       	ret

000007b2 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 7b2:	e2 e2       	ldi	r30, 0x22	; 34
 7b4:	f3 e0       	ldi	r31, 0x03	; 3
 7b6:	13 82       	std	Z+3, r1	; 0x03
 7b8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 7ba:	88 ee       	ldi	r24, 0xE8	; 232
 7bc:	93 e0       	ldi	r25, 0x03	; 3
 7be:	a0 e0       	ldi	r26, 0x00	; 0
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	84 83       	std	Z+4, r24	; 0x04
 7c4:	95 83       	std	Z+5, r25	; 0x05
 7c6:	a6 83       	std	Z+6, r26	; 0x06
 7c8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 7ca:	83 e0       	ldi	r24, 0x03	; 3
 7cc:	93 e0       	ldi	r25, 0x03	; 3
 7ce:	91 83       	std	Z+1, r25	; 0x01
 7d0:	80 83       	st	Z, r24
 7d2:	85 ec       	ldi	r24, 0xC5	; 197
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	95 87       	std	Z+13, r25	; 0x0d
 7d8:	84 87       	std	Z+12, r24	; 0x0c
 7da:	84 ec       	ldi	r24, 0xC4	; 196
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	97 87       	std	Z+15, r25	; 0x0f
 7e0:	86 87       	std	Z+14, r24	; 0x0e
 7e2:	80 ec       	ldi	r24, 0xC0	; 192
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	91 8b       	std	Z+17, r25	; 0x11
 7e8:	80 8b       	std	Z+16, r24	; 0x10
 7ea:	81 ec       	ldi	r24, 0xC1	; 193
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	93 8b       	std	Z+19, r25	; 0x13
 7f0:	82 8b       	std	Z+18, r24	; 0x12
 7f2:	82 ec       	ldi	r24, 0xC2	; 194
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	95 8b       	std	Z+21, r25	; 0x15
 7f8:	84 8b       	std	Z+20, r24	; 0x14
 7fa:	86 ec       	ldi	r24, 0xC6	; 198
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	97 8b       	std	Z+23, r25	; 0x17
 800:	86 8b       	std	Z+22, r24	; 0x16
 802:	11 8e       	std	Z+25, r1	; 0x19
 804:	12 8e       	std	Z+26, r1	; 0x1a
 806:	13 8e       	std	Z+27, r1	; 0x1b
 808:	14 8e       	std	Z+28, r1	; 0x1c
 80a:	08 95       	ret

0000080c <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
 80c:	1f 92       	push	r1
 80e:	0f 92       	push	r0
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	0f 92       	push	r0
 814:	11 24       	eor	r1, r1
 816:	0b b6       	in	r0, 0x3b	; 59
 818:	0f 92       	push	r0
 81a:	2f 93       	push	r18
 81c:	8f 93       	push	r24
 81e:	9f 93       	push	r25
 820:	ef 93       	push	r30
 822:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 824:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Serial3+0x10>
 828:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <Serial3+0x11>
 82c:	80 81       	ld	r24, Z
 82e:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <Serial3+0x16>
 832:	f0 91 d6 03 	lds	r31, 0x03D6	; 0x8003d6 <Serial3+0x17>
 836:	82 fd       	sbrc	r24, 2
 838:	12 c0       	rjmp	.+36     	; 0x85e <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 83a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 83c:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <Serial3+0x19>
 840:	8f 5f       	subi	r24, 0xFF	; 255
 842:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 844:	20 91 d9 03 	lds	r18, 0x03D9	; 0x8003d9 <Serial3+0x1a>
 848:	82 17       	cp	r24, r18
 84a:	51 f0       	breq	.+20     	; 0x860 <__vector_54+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 84c:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <Serial3+0x19>
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	e1 54       	subi	r30, 0x41	; 65
 854:	fc 4f       	sbci	r31, 0xFC	; 252
 856:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 858:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <Serial3+0x19>
 85c:	01 c0       	rjmp	.+2      	; 0x860 <__vector_54+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 85e:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
 860:	ff 91       	pop	r31
 862:	ef 91       	pop	r30
 864:	9f 91       	pop	r25
 866:	8f 91       	pop	r24
 868:	2f 91       	pop	r18
 86a:	0f 90       	pop	r0
 86c:	0b be       	out	0x3b, r0	; 59
 86e:	0f 90       	pop	r0
 870:	0f be       	out	0x3f, r0	; 63
 872:	0f 90       	pop	r0
 874:	1f 90       	pop	r1
 876:	18 95       	reti

00000878 <__vector_55>:

ISR(USART3_UDRE_vect)
{
 878:	1f 92       	push	r1
 87a:	0f 92       	push	r0
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	0f 92       	push	r0
 880:	11 24       	eor	r1, r1
 882:	0b b6       	in	r0, 0x3b	; 59
 884:	0f 92       	push	r0
 886:	2f 93       	push	r18
 888:	3f 93       	push	r19
 88a:	4f 93       	push	r20
 88c:	5f 93       	push	r21
 88e:	6f 93       	push	r22
 890:	7f 93       	push	r23
 892:	8f 93       	push	r24
 894:	9f 93       	push	r25
 896:	af 93       	push	r26
 898:	bf 93       	push	r27
 89a:	ef 93       	push	r30
 89c:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
 89e:	8f eb       	ldi	r24, 0xBF	; 191
 8a0:	93 e0       	ldi	r25, 0x03	; 3
 8a2:	34 de       	rcall	.-920    	; 0x50c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 8a4:	ff 91       	pop	r31
 8a6:	ef 91       	pop	r30
 8a8:	bf 91       	pop	r27
 8aa:	af 91       	pop	r26
 8ac:	9f 91       	pop	r25
 8ae:	8f 91       	pop	r24
 8b0:	7f 91       	pop	r23
 8b2:	6f 91       	pop	r22
 8b4:	5f 91       	pop	r21
 8b6:	4f 91       	pop	r20
 8b8:	3f 91       	pop	r19
 8ba:	2f 91       	pop	r18
 8bc:	0f 90       	pop	r0
 8be:	0b be       	out	0x3b, r0	; 59
 8c0:	0f 90       	pop	r0
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	0f 90       	pop	r0
 8c6:	1f 90       	pop	r1
 8c8:	18 95       	reti

000008ca <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
 8ca:	8f eb       	ldi	r24, 0xBF	; 191
 8cc:	93 e0       	ldi	r25, 0x03	; 3
 8ce:	a6 dd       	rcall	.-1204   	; 0x41c <_ZN14HardwareSerial9availableEv>
 8d0:	21 e0       	ldi	r18, 0x01	; 1
 8d2:	89 2b       	or	r24, r25
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <_Z17Serial3_availablev+0xe>
 8d6:	20 e0       	ldi	r18, 0x00	; 0
}
 8d8:	82 2f       	mov	r24, r18
 8da:	08 95       	ret

000008dc <_GLOBAL__sub_I___vector_54>:
 8dc:	ef eb       	ldi	r30, 0xBF	; 191
 8de:	f3 e0       	ldi	r31, 0x03	; 3
 8e0:	13 82       	std	Z+3, r1	; 0x03
 8e2:	12 82       	std	Z+2, r1	; 0x02
 8e4:	88 ee       	ldi	r24, 0xE8	; 232
 8e6:	93 e0       	ldi	r25, 0x03	; 3
 8e8:	a0 e0       	ldi	r26, 0x00	; 0
 8ea:	b0 e0       	ldi	r27, 0x00	; 0
 8ec:	84 83       	std	Z+4, r24	; 0x04
 8ee:	95 83       	std	Z+5, r25	; 0x05
 8f0:	a6 83       	std	Z+6, r26	; 0x06
 8f2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 8f4:	83 e0       	ldi	r24, 0x03	; 3
 8f6:	93 e0       	ldi	r25, 0x03	; 3
 8f8:	91 83       	std	Z+1, r25	; 0x01
 8fa:	80 83       	st	Z, r24
 8fc:	85 e3       	ldi	r24, 0x35	; 53
 8fe:	91 e0       	ldi	r25, 0x01	; 1
 900:	95 87       	std	Z+13, r25	; 0x0d
 902:	84 87       	std	Z+12, r24	; 0x0c
 904:	84 e3       	ldi	r24, 0x34	; 52
 906:	91 e0       	ldi	r25, 0x01	; 1
 908:	97 87       	std	Z+15, r25	; 0x0f
 90a:	86 87       	std	Z+14, r24	; 0x0e
 90c:	80 e3       	ldi	r24, 0x30	; 48
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	91 8b       	std	Z+17, r25	; 0x11
 912:	80 8b       	std	Z+16, r24	; 0x10
 914:	81 e3       	ldi	r24, 0x31	; 49
 916:	91 e0       	ldi	r25, 0x01	; 1
 918:	93 8b       	std	Z+19, r25	; 0x13
 91a:	82 8b       	std	Z+18, r24	; 0x12
 91c:	82 e3       	ldi	r24, 0x32	; 50
 91e:	91 e0       	ldi	r25, 0x01	; 1
 920:	95 8b       	std	Z+21, r25	; 0x15
 922:	84 8b       	std	Z+20, r24	; 0x14
 924:	86 e3       	ldi	r24, 0x36	; 54
 926:	91 e0       	ldi	r25, 0x01	; 1
 928:	97 8b       	std	Z+23, r25	; 0x17
 92a:	86 8b       	std	Z+22, r24	; 0x16
 92c:	11 8e       	std	Z+25, r1	; 0x19
 92e:	12 8e       	std	Z+26, r1	; 0x1a
 930:	13 8e       	std	Z+27, r1	; 0x1b
 932:	14 8e       	std	Z+28, r1	; 0x1c
 934:	08 95       	ret

00000936 <initVariant>:
 936:	08 95       	ret

00000938 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 938:	5f d1       	rcall	.+702    	; 0xbf8 <init>

	initVariant();
 93a:	fd df       	rcall	.-6      	; 0x936 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 93c:	a0 dc       	rcall	.-1728   	; 0x27e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 93e:	cb e4       	ldi	r28, 0x4B	; 75
 940:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 942:	c2 dc       	rcall	.-1660   	; 0x2c8 <loop>
		if (serialEventRun) serialEventRun();
 944:	20 97       	sbiw	r28, 0x00	; 0
 946:	e9 f3       	breq	.-6      	; 0x942 <main+0xa>
 948:	a6 dd       	rcall	.-1204   	; 0x496 <_Z14serialEventRunv>
 94a:	fb cf       	rjmp	.-10     	; 0x942 <main+0xa>

0000094c <_ZN5Print5writeEPKhj>:
 94c:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 94e:	df 92       	push	r13
 950:	ef 92       	push	r14
 952:	ff 92       	push	r15
 954:	0f 93       	push	r16
 956:	1f 93       	push	r17
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	6c 01       	movw	r12, r24
 95e:	7a 01       	movw	r14, r20
 960:	8b 01       	movw	r16, r22
 962:	c0 e0       	ldi	r28, 0x00	; 0
 964:	d0 e0       	ldi	r29, 0x00	; 0
 966:	ce 15       	cp	r28, r14
 968:	df 05       	cpc	r29, r15
 96a:	81 f0       	breq	.+32     	; 0x98c <_ZN5Print5writeEPKhj+0x40>
 96c:	d8 01       	movw	r26, r16
 96e:	6d 91       	ld	r22, X+
 970:	8d 01       	movw	r16, r26
 972:	d6 01       	movw	r26, r12
 974:	ed 91       	ld	r30, X+
 976:	fc 91       	ld	r31, X
 978:	01 90       	ld	r0, Z+
 97a:	f0 81       	ld	r31, Z
 97c:	e0 2d       	mov	r30, r0
 97e:	c6 01       	movw	r24, r12
 980:	19 95       	eicall
 982:	89 2b       	or	r24, r25
 984:	11 f0       	breq	.+4      	; 0x98a <_ZN5Print5writeEPKhj+0x3e>
 986:	21 96       	adiw	r28, 0x01	; 1
 988:	ee cf       	rjmp	.-36     	; 0x966 <_ZN5Print5writeEPKhj+0x1a>
 98a:	7e 01       	movw	r14, r28
 98c:	c7 01       	movw	r24, r14
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	1f 91       	pop	r17
 994:	0f 91       	pop	r16
 996:	ff 90       	pop	r15
 998:	ef 90       	pop	r14
 99a:	df 90       	pop	r13
 99c:	cf 90       	pop	r12
 99e:	08 95       	ret

000009a0 <_ZN5Print5writeEPKc>:
 9a0:	61 15       	cp	r22, r1
 9a2:	71 05       	cpc	r23, r1
 9a4:	79 f0       	breq	.+30     	; 0x9c4 <_ZN5Print5writeEPKc+0x24>
 9a6:	fb 01       	movw	r30, r22
 9a8:	01 90       	ld	r0, Z+
 9aa:	00 20       	and	r0, r0
 9ac:	e9 f7       	brne	.-6      	; 0x9a8 <_ZN5Print5writeEPKc+0x8>
 9ae:	31 97       	sbiw	r30, 0x01	; 1
 9b0:	af 01       	movw	r20, r30
 9b2:	46 1b       	sub	r20, r22
 9b4:	57 0b       	sbc	r21, r23
 9b6:	dc 01       	movw	r26, r24
 9b8:	ed 91       	ld	r30, X+
 9ba:	fc 91       	ld	r31, X
 9bc:	02 80       	ldd	r0, Z+2	; 0x02
 9be:	f3 81       	ldd	r31, Z+3	; 0x03
 9c0:	e0 2d       	mov	r30, r0
 9c2:	19 94       	eijmp
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	08 95       	ret

000009ca <_ZN5Print5printEPKc>:
 9ca:	ea cf       	rjmp	.-44     	; 0x9a0 <_ZN5Print5writeEPKc>

000009cc <_ZN5Print5printEc>:
 9cc:	dc 01       	movw	r26, r24
 9ce:	ed 91       	ld	r30, X+
 9d0:	fc 91       	ld	r31, X
 9d2:	01 90       	ld	r0, Z+
 9d4:	f0 81       	ld	r31, Z
 9d6:	e0 2d       	mov	r30, r0
 9d8:	19 94       	eijmp

000009da <_ZN5Print7printlnEv>:
 9da:	61 e1       	ldi	r22, 0x11	; 17
 9dc:	73 e0       	ldi	r23, 0x03	; 3
 9de:	e0 cf       	rjmp	.-64     	; 0x9a0 <_ZN5Print5writeEPKc>

000009e0 <_ZN5Print7printlnEPKc>:
 9e0:	0f 93       	push	r16
 9e2:	1f 93       	push	r17
 9e4:	cf 93       	push	r28
 9e6:	df 93       	push	r29
 9e8:	ec 01       	movw	r28, r24
 9ea:	da df       	rcall	.-76     	; 0x9a0 <_ZN5Print5writeEPKc>
 9ec:	8c 01       	movw	r16, r24
 9ee:	ce 01       	movw	r24, r28
 9f0:	f4 df       	rcall	.-24     	; 0x9da <_ZN5Print7printlnEv>
 9f2:	80 0f       	add	r24, r16
 9f4:	91 1f       	adc	r25, r17
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	1f 91       	pop	r17
 9fc:	0f 91       	pop	r16
 9fe:	08 95       	ret

00000a00 <_ZN5Print7printlnEc>:
 a00:	0f 93       	push	r16
 a02:	1f 93       	push	r17
 a04:	cf 93       	push	r28
 a06:	df 93       	push	r29
 a08:	ec 01       	movw	r28, r24
 a0a:	e0 df       	rcall	.-64     	; 0x9cc <_ZN5Print5printEc>
 a0c:	8c 01       	movw	r16, r24
 a0e:	ce 01       	movw	r24, r28
 a10:	e4 df       	rcall	.-56     	; 0x9da <_ZN5Print7printlnEv>
 a12:	80 0f       	add	r24, r16
 a14:	91 1f       	adc	r25, r17
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	1f 91       	pop	r17
 a1c:	0f 91       	pop	r16
 a1e:	08 95       	ret

00000a20 <_ZN5Print11printNumberEmh>:
 a20:	8f 92       	push	r8
 a22:	9f 92       	push	r9
 a24:	af 92       	push	r10
 a26:	bf 92       	push	r11
 a28:	ef 92       	push	r14
 a2a:	ff 92       	push	r15
 a2c:	0f 93       	push	r16
 a2e:	1f 93       	push	r17
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
 a38:	a1 97       	sbiw	r28, 0x21	; 33
 a3a:	0f b6       	in	r0, 0x3f	; 63
 a3c:	f8 94       	cli
 a3e:	de bf       	out	0x3e, r29	; 62
 a40:	0f be       	out	0x3f, r0	; 63
 a42:	cd bf       	out	0x3d, r28	; 61
 a44:	7c 01       	movw	r14, r24
 a46:	fa 01       	movw	r30, r20
 a48:	cb 01       	movw	r24, r22
 a4a:	19 a2       	std	Y+33, r1	; 0x21
 a4c:	22 30       	cpi	r18, 0x02	; 2
 a4e:	08 f4       	brcc	.+2      	; 0xa52 <_ZN5Print11printNumberEmh+0x32>
 a50:	2a e0       	ldi	r18, 0x0A	; 10
 a52:	8e 01       	movw	r16, r28
 a54:	0f 5d       	subi	r16, 0xDF	; 223
 a56:	1f 4f       	sbci	r17, 0xFF	; 255
 a58:	82 2e       	mov	r8, r18
 a5a:	91 2c       	mov	r9, r1
 a5c:	a1 2c       	mov	r10, r1
 a5e:	b1 2c       	mov	r11, r1
 a60:	bf 01       	movw	r22, r30
 a62:	a5 01       	movw	r20, r10
 a64:	94 01       	movw	r18, r8
 a66:	e9 d1       	rcall	.+978    	; 0xe3a <__udivmodsi4>
 a68:	f9 01       	movw	r30, r18
 a6a:	ca 01       	movw	r24, r20
 a6c:	01 50       	subi	r16, 0x01	; 1
 a6e:	11 09       	sbc	r17, r1
 a70:	6a 30       	cpi	r22, 0x0A	; 10
 a72:	10 f4       	brcc	.+4      	; 0xa78 <_ZN5Print11printNumberEmh+0x58>
 a74:	60 5d       	subi	r22, 0xD0	; 208
 a76:	01 c0       	rjmp	.+2      	; 0xa7a <_ZN5Print11printNumberEmh+0x5a>
 a78:	69 5c       	subi	r22, 0xC9	; 201
 a7a:	d8 01       	movw	r26, r16
 a7c:	6c 93       	st	X, r22
 a7e:	23 2b       	or	r18, r19
 a80:	24 2b       	or	r18, r20
 a82:	25 2b       	or	r18, r21
 a84:	69 f7       	brne	.-38     	; 0xa60 <_ZN5Print11printNumberEmh+0x40>
 a86:	b8 01       	movw	r22, r16
 a88:	c7 01       	movw	r24, r14
 a8a:	8a df       	rcall	.-236    	; 0x9a0 <_ZN5Print5writeEPKc>
 a8c:	a1 96       	adiw	r28, 0x21	; 33
 a8e:	0f b6       	in	r0, 0x3f	; 63
 a90:	f8 94       	cli
 a92:	de bf       	out	0x3e, r29	; 62
 a94:	0f be       	out	0x3f, r0	; 63
 a96:	cd bf       	out	0x3d, r28	; 61
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	1f 91       	pop	r17
 a9e:	0f 91       	pop	r16
 aa0:	ff 90       	pop	r15
 aa2:	ef 90       	pop	r14
 aa4:	bf 90       	pop	r11
 aa6:	af 90       	pop	r10
 aa8:	9f 90       	pop	r9
 aaa:	8f 90       	pop	r8
 aac:	08 95       	ret

00000aae <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 aae:	cf 92       	push	r12
 ab0:	df 92       	push	r13
 ab2:	ef 92       	push	r14
 ab4:	ff 92       	push	r15
 ab6:	0f 93       	push	r16
 ab8:	1f 93       	push	r17
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
  if (base == 0) {
 abe:	21 15       	cp	r18, r1
 ac0:	31 05       	cpc	r19, r1
 ac2:	81 f4       	brne	.+32     	; 0xae4 <_ZN5Print5printEli+0x36>
    return write(n);
 ac4:	dc 01       	movw	r26, r24
 ac6:	ed 91       	ld	r30, X+
 ac8:	fc 91       	ld	r31, X
 aca:	01 90       	ld	r0, Z+
 acc:	f0 81       	ld	r31, Z
 ace:	e0 2d       	mov	r30, r0
 ad0:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 ad2:	df 91       	pop	r29
 ad4:	cf 91       	pop	r28
 ad6:	1f 91       	pop	r17
 ad8:	0f 91       	pop	r16
 ada:	ff 90       	pop	r15
 adc:	ef 90       	pop	r14
 ade:	df 90       	pop	r13
 ae0:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 ae2:	19 94       	eijmp
  } else if (base == 10) {
 ae4:	2a 30       	cpi	r18, 0x0A	; 10
 ae6:	31 05       	cpc	r19, r1
 ae8:	f1 f4       	brne	.+60     	; 0xb26 <_ZN5Print5printEli+0x78>
    if (n < 0) {
 aea:	77 ff       	sbrs	r23, 7
 aec:	1b c0       	rjmp	.+54     	; 0xb24 <_ZN5Print5printEli+0x76>
 aee:	6a 01       	movw	r12, r20
 af0:	7b 01       	movw	r14, r22
 af2:	ec 01       	movw	r28, r24
      int t = print('-');
 af4:	6d e2       	ldi	r22, 0x2D	; 45
 af6:	6a df       	rcall	.-300    	; 0x9cc <_ZN5Print5printEc>
 af8:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 afa:	44 27       	eor	r20, r20
 afc:	55 27       	eor	r21, r21
 afe:	ba 01       	movw	r22, r20
 b00:	4c 19       	sub	r20, r12
 b02:	5d 09       	sbc	r21, r13
 b04:	6e 09       	sbc	r22, r14
 b06:	7f 09       	sbc	r23, r15
 b08:	2a e0       	ldi	r18, 0x0A	; 10
 b0a:	ce 01       	movw	r24, r28
 b0c:	89 df       	rcall	.-238    	; 0xa20 <_ZN5Print11printNumberEmh>
 b0e:	80 0f       	add	r24, r16
 b10:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 b12:	df 91       	pop	r29
 b14:	cf 91       	pop	r28
 b16:	1f 91       	pop	r17
 b18:	0f 91       	pop	r16
 b1a:	ff 90       	pop	r15
 b1c:	ef 90       	pop	r14
 b1e:	df 90       	pop	r13
 b20:	cf 90       	pop	r12
 b22:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 b24:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 b26:	df 91       	pop	r29
 b28:	cf 91       	pop	r28
 b2a:	1f 91       	pop	r17
 b2c:	0f 91       	pop	r16
 b2e:	ff 90       	pop	r15
 b30:	ef 90       	pop	r14
 b32:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 b34:	cf 90       	pop	r12
 b36:	74 cf       	rjmp	.-280    	; 0xa20 <_ZN5Print11printNumberEmh>

00000b38 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 b38:	9a 01       	movw	r18, r20
  return print((long) n, base);
 b3a:	ab 01       	movw	r20, r22
 b3c:	77 0f       	add	r23, r23
 b3e:	66 0b       	sbc	r22, r22
 b40:	77 0b       	sbc	r23, r23
 b42:	b5 cf       	rjmp	.-150    	; 0xaae <_ZN5Print5printEli>

00000b44 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 b44:	0f 93       	push	r16
 b46:	1f 93       	push	r17
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 b4e:	f4 df       	rcall	.-24     	; 0xb38 <_ZN5Print5printEii>
 b50:	8c 01       	movw	r16, r24
  n += println();
 b52:	ce 01       	movw	r24, r28
 b54:	42 df       	rcall	.-380    	; 0x9da <_ZN5Print7printlnEv>
  return n;
}
 b56:	80 0f       	add	r24, r16
 b58:	91 1f       	adc	r25, r17
 b5a:	df 91       	pop	r29
 b5c:	cf 91       	pop	r28
 b5e:	1f 91       	pop	r17
 b60:	0f 91       	pop	r16
 b62:	08 95       	ret

00000b64 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 b64:	1f 92       	push	r1
 b66:	0f 92       	push	r0
 b68:	0f b6       	in	r0, 0x3f	; 63
 b6a:	0f 92       	push	r0
 b6c:	11 24       	eor	r1, r1
 b6e:	2f 93       	push	r18
 b70:	3f 93       	push	r19
 b72:	8f 93       	push	r24
 b74:	9f 93       	push	r25
 b76:	af 93       	push	r26
 b78:	bf 93       	push	r27
 b7a:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <timer0_millis>
 b7e:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <timer0_millis+0x1>
 b82:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <timer0_millis+0x2>
 b86:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <timer0_millis+0x3>
 b8a:	30 91 5c 04 	lds	r19, 0x045C	; 0x80045c <timer0_fract>
 b8e:	23 e0       	ldi	r18, 0x03	; 3
 b90:	23 0f       	add	r18, r19
 b92:	2d 37       	cpi	r18, 0x7D	; 125
 b94:	20 f4       	brcc	.+8      	; 0xb9e <__vector_23+0x3a>
 b96:	01 96       	adiw	r24, 0x01	; 1
 b98:	a1 1d       	adc	r26, r1
 b9a:	b1 1d       	adc	r27, r1
 b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__vector_23+0x44>
 b9e:	26 e8       	ldi	r18, 0x86	; 134
 ba0:	23 0f       	add	r18, r19
 ba2:	02 96       	adiw	r24, 0x02	; 2
 ba4:	a1 1d       	adc	r26, r1
 ba6:	b1 1d       	adc	r27, r1
 ba8:	20 93 5c 04 	sts	0x045C, r18	; 0x80045c <timer0_fract>
 bac:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <timer0_millis>
 bb0:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <timer0_millis+0x1>
 bb4:	a0 93 5f 04 	sts	0x045F, r26	; 0x80045f <timer0_millis+0x2>
 bb8:	b0 93 60 04 	sts	0x0460, r27	; 0x800460 <timer0_millis+0x3>
 bbc:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <timer0_overflow_count>
 bc0:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <timer0_overflow_count+0x1>
 bc4:	a0 91 63 04 	lds	r26, 0x0463	; 0x800463 <timer0_overflow_count+0x2>
 bc8:	b0 91 64 04 	lds	r27, 0x0464	; 0x800464 <timer0_overflow_count+0x3>
 bcc:	01 96       	adiw	r24, 0x01	; 1
 bce:	a1 1d       	adc	r26, r1
 bd0:	b1 1d       	adc	r27, r1
 bd2:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <timer0_overflow_count>
 bd6:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <timer0_overflow_count+0x1>
 bda:	a0 93 63 04 	sts	0x0463, r26	; 0x800463 <timer0_overflow_count+0x2>
 bde:	b0 93 64 04 	sts	0x0464, r27	; 0x800464 <timer0_overflow_count+0x3>
 be2:	bf 91       	pop	r27
 be4:	af 91       	pop	r26
 be6:	9f 91       	pop	r25
 be8:	8f 91       	pop	r24
 bea:	3f 91       	pop	r19
 bec:	2f 91       	pop	r18
 bee:	0f 90       	pop	r0
 bf0:	0f be       	out	0x3f, r0	; 63
 bf2:	0f 90       	pop	r0
 bf4:	1f 90       	pop	r1
 bf6:	18 95       	reti

00000bf8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 bf8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 bfa:	84 b5       	in	r24, 0x24	; 36
 bfc:	82 60       	ori	r24, 0x02	; 2
 bfe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 c00:	84 b5       	in	r24, 0x24	; 36
 c02:	81 60       	ori	r24, 0x01	; 1
 c04:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 c06:	85 b5       	in	r24, 0x25	; 37
 c08:	82 60       	ori	r24, 0x02	; 2
 c0a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 c0c:	85 b5       	in	r24, 0x25	; 37
 c0e:	81 60       	ori	r24, 0x01	; 1
 c10:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 c12:	ee e6       	ldi	r30, 0x6E	; 110
 c14:	f0 e0       	ldi	r31, 0x00	; 0
 c16:	80 81       	ld	r24, Z
 c18:	81 60       	ori	r24, 0x01	; 1
 c1a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 c1c:	e1 e8       	ldi	r30, 0x81	; 129
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 c22:	80 81       	ld	r24, Z
 c24:	82 60       	ori	r24, 0x02	; 2
 c26:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 c28:	80 81       	ld	r24, Z
 c2a:	81 60       	ori	r24, 0x01	; 1
 c2c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 c2e:	e0 e8       	ldi	r30, 0x80	; 128
 c30:	f0 e0       	ldi	r31, 0x00	; 0
 c32:	80 81       	ld	r24, Z
 c34:	81 60       	ori	r24, 0x01	; 1
 c36:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 c38:	e1 eb       	ldi	r30, 0xB1	; 177
 c3a:	f0 e0       	ldi	r31, 0x00	; 0
 c3c:	80 81       	ld	r24, Z
 c3e:	84 60       	ori	r24, 0x04	; 4
 c40:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 c42:	e0 eb       	ldi	r30, 0xB0	; 176
 c44:	f0 e0       	ldi	r31, 0x00	; 0
 c46:	80 81       	ld	r24, Z
 c48:	81 60       	ori	r24, 0x01	; 1
 c4a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 c4c:	e1 e9       	ldi	r30, 0x91	; 145
 c4e:	f0 e0       	ldi	r31, 0x00	; 0
 c50:	80 81       	ld	r24, Z
 c52:	82 60       	ori	r24, 0x02	; 2
 c54:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 c56:	80 81       	ld	r24, Z
 c58:	81 60       	ori	r24, 0x01	; 1
 c5a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 c5c:	e0 e9       	ldi	r30, 0x90	; 144
 c5e:	f0 e0       	ldi	r31, 0x00	; 0
 c60:	80 81       	ld	r24, Z
 c62:	81 60       	ori	r24, 0x01	; 1
 c64:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 c66:	e1 ea       	ldi	r30, 0xA1	; 161
 c68:	f0 e0       	ldi	r31, 0x00	; 0
 c6a:	80 81       	ld	r24, Z
 c6c:	82 60       	ori	r24, 0x02	; 2
 c6e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 c70:	80 81       	ld	r24, Z
 c72:	81 60       	ori	r24, 0x01	; 1
 c74:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 c76:	e0 ea       	ldi	r30, 0xA0	; 160
 c78:	f0 e0       	ldi	r31, 0x00	; 0
 c7a:	80 81       	ld	r24, Z
 c7c:	81 60       	ori	r24, 0x01	; 1
 c7e:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 c80:	e1 e2       	ldi	r30, 0x21	; 33
 c82:	f1 e0       	ldi	r31, 0x01	; 1
 c84:	80 81       	ld	r24, Z
 c86:	82 60       	ori	r24, 0x02	; 2
 c88:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 c8a:	80 81       	ld	r24, Z
 c8c:	81 60       	ori	r24, 0x01	; 1
 c8e:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 c90:	e0 e2       	ldi	r30, 0x20	; 32
 c92:	f1 e0       	ldi	r31, 0x01	; 1
 c94:	80 81       	ld	r24, Z
 c96:	81 60       	ori	r24, 0x01	; 1
 c98:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 c9a:	ea e7       	ldi	r30, 0x7A	; 122
 c9c:	f0 e0       	ldi	r31, 0x00	; 0
 c9e:	80 81       	ld	r24, Z
 ca0:	84 60       	ori	r24, 0x04	; 4
 ca2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 ca4:	80 81       	ld	r24, Z
 ca6:	82 60       	ori	r24, 0x02	; 2
 ca8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 caa:	80 81       	ld	r24, Z
 cac:	81 60       	ori	r24, 0x01	; 1
 cae:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 cb0:	80 81       	ld	r24, Z
 cb2:	80 68       	ori	r24, 0x80	; 128
 cb4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 cb6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 cba:	08 95       	ret

00000cbc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	fc 01       	movw	r30, r24
 cc0:	31 97       	sbiw	r30, 0x01	; 1
 cc2:	e2 31       	cpi	r30, 0x12	; 18
 cc4:	f1 05       	cpc	r31, r1
 cc6:	08 f0       	brcs	.+2      	; 0xcca <turnOffPWM+0xe>
 cc8:	4d c0       	rjmp	.+154    	; 0xd64 <turnOffPWM+0xa8>
 cca:	88 27       	eor	r24, r24
 ccc:	e7 58       	subi	r30, 0x87	; 135
 cce:	ff 4f       	sbci	r31, 0xFF	; 255
 cd0:	8f 4f       	sbci	r24, 0xFF	; 255
 cd2:	d5 c0       	rjmp	.+426    	; 0xe7e <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 cd4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 cd8:	8f 77       	andi	r24, 0x7F	; 127
 cda:	03 c0       	rjmp	.+6      	; 0xce2 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 cdc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 ce0:	8f 7d       	andi	r24, 0xDF	; 223
 ce2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 ce6:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 ce8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 cec:	87 7f       	andi	r24, 0xF7	; 247
 cee:	f9 cf       	rjmp	.-14     	; 0xce2 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 cf0:	84 b5       	in	r24, 0x24	; 36
 cf2:	8f 77       	andi	r24, 0x7F	; 127
 cf4:	02 c0       	rjmp	.+4      	; 0xcfa <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 cf6:	84 b5       	in	r24, 0x24	; 36
 cf8:	8f 7d       	andi	r24, 0xDF	; 223
 cfa:	84 bd       	out	0x24, r24	; 36
 cfc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 cfe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 d02:	8f 77       	andi	r24, 0x7F	; 127
 d04:	03 c0       	rjmp	.+6      	; 0xd0c <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 d06:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 d0a:	8f 7d       	andi	r24, 0xDF	; 223
 d0c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 d10:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 d12:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 d16:	8f 77       	andi	r24, 0x7F	; 127
 d18:	07 c0       	rjmp	.+14     	; 0xd28 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 d1a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 d1e:	8f 7d       	andi	r24, 0xDF	; 223
 d20:	03 c0       	rjmp	.+6      	; 0xd28 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 d22:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 d26:	87 7f       	andi	r24, 0xF7	; 247
 d28:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 d2c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 d2e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 d32:	8f 77       	andi	r24, 0x7F	; 127
 d34:	07 c0       	rjmp	.+14     	; 0xd44 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 d36:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 d3a:	8f 7d       	andi	r24, 0xDF	; 223
 d3c:	03 c0       	rjmp	.+6      	; 0xd44 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 d3e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 d42:	87 7f       	andi	r24, 0xF7	; 247
 d44:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 d48:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 d4a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 d4e:	8f 77       	andi	r24, 0x7F	; 127
 d50:	07 c0       	rjmp	.+14     	; 0xd60 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 d52:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 d56:	8f 7d       	andi	r24, 0xDF	; 223
 d58:	03 c0       	rjmp	.+6      	; 0xd60 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 d5a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 d5e:	87 7f       	andi	r24, 0xF7	; 247
 d60:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 d64:	08 95       	ret

00000d66 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 d66:	cf 93       	push	r28
 d68:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	fc 01       	movw	r30, r24
 d6e:	e4 5a       	subi	r30, 0xA4	; 164
 d70:	fe 4f       	sbci	r31, 0xFE	; 254
 d72:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 d74:	fc 01       	movw	r30, r24
 d76:	ee 55       	subi	r30, 0x5E	; 94
 d78:	fe 4f       	sbci	r31, 0xFE	; 254
 d7a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 d7c:	88 23       	and	r24, r24
 d7e:	61 f1       	breq	.+88     	; 0xdd8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	88 0f       	add	r24, r24
 d84:	99 1f       	adc	r25, r25
 d86:	fc 01       	movw	r30, r24
 d88:	ee 5f       	subi	r30, 0xFE	; 254
 d8a:	fd 4f       	sbci	r31, 0xFD	; 253
 d8c:	c5 91       	lpm	r28, Z+
 d8e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 d90:	fc 01       	movw	r30, r24
 d92:	e8 51       	subi	r30, 0x18	; 24
 d94:	fe 4f       	sbci	r31, 0xFE	; 254
 d96:	a5 91       	lpm	r26, Z+
 d98:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 d9a:	61 11       	cpse	r22, r1
 d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 d9e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 da0:	f8 94       	cli
		*reg &= ~bit;
 da2:	88 81       	ld	r24, Y
 da4:	20 95       	com	r18
 da6:	82 23       	and	r24, r18
 da8:	88 83       	st	Y, r24
		*out &= ~bit;
 daa:	ec 91       	ld	r30, X
 dac:	2e 23       	and	r18, r30
 dae:	0b c0       	rjmp	.+22     	; 0xdc6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 db0:	62 30       	cpi	r22, 0x02	; 2
 db2:	61 f4       	brne	.+24     	; 0xdcc <pinMode+0x66>
		uint8_t oldSREG = SREG;
 db4:	9f b7       	in	r25, 0x3f	; 63
                cli();
 db6:	f8 94       	cli
		*reg &= ~bit;
 db8:	88 81       	ld	r24, Y
 dba:	32 2f       	mov	r19, r18
 dbc:	30 95       	com	r19
 dbe:	83 23       	and	r24, r19
 dc0:	88 83       	st	Y, r24
		*out |= bit;
 dc2:	ec 91       	ld	r30, X
 dc4:	2e 2b       	or	r18, r30
 dc6:	2c 93       	st	X, r18
		SREG = oldSREG;
 dc8:	9f bf       	out	0x3f, r25	; 63
 dca:	06 c0       	rjmp	.+12     	; 0xdd8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 dcc:	8f b7       	in	r24, 0x3f	; 63
                cli();
 dce:	f8 94       	cli
		*reg |= bit;
 dd0:	e8 81       	ld	r30, Y
 dd2:	2e 2b       	or	r18, r30
 dd4:	28 83       	st	Y, r18
		SREG = oldSREG;
 dd6:	8f bf       	out	0x3f, r24	; 63
	}
}
 dd8:	df 91       	pop	r29
 dda:	cf 91       	pop	r28
 ddc:	08 95       	ret

00000dde <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 dde:	1f 93       	push	r17
 de0:	cf 93       	push	r28
 de2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 de4:	28 2f       	mov	r18, r24
 de6:	30 e0       	ldi	r19, 0x00	; 0
 de8:	f9 01       	movw	r30, r18
 dea:	ea 5e       	subi	r30, 0xEA	; 234
 dec:	fe 4f       	sbci	r31, 0xFE	; 254
 dee:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 df0:	f9 01       	movw	r30, r18
 df2:	e4 5a       	subi	r30, 0xA4	; 164
 df4:	fe 4f       	sbci	r31, 0xFE	; 254
 df6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 df8:	f9 01       	movw	r30, r18
 dfa:	ee 55       	subi	r30, 0x5E	; 94
 dfc:	fe 4f       	sbci	r31, 0xFE	; 254
 dfe:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 e00:	cc 23       	and	r28, r28
 e02:	b9 f0       	breq	.+46     	; 0xe32 <digitalWrite+0x54>
 e04:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 e06:	81 11       	cpse	r24, r1
 e08:	59 df       	rcall	.-334    	; 0xcbc <turnOffPWM>

	out = portOutputRegister(port);
 e0a:	ec 2f       	mov	r30, r28
 e0c:	f0 e0       	ldi	r31, 0x00	; 0
 e0e:	ee 0f       	add	r30, r30
 e10:	ff 1f       	adc	r31, r31
 e12:	e8 51       	subi	r30, 0x18	; 24
 e14:	fe 4f       	sbci	r31, 0xFE	; 254
 e16:	a5 91       	lpm	r26, Z+
 e18:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 e1a:	9f b7       	in	r25, 0x3f	; 63
	cli();
 e1c:	f8 94       	cli

	if (val == LOW) {
 e1e:	11 11       	cpse	r17, r1
 e20:	04 c0       	rjmp	.+8      	; 0xe2a <digitalWrite+0x4c>
		*out &= ~bit;
 e22:	8c 91       	ld	r24, X
 e24:	d0 95       	com	r29
 e26:	d8 23       	and	r29, r24
 e28:	02 c0       	rjmp	.+4      	; 0xe2e <digitalWrite+0x50>
	} else {
		*out |= bit;
 e2a:	ec 91       	ld	r30, X
 e2c:	de 2b       	or	r29, r30
 e2e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 e30:	9f bf       	out	0x3f, r25	; 63
}
 e32:	df 91       	pop	r29
 e34:	cf 91       	pop	r28
 e36:	1f 91       	pop	r17
 e38:	08 95       	ret

00000e3a <__udivmodsi4>:
 e3a:	a1 e2       	ldi	r26, 0x21	; 33
 e3c:	1a 2e       	mov	r1, r26
 e3e:	aa 1b       	sub	r26, r26
 e40:	bb 1b       	sub	r27, r27
 e42:	fd 01       	movw	r30, r26
 e44:	0d c0       	rjmp	.+26     	; 0xe60 <__udivmodsi4_ep>

00000e46 <__udivmodsi4_loop>:
 e46:	aa 1f       	adc	r26, r26
 e48:	bb 1f       	adc	r27, r27
 e4a:	ee 1f       	adc	r30, r30
 e4c:	ff 1f       	adc	r31, r31
 e4e:	a2 17       	cp	r26, r18
 e50:	b3 07       	cpc	r27, r19
 e52:	e4 07       	cpc	r30, r20
 e54:	f5 07       	cpc	r31, r21
 e56:	20 f0       	brcs	.+8      	; 0xe60 <__udivmodsi4_ep>
 e58:	a2 1b       	sub	r26, r18
 e5a:	b3 0b       	sbc	r27, r19
 e5c:	e4 0b       	sbc	r30, r20
 e5e:	f5 0b       	sbc	r31, r21

00000e60 <__udivmodsi4_ep>:
 e60:	66 1f       	adc	r22, r22
 e62:	77 1f       	adc	r23, r23
 e64:	88 1f       	adc	r24, r24
 e66:	99 1f       	adc	r25, r25
 e68:	1a 94       	dec	r1
 e6a:	69 f7       	brne	.-38     	; 0xe46 <__udivmodsi4_loop>
 e6c:	60 95       	com	r22
 e6e:	70 95       	com	r23
 e70:	80 95       	com	r24
 e72:	90 95       	com	r25
 e74:	9b 01       	movw	r18, r22
 e76:	ac 01       	movw	r20, r24
 e78:	bd 01       	movw	r22, r26
 e7a:	cf 01       	movw	r24, r30
 e7c:	08 95       	ret

00000e7e <__tablejump2__>:
 e7e:	ee 0f       	add	r30, r30
 e80:	ff 1f       	adc	r31, r31
 e82:	88 1f       	adc	r24, r24
 e84:	8b bf       	out	0x3b, r24	; 59
 e86:	07 90       	elpm	r0, Z+
 e88:	f6 91       	elpm	r31, Z
 e8a:	e0 2d       	mov	r30, r0
 e8c:	19 94       	eijmp

00000e8e <_exit>:
 e8e:	f8 94       	cli

00000e90 <__stop_program>:
 e90:	ff cf       	rjmp	.-2      	; 0xe90 <__stop_program>
