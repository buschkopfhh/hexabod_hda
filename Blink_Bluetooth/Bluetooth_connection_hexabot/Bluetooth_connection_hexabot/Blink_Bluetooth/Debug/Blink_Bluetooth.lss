
Blink_Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800200  00000d1c  00000db0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  00800306  00800306  00000eb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009db7  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000219e  00000000  00000000  0000afbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bc0  00000000  00000000  0000d15d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000087c  00000000  00000000  0000ed20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002307  00000000  00000000  0000f59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e0c  00000000  00000000  000118a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  000146af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0f c1       	rjmp	.+542    	; 0x220 <__ctors_end>
   2:	00 00       	nop
   4:	3b c1       	rjmp	.+630    	; 0x27c <__bad_interrupt>
   6:	00 00       	nop
   8:	39 c1       	rjmp	.+626    	; 0x27c <__bad_interrupt>
   a:	00 00       	nop
   c:	37 c1       	rjmp	.+622    	; 0x27c <__bad_interrupt>
   e:	00 00       	nop
  10:	35 c1       	rjmp	.+618    	; 0x27c <__bad_interrupt>
  12:	00 00       	nop
  14:	33 c1       	rjmp	.+614    	; 0x27c <__bad_interrupt>
  16:	00 00       	nop
  18:	31 c1       	rjmp	.+610    	; 0x27c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2f c1       	rjmp	.+606    	; 0x27c <__bad_interrupt>
  1e:	00 00       	nop
  20:	2d c1       	rjmp	.+602    	; 0x27c <__bad_interrupt>
  22:	00 00       	nop
  24:	2b c1       	rjmp	.+598    	; 0x27c <__bad_interrupt>
  26:	00 00       	nop
  28:	29 c1       	rjmp	.+594    	; 0x27c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	27 c1       	rjmp	.+590    	; 0x27c <__bad_interrupt>
  2e:	00 00       	nop
  30:	25 c1       	rjmp	.+586    	; 0x27c <__bad_interrupt>
  32:	00 00       	nop
  34:	23 c1       	rjmp	.+582    	; 0x27c <__bad_interrupt>
  36:	00 00       	nop
  38:	21 c1       	rjmp	.+578    	; 0x27c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1f c1       	rjmp	.+574    	; 0x27c <__bad_interrupt>
  3e:	00 00       	nop
  40:	1d c1       	rjmp	.+570    	; 0x27c <__bad_interrupt>
  42:	00 00       	nop
  44:	1b c1       	rjmp	.+566    	; 0x27c <__bad_interrupt>
  46:	00 00       	nop
  48:	19 c1       	rjmp	.+562    	; 0x27c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	17 c1       	rjmp	.+558    	; 0x27c <__bad_interrupt>
  4e:	00 00       	nop
  50:	15 c1       	rjmp	.+554    	; 0x27c <__bad_interrupt>
  52:	00 00       	nop
  54:	13 c1       	rjmp	.+550    	; 0x27c <__bad_interrupt>
  56:	00 00       	nop
  58:	11 c1       	rjmp	.+546    	; 0x27c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	c8 c4       	rjmp	.+2448   	; 0x9ee <__vector_23>
  5e:	00 00       	nop
  60:	0d c1       	rjmp	.+538    	; 0x27c <__bad_interrupt>
  62:	00 00       	nop
  64:	25 c3       	rjmp	.+1610   	; 0x6b0 <__vector_25>
  66:	00 00       	nop
  68:	59 c3       	rjmp	.+1714   	; 0x71c <__vector_26>
  6a:	00 00       	nop
  6c:	07 c1       	rjmp	.+526    	; 0x27c <__bad_interrupt>
  6e:	00 00       	nop
  70:	05 c1       	rjmp	.+522    	; 0x27c <__bad_interrupt>
  72:	00 00       	nop
  74:	03 c1       	rjmp	.+518    	; 0x27c <__bad_interrupt>
  76:	00 00       	nop
  78:	01 c1       	rjmp	.+514    	; 0x27c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ff c0       	rjmp	.+510    	; 0x27c <__bad_interrupt>
  7e:	00 00       	nop
  80:	fd c0       	rjmp	.+506    	; 0x27c <__bad_interrupt>
  82:	00 00       	nop
  84:	fb c0       	rjmp	.+502    	; 0x27c <__bad_interrupt>
  86:	00 00       	nop
  88:	f9 c0       	rjmp	.+498    	; 0x27c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	f7 c0       	rjmp	.+494    	; 0x27c <__bad_interrupt>
  8e:	00 00       	nop
  90:	f5 c0       	rjmp	.+490    	; 0x27c <__bad_interrupt>
  92:	00 00       	nop
  94:	f3 c0       	rjmp	.+486    	; 0x27c <__bad_interrupt>
  96:	00 00       	nop
  98:	f1 c0       	rjmp	.+482    	; 0x27c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ef c0       	rjmp	.+478    	; 0x27c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	ed c0       	rjmp	.+474    	; 0x27c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	eb c0       	rjmp	.+470    	; 0x27c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e9 c0       	rjmp	.+466    	; 0x27c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	e7 c0       	rjmp	.+462    	; 0x27c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	e5 c0       	rjmp	.+458    	; 0x27c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	e3 c0       	rjmp	.+454    	; 0x27c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	e1 c0       	rjmp	.+450    	; 0x27c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	df c0       	rjmp	.+446    	; 0x27c <__bad_interrupt>
  be:	00 00       	nop
  c0:	dd c0       	rjmp	.+442    	; 0x27c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	db c0       	rjmp	.+438    	; 0x27c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	d9 c0       	rjmp	.+434    	; 0x27c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	d7 c0       	rjmp	.+430    	; 0x27c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	d5 c0       	rjmp	.+426    	; 0x27c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	d3 c0       	rjmp	.+422    	; 0x27c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	80 c3       	rjmp	.+1792   	; 0x7da <__vector_54>
  da:	00 00       	nop
  dc:	b4 c3       	rjmp	.+1896   	; 0x846 <__vector_55>
  de:	00 00       	nop
  e0:	cd c0       	rjmp	.+410    	; 0x27c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	87 01       	movw	r16, r14
  e6:	8f 01       	movw	r16, r30
  e8:	9e 01       	movw	r18, r28
  ea:	a6 01       	movw	r20, r12
  ec:	ae 01       	movw	r20, r28
  ee:	ba 01       	movw	r22, r20
  f0:	c8 01       	movw	r24, r16
  f2:	bd 05       	cpc	r27, r13
  f4:	c0 05       	cpc	r28, r0
  f6:	af 05       	cpc	r26, r15
  f8:	b3 05       	cpc	r27, r3
  fa:	b9 05       	cpc	r27, r9
  fc:	f7 05       	cpc	r31, r7
  fe:	c4 05       	cpc	r28, r4
 100:	c8 05       	cpc	r28, r8
 102:	ce 05       	cpc	r28, r14
 104:	d2 05       	cpc	r29, r2
 106:	d6 05       	cpc	r29, r6
 108:	dc 05       	cpc	r29, r12
 10a:	e0 05       	cpc	r30, r0
 10c:	e4 05       	cpc	r30, r4
 10e:	f7 05       	cpc	r31, r7
 110:	ea 05       	cpc	r30, r10
 112:	ee 05       	cpc	r30, r14
 114:	f2 05       	cpc	r31, r2

00000116 <__trampolines_end>:
 116:	00 00       	nop
 118:	0a 0b       	sbc	r16, r26
 11a:	02 09       	sbc	r16, r2
 11c:	0c 0d       	add	r16, r12
 11e:	0e 08       	sbc	r0, r14
 120:	07 03       	mulsu	r16, r23
 122:	04 01       	movw	r0, r8
	...
 140:	00 00       	nop
 142:	12 11       	cpse	r17, r2
 144:	10 00       	.word	0x0010	; ????
	...

0000015c <digital_pin_to_bit_mask_PGM>:
 15c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 16c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 17c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 18c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 19c:	04 08 10 20 40 80                                   ... @.

000001a2 <digital_pin_to_port_PGM>:
 1a2:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1b2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1c2:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1d2:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1e2:	0b 0b 0b 0b 0b 0b                                   ......

000001e8 <port_to_output_PGM>:
 1e8:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1f8:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000202 <port_to_mode_PGM>:
 202:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 212:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000021c <__ctors_start>:
 21c:	c0 03       	fmuls	r20, r16
 21e:	55 04       	cpc	r5, r5

00000220 <__ctors_end>:
 220:	11 24       	eor	r1, r1
 222:	1f be       	out	0x3f, r1	; 63
 224:	cf ef       	ldi	r28, 0xFF	; 255
 226:	d1 e2       	ldi	r29, 0x21	; 33
 228:	de bf       	out	0x3e, r29	; 62
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	00 e0       	ldi	r16, 0x00	; 0
 22e:	0c bf       	out	0x3c, r16	; 60

00000230 <__do_copy_data>:
 230:	13 e0       	ldi	r17, 0x03	; 3
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b2 e0       	ldi	r27, 0x02	; 2
 236:	ec e1       	ldi	r30, 0x1C	; 28
 238:	fd e0       	ldi	r31, 0x0D	; 13
 23a:	00 e0       	ldi	r16, 0x00	; 0
 23c:	0b bf       	out	0x3b, r16	; 59
 23e:	02 c0       	rjmp	.+4      	; 0x244 <__do_copy_data+0x14>
 240:	07 90       	elpm	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	a6 30       	cpi	r26, 0x06	; 6
 246:	b1 07       	cpc	r27, r17
 248:	d9 f7       	brne	.-10     	; 0x240 <__do_copy_data+0x10>

0000024a <__do_clear_bss>:
 24a:	24 e0       	ldi	r18, 0x04	; 4
 24c:	a6 e0       	ldi	r26, 0x06	; 6
 24e:	b3 e0       	ldi	r27, 0x03	; 3
 250:	01 c0       	rjmp	.+2      	; 0x254 <.do_clear_bss_start>

00000252 <.do_clear_bss_loop>:
 252:	1d 92       	st	X+, r1

00000254 <.do_clear_bss_start>:
 254:	ab 34       	cpi	r26, 0x4B	; 75
 256:	b2 07       	cpc	r27, r18
 258:	e1 f7       	brne	.-8      	; 0x252 <.do_clear_bss_loop>

0000025a <__do_global_ctors>:
 25a:	11 e0       	ldi	r17, 0x01	; 1
 25c:	c0 e1       	ldi	r28, 0x10	; 16
 25e:	d1 e0       	ldi	r29, 0x01	; 1
 260:	00 e0       	ldi	r16, 0x00	; 0
 262:	05 c0       	rjmp	.+10     	; 0x26e <__do_global_ctors+0x14>
 264:	21 97       	sbiw	r28, 0x01	; 1
 266:	01 09       	sbc	r16, r1
 268:	80 2f       	mov	r24, r16
 26a:	fe 01       	movw	r30, r28
 26c:	4d d5       	rcall	.+2714   	; 0xd08 <__tablejump2__>
 26e:	ce 30       	cpi	r28, 0x0E	; 14
 270:	d1 07       	cpc	r29, r17
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 07       	cpc	r16, r24
 276:	b1 f7       	brne	.-20     	; 0x264 <__do_global_ctors+0xa>
 278:	46 d3       	rcall	.+1676   	; 0x906 <main>
 27a:	4e c5       	rjmp	.+2716   	; 0xd18 <_exit>

0000027c <__bad_interrupt>:
 27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>

0000027e <setup>:
}


void setup() {
	// initialize digital pin LED_BUILTIN as an output.
	pinMode(LED_BUILTIN, OUTPUT);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	8d e0       	ldi	r24, 0x0D	; 13
 282:	b6 d4       	rcall	.+2412   	; 0xbf0 <pinMode>
	pinMode(12, OUTPUT); //also pin 12 as LED output
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	8c e0       	ldi	r24, 0x0C	; 12
 288:	b3 d4       	rcall	.+2406   	; 0xbf0 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 28a:	26 e0       	ldi	r18, 0x06	; 6
 28c:	40 e8       	ldi	r20, 0x80	; 128
 28e:	55 e2       	ldi	r21, 0x25	; 37
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	88 e0       	ldi	r24, 0x08	; 8
 296:	93 e0       	ldi	r25, 0x03	; 3
 298:	a8 d1       	rcall	.+848    	; 0x5ea <_ZN14HardwareSerial5beginEmh>
 29a:	26 e0       	ldi	r18, 0x06	; 6
 29c:	40 e8       	ldi	r20, 0x80	; 128
 29e:	55 e2       	ldi	r21, 0x25	; 37
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	85 ea       	ldi	r24, 0xA5	; 165
 2a6:	93 e0       	ldi	r25, 0x03	; 3
 2a8:	a0 d1       	rcall	.+832    	; 0x5ea <_ZN14HardwareSerial5beginEmh>

	Serial.begin(9600);         //Sets the data rate in bits per second (baud) for serial data transmission
	Serial3.begin(9600);
	Serial.println("This is the arduino for Hexapod!!!");
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	72 e0       	ldi	r23, 0x02	; 2
 2ae:	88 e0       	ldi	r24, 0x08	; 8
 2b0:	93 e0       	ldi	r25, 0x03	; 3
 2b2:	7d d3       	rcall	.+1786   	; 0x9ae <_ZN5Print7printlnEPKc>
	Serial.println(" ");
 2b4:	69 eb       	ldi	r22, 0xB9	; 185
 2b6:	72 e0       	ldi	r23, 0x02	; 2
 2b8:	88 e0       	ldi	r24, 0x08	; 8
 2ba:	93 e0       	ldi	r25, 0x03	; 3
 2bc:	78 d3       	rcall	.+1776   	; 0x9ae <_ZN5Print7printlnEPKc>
	Serial.println("To connect, start the LED Controller App on your Smartphone");
 2be:	63 e2       	ldi	r22, 0x23	; 35
 2c0:	72 e0       	ldi	r23, 0x02	; 2
 2c2:	88 e0       	ldi	r24, 0x08	; 8
 2c4:	93 e0       	ldi	r25, 0x03	; 3
 2c6:	73 d3       	rcall	.+1766   	; 0x9ae <_ZN5Print7printlnEPKc>
	Serial.println("and connect to Bluetooth HC-05");
 2c8:	6f e5       	ldi	r22, 0x5F	; 95
 2ca:	72 e0       	ldi	r23, 0x02	; 2
 2cc:	88 e0       	ldi	r24, 0x08	; 8
 2ce:	93 e0       	ldi	r25, 0x03	; 3
 2d0:	6e d3       	rcall	.+1756   	; 0x9ae <_ZN5Print7printlnEPKc>


	//int count = 0;
//	BluetoothInterface to;
//	to:BluetoothInterface();	
	digitalWrite(LED_BUILTIN, HIGH); 
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	8d e0       	ldi	r24, 0x0D	; 13
 2d6:	c8 c4       	rjmp	.+2448   	; 0xc68 <digitalWrite>

000002d8 <loop>:
 2d8:	cf 93       	push	r28
  
}


// the loop function runs over and over again forever
void loop() {
 2da:	df 93       	push	r29
	int serv3;
	char data;

	int k;
	
	if(Serial3.available() > 0){
 2dc:	85 ea       	ldi	r24, 0xA5	; 165
 2de:	93 e0       	ldi	r25, 0x03	; 3
 2e0:	84 d0       	rcall	.+264    	; 0x3ea <_ZN14HardwareSerial9availableEv>
 2e2:	18 16       	cp	r1, r24
 2e4:	19 06       	cpc	r1, r25
 2e6:	0c f0       	brlt	.+2      	; 0x2ea <loop+0x12>
 2e8:	7d c0       	rjmp	.+250    	; 0x3e4 <loop+0x10c>
		data = Serial3.read();
 2ea:	85 ea       	ldi	r24, 0xA5	; 165
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	97 d0       	rcall	.+302    	; 0x41e <_ZN14HardwareSerial4readEv>
 2f0:	ec 01       	movw	r28, r24
 2f2:	98 2f       	mov	r25, r24
// 		Serial.println(data);
// 		Serial.print("Count: ");
// 		Serial.println(count);
		switch (count)
 2f4:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <__data_end>
 2f8:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <__data_end+0x1>
 2fc:	e7 30       	cpi	r30, 0x07	; 7
 2fe:	f1 05       	cpc	r31, r1
 300:	08 f0       	brcs	.+2      	; 0x304 <loop+0x2c>
 302:	52 c0       	rjmp	.+164    	; 0x3a8 <loop+0xd0>
 304:	88 27       	eor	r24, r24
 306:	ee 58       	subi	r30, 0x8E	; 142
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	8f 4f       	sbci	r24, 0xFF	; 255
 30c:	fd c4       	rjmp	.+2554   	; 0xd08 <__tablejump2__>
		{
			case 0:
				if(data == 'A'){
 30e:	91 34       	cpi	r25, 0x41	; 65
 310:	19 f4       	brne	.+6      	; 0x318 <loop+0x40>
					count++;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	26 c0       	rjmp	.+76     	; 0x364 <loop+0x8c>
//					Serial.println("data = A");*/
				}
				else{
					Serial.println("Case 0");
 318:	6e e7       	ldi	r22, 0x7E	; 126
 31a:	72 e0       	ldi	r23, 0x02	; 2
 31c:	5e c0       	rjmp	.+188    	; 0x3da <loop+0x102>
					

				break;
			
			case 1:
				if(int2char(data) >= 0 && int2char(data) < 10){
 31e:	ce 01       	movw	r24, r28
 320:	99 27       	eor	r25, r25
 322:	c0 97       	sbiw	r24, 0x30	; 48
 324:	0a 97       	sbiw	r24, 0x0a	; 10
 326:	08 f0       	brcs	.+2      	; 0x32a <loop+0x52>
 328:	42 c0       	rjmp	.+132    	; 0x3ae <loop+0xd6>
					servo1 = data;
					count++;
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <__data_end+0x1>
 332:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__data_end>
					Serial.print("Servo1 = ");
 336:	61 eb       	ldi	r22, 0xB1	; 177
 338:	72 e0       	ldi	r23, 0x02	; 2
 33a:	44 c0       	rjmp	.+136    	; 0x3c4 <loop+0xec>
					Serial.println("Case 1");
				}
				break;

			case 2:
				if(data == 'B'){
 33c:	92 34       	cpi	r25, 0x42	; 66
 33e:	19 f4       	brne	.+6      	; 0x346 <loop+0x6e>
					count++;
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0f c0       	rjmp	.+30     	; 0x364 <loop+0x8c>
// 					Serial.println("data = B");
				}
				else{
					Serial.println("Case 2");
 346:	65 e8       	ldi	r22, 0x85	; 133
 348:	72 e0       	ldi	r23, 0x02	; 2
 34a:	47 c0       	rjmp	.+142    	; 0x3da <loop+0x102>
				}
				break;
				
			case 3:
				if(int2char(data) >= 0 && int2char(data) < 10){
 34c:	ce 01       	movw	r24, r28
 34e:	99 27       	eor	r25, r25
 350:	c0 97       	sbiw	r24, 0x30	; 48
 352:	0a 97       	sbiw	r24, 0x0a	; 10
 354:	78 f1       	brcs	.+94     	; 0x3b4 <loop+0xdc>
					count++;
					Serial.print("Servo2 = ");
					Serial.println(servo2);
				}
				else{
					Serial.println("Case 3");
 356:	62 ec       	ldi	r22, 0xC2	; 194
 358:	72 e0       	ldi	r23, 0x02	; 2
 35a:	3f c0       	rjmp	.+126    	; 0x3da <loop+0x102>
				}
				break;

			case 4:
				if(data == 'C'){
 35c:	93 34       	cpi	r25, 0x43	; 67
 35e:	39 f4       	brne	.+14     	; 0x36e <loop+0x96>
					count++;
 360:	85 e0       	ldi	r24, 0x05	; 5
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <__data_end+0x1>
 368:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__data_end>
 36c:	3b c0       	rjmp	.+118    	; 0x3e4 <loop+0x10c>
// 					Serial.println("data = C");
				}
				else{
					Serial.println("Case 4");
 36e:	6c e8       	ldi	r22, 0x8C	; 140
 370:	72 e0       	ldi	r23, 0x02	; 2
 372:	33 c0       	rjmp	.+102    	; 0x3da <loop+0x102>
				}
				break;
									
			case 5:
				if(int2char(data) >= 0 && int2char(data) < 10){
 374:	ce 01       	movw	r24, r28
 376:	99 27       	eor	r25, r25
 378:	c0 97       	sbiw	r24, 0x30	; 48
 37a:	0a 97       	sbiw	r24, 0x0a	; 10
 37c:	60 f5       	brcc	.+88     	; 0x3d6 <loop+0xfe>
					servo3 = data;
					count++;
 37e:	86 e0       	ldi	r24, 0x06	; 6
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <__data_end+0x1>
 386:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__data_end>
					Serial.print("Servo3 = ");
 38a:	63 ed       	ldi	r22, 0xD3	; 211
 38c:	72 e0       	ldi	r23, 0x02	; 2
 38e:	1a c0       	rjmp	.+52     	; 0x3c4 <loop+0xec>
					Serial.println("Case 5");
				}
				break;
		
			case 6:
				if(data == '#'){
 390:	93 32       	cpi	r25, 0x23	; 35
 392:	39 f4       	brne	.+14     	; 0x3a2 <loop+0xca>
					count = 0;
 394:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <__data_end+0x1>
 398:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <__data_end>
					Serial.println("==============");
 39c:	63 e9       	ldi	r22, 0x93	; 147
 39e:	72 e0       	ldi	r23, 0x02	; 2
 3a0:	1c c0       	rjmp	.+56     	; 0x3da <loop+0x102>
				}
				else{
					Serial.println("Case 6");
 3a2:	62 ea       	ldi	r22, 0xA2	; 162
 3a4:	72 e0       	ldi	r23, 0x02	; 2
 3a6:	19 c0       	rjmp	.+50     	; 0x3da <loop+0x102>
				}
				break;

			default:
				Serial.println("default");		
 3a8:	69 ea       	ldi	r22, 0xA9	; 169
 3aa:	72 e0       	ldi	r23, 0x02	; 2
 3ac:	16 c0       	rjmp	.+44     	; 0x3da <loop+0x102>
					count++;
					Serial.print("Servo1 = ");
					Serial.println(servo1);
				}
				else{
					Serial.println("Case 1");
 3ae:	6b eb       	ldi	r22, 0xBB	; 187
 3b0:	72 e0       	ldi	r23, 0x02	; 2
 3b2:	13 c0       	rjmp	.+38     	; 0x3da <loop+0x102>
				break;
				
			case 3:
				if(int2char(data) >= 0 && int2char(data) < 10){
					servo2 = data;
					count++;
 3b4:	84 e0       	ldi	r24, 0x04	; 4
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <__data_end+0x1>
 3bc:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__data_end>
					Serial.print("Servo2 = ");
 3c0:	69 ec       	ldi	r22, 0xC9	; 201
									
			case 5:
				if(int2char(data) >= 0 && int2char(data) < 10){
					servo3 = data;
					count++;
					Serial.print("Servo3 = ");
 3c2:	72 e0       	ldi	r23, 0x02	; 2
 3c4:	88 e0       	ldi	r24, 0x08	; 8
 3c6:	93 e0       	ldi	r25, 0x03	; 3
 3c8:	e7 d2       	rcall	.+1486   	; 0x998 <_ZN5Print5printEPKc>
					Serial.println(servo3);
 3ca:	6c 2f       	mov	r22, r28
 3cc:	88 e0       	ldi	r24, 0x08	; 8
// 	}
	



}
 3ce:	93 e0       	ldi	r25, 0x03	; 3
 3d0:	df 91       	pop	r29
			case 5:
				if(int2char(data) >= 0 && int2char(data) < 10){
					servo3 = data;
					count++;
					Serial.print("Servo3 = ");
					Serial.println(servo3);
 3d2:	cf 91       	pop	r28
 3d4:	fc c2       	rjmp	.+1528   	; 0x9ce <_ZN5Print7printlnEc>
				}
				else{
					Serial.println("Case 5");
 3d6:	6d ed       	ldi	r22, 0xDD	; 221
 3d8:	72 e0       	ldi	r23, 0x02	; 2
 3da:	88 e0       	ldi	r24, 0x08	; 8
// 	}
	



}
 3dc:	93 e0       	ldi	r25, 0x03	; 3
 3de:	df 91       	pop	r29
					count++;
					Serial.print("Servo3 = ");
					Serial.println(servo3);
				}
				else{
					Serial.println("Case 5");
 3e0:	cf 91       	pop	r28
 3e2:	e5 c2       	rjmp	.+1482   	; 0x9ae <_ZN5Print7printlnEPKc>
// 	}
	



}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 3ea:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 3ec:	91 8d       	ldd	r25, Z+25	; 0x19
 3ee:	22 8d       	ldd	r18, Z+26	; 0x1a
 3f0:	89 2f       	mov	r24, r25
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	80 5c       	subi	r24, 0xC0	; 192
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	82 1b       	sub	r24, r18
 3fa:	91 09       	sbc	r25, r1
}
 3fc:	8f 73       	andi	r24, 0x3F	; 63
 3fe:	99 27       	eor	r25, r25
 400:	08 95       	ret

00000402 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 402:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 404:	91 8d       	ldd	r25, Z+25	; 0x19
 406:	82 8d       	ldd	r24, Z+26	; 0x1a
 408:	98 17       	cp	r25, r24
 40a:	31 f0       	breq	.+12     	; 0x418 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 40c:	82 8d       	ldd	r24, Z+26	; 0x1a
 40e:	e8 0f       	add	r30, r24
 410:	f1 1d       	adc	r31, r1
 412:	85 8d       	ldd	r24, Z+29	; 0x1d
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 41c:	08 95       	ret

0000041e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 41e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 420:	91 8d       	ldd	r25, Z+25	; 0x19
 422:	82 8d       	ldd	r24, Z+26	; 0x1a
 424:	98 17       	cp	r25, r24
 426:	61 f0       	breq	.+24     	; 0x440 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 428:	82 8d       	ldd	r24, Z+26	; 0x1a
 42a:	df 01       	movw	r26, r30
 42c:	a8 0f       	add	r26, r24
 42e:	b1 1d       	adc	r27, r1
 430:	5d 96       	adiw	r26, 0x1d	; 29
 432:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 434:	92 8d       	ldd	r25, Z+26	; 0x1a
 436:	9f 5f       	subi	r25, 0xFF	; 255
 438:	9f 73       	andi	r25, 0x3F	; 63
 43a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 444:	08 95       	ret

00000446 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 446:	fc 01       	movw	r30, r24
 448:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 44a:	44 8d       	ldd	r20, Z+28	; 0x1c
 44c:	25 2f       	mov	r18, r21
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	84 2f       	mov	r24, r20
 452:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 454:	82 1b       	sub	r24, r18
 456:	93 0b       	sbc	r25, r19
 458:	54 17       	cp	r21, r20
 45a:	10 f0       	brcs	.+4      	; 0x460 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 45c:	cf 96       	adiw	r24, 0x3f	; 63
 45e:	08 95       	ret
  return tail - head - 1;
 460:	01 97       	sbiw	r24, 0x01	; 1
}
 462:	08 95       	ret

00000464 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 464:	87 eb       	ldi	r24, 0xB7	; 183
 466:	93 e0       	ldi	r25, 0x03	; 3
 468:	89 2b       	or	r24, r25
 46a:	39 f0       	breq	.+14     	; 0x47a <_Z14serialEventRunv+0x16>
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	89 2b       	or	r24, r25
 472:	19 f0       	breq	.+6      	; 0x47a <_Z14serialEventRunv+0x16>
 474:	7c d1       	rcall	.+760    	; 0x76e <_Z17Serial0_availablev>
 476:	81 11       	cpse	r24, r1
 478:	24 c0       	rjmp	.+72     	; 0x4c2 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	89 2b       	or	r24, r25
 480:	41 f0       	breq	.+16     	; 0x492 <_Z14serialEventRunv+0x2e>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	89 2b       	or	r24, r25
 488:	21 f0       	breq	.+8      	; 0x492 <_Z14serialEventRunv+0x2e>
 48a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 48e:	81 11       	cpse	r24, r1
 490:	1b c0       	rjmp	.+54     	; 0x4c8 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	89 2b       	or	r24, r25
 498:	41 f0       	breq	.+16     	; 0x4aa <_Z14serialEventRunv+0x46>
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	89 2b       	or	r24, r25
 4a0:	21 f0       	breq	.+8      	; 0x4aa <_Z14serialEventRunv+0x46>
 4a2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 4a6:	81 11       	cpse	r24, r1
 4a8:	12 c0       	rjmp	.+36     	; 0x4ce <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 4aa:	8c e4       	ldi	r24, 0x4C	; 76
 4ac:	94 e0       	ldi	r25, 0x04	; 4
 4ae:	89 2b       	or	r24, r25
 4b0:	99 f0       	breq	.+38     	; 0x4d8 <_Z14serialEventRunv+0x74>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	89 2b       	or	r24, r25
 4b8:	79 f0       	breq	.+30     	; 0x4d8 <_Z14serialEventRunv+0x74>
 4ba:	ee d1       	rcall	.+988    	; 0x898 <_Z17Serial3_availablev>
 4bc:	81 11       	cpse	r24, r1
 4be:	0a c0       	rjmp	.+20     	; 0x4d4 <_Z14serialEventRunv+0x70>
 4c0:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 4c2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 4c6:	d9 cf       	rjmp	.-78     	; 0x47a <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 4c8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 4cc:	e2 cf       	rjmp	.-60     	; 0x492 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 4ce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 4d2:	eb cf       	rjmp	.-42     	; 0x4aa <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 4d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 4d8:	08 95       	ret

000004da <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 4da:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 4dc:	84 8d       	ldd	r24, Z+28	; 0x1c
 4de:	df 01       	movw	r26, r30
 4e0:	a8 0f       	add	r26, r24
 4e2:	b1 1d       	adc	r27, r1
 4e4:	a3 5a       	subi	r26, 0xA3	; 163
 4e6:	bf 4f       	sbci	r27, 0xFF	; 255
 4e8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 4ea:	84 8d       	ldd	r24, Z+28	; 0x1c
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	8f 73       	andi	r24, 0x3F	; 63
 4f2:	99 27       	eor	r25, r25
 4f4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 4f6:	a6 89       	ldd	r26, Z+22	; 0x16
 4f8:	b7 89       	ldd	r27, Z+23	; 0x17
 4fa:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 4fc:	a0 89       	ldd	r26, Z+16	; 0x10
 4fe:	b1 89       	ldd	r27, Z+17	; 0x11
 500:	8c 91       	ld	r24, X
 502:	80 64       	ori	r24, 0x40	; 64
 504:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 506:	93 8d       	ldd	r25, Z+27	; 0x1b
 508:	84 8d       	ldd	r24, Z+28	; 0x1c
 50a:	98 13       	cpse	r25, r24
 50c:	06 c0       	rjmp	.+12     	; 0x51a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 50e:	02 88       	ldd	r0, Z+18	; 0x12
 510:	f3 89       	ldd	r31, Z+19	; 0x13
 512:	e0 2d       	mov	r30, r0
 514:	80 81       	ld	r24, Z
 516:	8f 7d       	andi	r24, 0xDF	; 223
 518:	80 83       	st	Z, r24
 51a:	08 95       	ret

0000051c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 51c:	ef 92       	push	r14
 51e:	ff 92       	push	r15
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	ec 01       	movw	r28, r24
  _written = true;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 52e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 530:	8c 8d       	ldd	r24, Y+28	; 0x1c
 532:	98 13       	cpse	r25, r24
 534:	05 c0       	rjmp	.+10     	; 0x540 <_ZN14HardwareSerial5writeEh+0x24>
 536:	e8 89       	ldd	r30, Y+16	; 0x10
 538:	f9 89       	ldd	r31, Y+17	; 0x11
 53a:	80 81       	ld	r24, Z
 53c:	85 fd       	sbrc	r24, 5
 53e:	23 c0       	rjmp	.+70     	; 0x586 <_ZN14HardwareSerial5writeEh+0x6a>
 540:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 542:	0b 8d       	ldd	r16, Y+27	; 0x1b
 544:	10 e0       	ldi	r17, 0x00	; 0
 546:	0f 5f       	subi	r16, 0xFF	; 255
 548:	1f 4f       	sbci	r17, 0xFF	; 255
 54a:	0f 73       	andi	r16, 0x3F	; 63
 54c:	11 27       	eor	r17, r17
 54e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 550:	8c 8d       	ldd	r24, Y+28	; 0x1c
 552:	e8 12       	cpse	r14, r24
 554:	0b c0       	rjmp	.+22     	; 0x56c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	07 fc       	sbrc	r0, 7
 55a:	fa cf       	rjmp	.-12     	; 0x550 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 55c:	e8 89       	ldd	r30, Y+16	; 0x10
 55e:	f9 89       	ldd	r31, Y+17	; 0x11
 560:	80 81       	ld	r24, Z
 562:	85 ff       	sbrs	r24, 5
 564:	f5 cf       	rjmp	.-22     	; 0x550 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 566:	ce 01       	movw	r24, r28
 568:	b8 df       	rcall	.-144    	; 0x4da <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 56a:	f2 cf       	rjmp	.-28     	; 0x550 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 56c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 56e:	fe 01       	movw	r30, r28
 570:	e8 0f       	add	r30, r24
 572:	f1 1d       	adc	r31, r1
 574:	e3 5a       	subi	r30, 0xA3	; 163
 576:	ff 4f       	sbci	r31, 0xFF	; 255
 578:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 57a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 57c:	ea 89       	ldd	r30, Y+18	; 0x12
 57e:	fb 89       	ldd	r31, Y+19	; 0x13
 580:	80 81       	ld	r24, Z
 582:	80 62       	ori	r24, 0x20	; 32
 584:	07 c0       	rjmp	.+14     	; 0x594 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 586:	ee 89       	ldd	r30, Y+22	; 0x16
 588:	ff 89       	ldd	r31, Y+23	; 0x17
 58a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 58c:	e8 89       	ldd	r30, Y+16	; 0x10
 58e:	f9 89       	ldd	r31, Y+17	; 0x11
 590:	80 81       	ld	r24, Z
 592:	80 64       	ori	r24, 0x40	; 64
 594:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	ff 90       	pop	r15
 5a4:	ef 90       	pop	r14
 5a6:	08 95       	ret

000005a8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 5ae:	88 8d       	ldd	r24, Y+24	; 0x18
 5b0:	88 23       	and	r24, r24
 5b2:	c1 f0       	breq	.+48     	; 0x5e4 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 5b4:	ea 89       	ldd	r30, Y+18	; 0x12
 5b6:	fb 89       	ldd	r31, Y+19	; 0x13
 5b8:	80 81       	ld	r24, Z
 5ba:	85 fd       	sbrc	r24, 5
 5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <_ZN14HardwareSerial5flushEv+0x20>
 5be:	a8 89       	ldd	r26, Y+16	; 0x10
 5c0:	b9 89       	ldd	r27, Y+17	; 0x11
 5c2:	8c 91       	ld	r24, X
 5c4:	86 fd       	sbrc	r24, 6
 5c6:	0e c0       	rjmp	.+28     	; 0x5e4 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	07 fc       	sbrc	r0, 7
 5cc:	f5 cf       	rjmp	.-22     	; 0x5b8 <_ZN14HardwareSerial5flushEv+0x10>
 5ce:	80 81       	ld	r24, Z
 5d0:	85 ff       	sbrs	r24, 5
 5d2:	f2 cf       	rjmp	.-28     	; 0x5b8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 5d4:	a8 89       	ldd	r26, Y+16	; 0x10
 5d6:	b9 89       	ldd	r27, Y+17	; 0x11
 5d8:	8c 91       	ld	r24, X
 5da:	85 ff       	sbrs	r24, 5
 5dc:	ed cf       	rjmp	.-38     	; 0x5b8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 5de:	ce 01       	movw	r24, r28
 5e0:	7c df       	rcall	.-264    	; 0x4da <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 5e2:	e8 cf       	rjmp	.-48     	; 0x5b4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	08 95       	ret

000005ea <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 5ea:	cf 92       	push	r12
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	ec 01       	movw	r28, r24
 5fa:	6a 01       	movw	r12, r20
 5fc:	7b 01       	movw	r14, r22
 5fe:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 600:	e8 89       	ldd	r30, Y+16	; 0x10
 602:	f9 89       	ldd	r31, Y+17	; 0x11
 604:	82 e0       	ldi	r24, 0x02	; 2
 606:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 608:	41 15       	cp	r20, r1
 60a:	51 4e       	sbci	r21, 0xE1	; 225
 60c:	61 05       	cpc	r22, r1
 60e:	71 05       	cpc	r23, r1
 610:	a9 f0       	breq	.+42     	; 0x63c <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	79 e0       	ldi	r23, 0x09	; 9
 616:	8d e3       	ldi	r24, 0x3D	; 61
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	a7 01       	movw	r20, r14
 61c:	96 01       	movw	r18, r12
 61e:	52 d3       	rcall	.+1700   	; 0xcc4 <__udivmodsi4>
 620:	da 01       	movw	r26, r20
 622:	c9 01       	movw	r24, r18
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	a1 09       	sbc	r26, r1
 628:	b1 09       	sbc	r27, r1
 62a:	b6 95       	lsr	r27
 62c:	a7 95       	ror	r26
 62e:	97 95       	ror	r25
 630:	87 95       	ror	r24
 632:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 634:	21 15       	cp	r18, r1
 636:	80 e1       	ldi	r24, 0x10	; 16
 638:	38 07       	cpc	r19, r24
 63a:	a0 f0       	brcs	.+40     	; 0x664 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 63c:	e8 89       	ldd	r30, Y+16	; 0x10
 63e:	f9 89       	ldd	r31, Y+17	; 0x11
 640:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 642:	60 e8       	ldi	r22, 0x80	; 128
 644:	74 e8       	ldi	r23, 0x84	; 132
 646:	8e e1       	ldi	r24, 0x1E	; 30
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	a7 01       	movw	r20, r14
 64c:	96 01       	movw	r18, r12
 64e:	3a d3       	rcall	.+1652   	; 0xcc4 <__udivmodsi4>
 650:	da 01       	movw	r26, r20
 652:	c9 01       	movw	r24, r18
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	a1 09       	sbc	r26, r1
 658:	b1 09       	sbc	r27, r1
 65a:	b6 95       	lsr	r27
 65c:	a7 95       	ror	r26
 65e:	97 95       	ror	r25
 660:	87 95       	ror	r24
 662:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 664:	ec 85       	ldd	r30, Y+12	; 0x0c
 666:	fd 85       	ldd	r31, Y+13	; 0x0d
 668:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 66a:	ee 85       	ldd	r30, Y+14	; 0x0e
 66c:	ff 85       	ldd	r31, Y+15	; 0x0f
 66e:	20 83       	st	Z, r18

  _written = false;
 670:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 672:	ec 89       	ldd	r30, Y+20	; 0x14
 674:	fd 89       	ldd	r31, Y+21	; 0x15
 676:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 678:	ea 89       	ldd	r30, Y+18	; 0x12
 67a:	fb 89       	ldd	r31, Y+19	; 0x13
 67c:	80 81       	ld	r24, Z
 67e:	80 61       	ori	r24, 0x10	; 16
 680:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 682:	ea 89       	ldd	r30, Y+18	; 0x12
 684:	fb 89       	ldd	r31, Y+19	; 0x13
 686:	80 81       	ld	r24, Z
 688:	88 60       	ori	r24, 0x08	; 8
 68a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 68c:	ea 89       	ldd	r30, Y+18	; 0x12
 68e:	fb 89       	ldd	r31, Y+19	; 0x13
 690:	80 81       	ld	r24, Z
 692:	80 68       	ori	r24, 0x80	; 128
 694:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 696:	ea 89       	ldd	r30, Y+18	; 0x12
 698:	fb 89       	ldd	r31, Y+19	; 0x13
 69a:	80 81       	ld	r24, Z
 69c:	8f 7d       	andi	r24, 0xDF	; 223
 69e:	80 83       	st	Z, r24
}
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	1f 91       	pop	r17
 6a6:	ff 90       	pop	r15
 6a8:	ef 90       	pop	r14
 6aa:	df 90       	pop	r13
 6ac:	cf 90       	pop	r12
 6ae:	08 95       	ret

000006b0 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	0b b6       	in	r0, 0x3b	; 59
 6bc:	0f 92       	push	r0
 6be:	2f 93       	push	r18
 6c0:	8f 93       	push	r24
 6c2:	9f 93       	push	r25
 6c4:	ef 93       	push	r30
 6c6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 6c8:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <Serial+0x10>
 6cc:	f0 91 19 03 	lds	r31, 0x0319	; 0x800319 <Serial+0x11>
 6d0:	80 81       	ld	r24, Z
 6d2:	e0 91 1e 03 	lds	r30, 0x031E	; 0x80031e <Serial+0x16>
 6d6:	f0 91 1f 03 	lds	r31, 0x031F	; 0x80031f <Serial+0x17>
 6da:	82 fd       	sbrc	r24, 2
 6dc:	12 c0       	rjmp	.+36     	; 0x702 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 6de:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 6e0:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <Serial+0x19>
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 6e8:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <Serial+0x1a>
 6ec:	82 17       	cp	r24, r18
 6ee:	51 f0       	breq	.+20     	; 0x704 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 6f0:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <Serial+0x19>
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	e8 5f       	subi	r30, 0xF8	; 248
 6f8:	fc 4f       	sbci	r31, 0xFC	; 252
 6fa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 6fc:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <Serial+0x19>
 700:	01 c0       	rjmp	.+2      	; 0x704 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 702:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 704:	ff 91       	pop	r31
 706:	ef 91       	pop	r30
 708:	9f 91       	pop	r25
 70a:	8f 91       	pop	r24
 70c:	2f 91       	pop	r18
 70e:	0f 90       	pop	r0
 710:	0b be       	out	0x3b, r0	; 59
 712:	0f 90       	pop	r0
 714:	0f be       	out	0x3f, r0	; 63
 716:	0f 90       	pop	r0
 718:	1f 90       	pop	r1
 71a:	18 95       	reti

0000071c <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 71c:	1f 92       	push	r1
 71e:	0f 92       	push	r0
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	0f 92       	push	r0
 724:	11 24       	eor	r1, r1
 726:	0b b6       	in	r0, 0x3b	; 59
 728:	0f 92       	push	r0
 72a:	2f 93       	push	r18
 72c:	3f 93       	push	r19
 72e:	4f 93       	push	r20
 730:	5f 93       	push	r21
 732:	6f 93       	push	r22
 734:	7f 93       	push	r23
 736:	8f 93       	push	r24
 738:	9f 93       	push	r25
 73a:	af 93       	push	r26
 73c:	bf 93       	push	r27
 73e:	ef 93       	push	r30
 740:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 742:	88 e0       	ldi	r24, 0x08	; 8
 744:	93 e0       	ldi	r25, 0x03	; 3
 746:	c9 de       	rcall	.-622    	; 0x4da <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 748:	ff 91       	pop	r31
 74a:	ef 91       	pop	r30
 74c:	bf 91       	pop	r27
 74e:	af 91       	pop	r26
 750:	9f 91       	pop	r25
 752:	8f 91       	pop	r24
 754:	7f 91       	pop	r23
 756:	6f 91       	pop	r22
 758:	5f 91       	pop	r21
 75a:	4f 91       	pop	r20
 75c:	3f 91       	pop	r19
 75e:	2f 91       	pop	r18
 760:	0f 90       	pop	r0
 762:	0b be       	out	0x3b, r0	; 59
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 76e:	88 e0       	ldi	r24, 0x08	; 8
 770:	93 e0       	ldi	r25, 0x03	; 3
 772:	3b de       	rcall	.-906    	; 0x3ea <_ZN14HardwareSerial9availableEv>
 774:	21 e0       	ldi	r18, 0x01	; 1
 776:	89 2b       	or	r24, r25
 778:	09 f4       	brne	.+2      	; 0x77c <_Z17Serial0_availablev+0xe>
 77a:	20 e0       	ldi	r18, 0x00	; 0
}
 77c:	82 2f       	mov	r24, r18
 77e:	08 95       	ret

00000780 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 780:	e8 e0       	ldi	r30, 0x08	; 8
 782:	f3 e0       	ldi	r31, 0x03	; 3
 784:	13 82       	std	Z+3, r1	; 0x03
 786:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 788:	88 ee       	ldi	r24, 0xE8	; 232
 78a:	93 e0       	ldi	r25, 0x03	; 3
 78c:	a0 e0       	ldi	r26, 0x00	; 0
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	84 83       	std	Z+4, r24	; 0x04
 792:	95 83       	std	Z+5, r25	; 0x05
 794:	a6 83       	std	Z+6, r26	; 0x06
 796:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 798:	88 ee       	ldi	r24, 0xE8	; 232
 79a:	92 e0       	ldi	r25, 0x02	; 2
 79c:	91 83       	std	Z+1, r25	; 0x01
 79e:	80 83       	st	Z, r24
 7a0:	85 ec       	ldi	r24, 0xC5	; 197
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	95 87       	std	Z+13, r25	; 0x0d
 7a6:	84 87       	std	Z+12, r24	; 0x0c
 7a8:	84 ec       	ldi	r24, 0xC4	; 196
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	97 87       	std	Z+15, r25	; 0x0f
 7ae:	86 87       	std	Z+14, r24	; 0x0e
 7b0:	80 ec       	ldi	r24, 0xC0	; 192
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	91 8b       	std	Z+17, r25	; 0x11
 7b6:	80 8b       	std	Z+16, r24	; 0x10
 7b8:	81 ec       	ldi	r24, 0xC1	; 193
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	93 8b       	std	Z+19, r25	; 0x13
 7be:	82 8b       	std	Z+18, r24	; 0x12
 7c0:	82 ec       	ldi	r24, 0xC2	; 194
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	95 8b       	std	Z+21, r25	; 0x15
 7c6:	84 8b       	std	Z+20, r24	; 0x14
 7c8:	86 ec       	ldi	r24, 0xC6	; 198
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	97 8b       	std	Z+23, r25	; 0x17
 7ce:	86 8b       	std	Z+22, r24	; 0x16
 7d0:	11 8e       	std	Z+25, r1	; 0x19
 7d2:	12 8e       	std	Z+26, r1	; 0x1a
 7d4:	13 8e       	std	Z+27, r1	; 0x1b
 7d6:	14 8e       	std	Z+28, r1	; 0x1c
 7d8:	08 95       	ret

000007da <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
 7da:	1f 92       	push	r1
 7dc:	0f 92       	push	r0
 7de:	0f b6       	in	r0, 0x3f	; 63
 7e0:	0f 92       	push	r0
 7e2:	11 24       	eor	r1, r1
 7e4:	0b b6       	in	r0, 0x3b	; 59
 7e6:	0f 92       	push	r0
 7e8:	2f 93       	push	r18
 7ea:	8f 93       	push	r24
 7ec:	9f 93       	push	r25
 7ee:	ef 93       	push	r30
 7f0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 7f2:	e0 91 b5 03 	lds	r30, 0x03B5	; 0x8003b5 <Serial3+0x10>
 7f6:	f0 91 b6 03 	lds	r31, 0x03B6	; 0x8003b6 <Serial3+0x11>
 7fa:	80 81       	ld	r24, Z
 7fc:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <Serial3+0x16>
 800:	f0 91 bc 03 	lds	r31, 0x03BC	; 0x8003bc <Serial3+0x17>
 804:	82 fd       	sbrc	r24, 2
 806:	12 c0       	rjmp	.+36     	; 0x82c <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 808:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 80a:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <Serial3+0x19>
 80e:	8f 5f       	subi	r24, 0xFF	; 255
 810:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 812:	20 91 bf 03 	lds	r18, 0x03BF	; 0x8003bf <Serial3+0x1a>
 816:	82 17       	cp	r24, r18
 818:	51 f0       	breq	.+20     	; 0x82e <__vector_54+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 81a:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <Serial3+0x19>
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	eb 55       	subi	r30, 0x5B	; 91
 822:	fc 4f       	sbci	r31, 0xFC	; 252
 824:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 826:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <Serial3+0x19>
 82a:	01 c0       	rjmp	.+2      	; 0x82e <__vector_54+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 82c:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
 82e:	ff 91       	pop	r31
 830:	ef 91       	pop	r30
 832:	9f 91       	pop	r25
 834:	8f 91       	pop	r24
 836:	2f 91       	pop	r18
 838:	0f 90       	pop	r0
 83a:	0b be       	out	0x3b, r0	; 59
 83c:	0f 90       	pop	r0
 83e:	0f be       	out	0x3f, r0	; 63
 840:	0f 90       	pop	r0
 842:	1f 90       	pop	r1
 844:	18 95       	reti

00000846 <__vector_55>:

ISR(USART3_UDRE_vect)
{
 846:	1f 92       	push	r1
 848:	0f 92       	push	r0
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	0f 92       	push	r0
 84e:	11 24       	eor	r1, r1
 850:	0b b6       	in	r0, 0x3b	; 59
 852:	0f 92       	push	r0
 854:	2f 93       	push	r18
 856:	3f 93       	push	r19
 858:	4f 93       	push	r20
 85a:	5f 93       	push	r21
 85c:	6f 93       	push	r22
 85e:	7f 93       	push	r23
 860:	8f 93       	push	r24
 862:	9f 93       	push	r25
 864:	af 93       	push	r26
 866:	bf 93       	push	r27
 868:	ef 93       	push	r30
 86a:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
 86c:	85 ea       	ldi	r24, 0xA5	; 165
 86e:	93 e0       	ldi	r25, 0x03	; 3
 870:	34 de       	rcall	.-920    	; 0x4da <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 872:	ff 91       	pop	r31
 874:	ef 91       	pop	r30
 876:	bf 91       	pop	r27
 878:	af 91       	pop	r26
 87a:	9f 91       	pop	r25
 87c:	8f 91       	pop	r24
 87e:	7f 91       	pop	r23
 880:	6f 91       	pop	r22
 882:	5f 91       	pop	r21
 884:	4f 91       	pop	r20
 886:	3f 91       	pop	r19
 888:	2f 91       	pop	r18
 88a:	0f 90       	pop	r0
 88c:	0b be       	out	0x3b, r0	; 59
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0f 90       	pop	r0
 894:	1f 90       	pop	r1
 896:	18 95       	reti

00000898 <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
 898:	85 ea       	ldi	r24, 0xA5	; 165
 89a:	93 e0       	ldi	r25, 0x03	; 3
 89c:	a6 dd       	rcall	.-1204   	; 0x3ea <_ZN14HardwareSerial9availableEv>
 89e:	21 e0       	ldi	r18, 0x01	; 1
 8a0:	89 2b       	or	r24, r25
 8a2:	09 f4       	brne	.+2      	; 0x8a6 <_Z17Serial3_availablev+0xe>
 8a4:	20 e0       	ldi	r18, 0x00	; 0
}
 8a6:	82 2f       	mov	r24, r18
 8a8:	08 95       	ret

000008aa <_GLOBAL__sub_I___vector_54>:
 8aa:	e5 ea       	ldi	r30, 0xA5	; 165
 8ac:	f3 e0       	ldi	r31, 0x03	; 3
 8ae:	13 82       	std	Z+3, r1	; 0x03
 8b0:	12 82       	std	Z+2, r1	; 0x02
 8b2:	88 ee       	ldi	r24, 0xE8	; 232
 8b4:	93 e0       	ldi	r25, 0x03	; 3
 8b6:	a0 e0       	ldi	r26, 0x00	; 0
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	84 83       	std	Z+4, r24	; 0x04
 8bc:	95 83       	std	Z+5, r25	; 0x05
 8be:	a6 83       	std	Z+6, r26	; 0x06
 8c0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 8c2:	88 ee       	ldi	r24, 0xE8	; 232
 8c4:	92 e0       	ldi	r25, 0x02	; 2
 8c6:	91 83       	std	Z+1, r25	; 0x01
 8c8:	80 83       	st	Z, r24
 8ca:	85 e3       	ldi	r24, 0x35	; 53
 8cc:	91 e0       	ldi	r25, 0x01	; 1
 8ce:	95 87       	std	Z+13, r25	; 0x0d
 8d0:	84 87       	std	Z+12, r24	; 0x0c
 8d2:	84 e3       	ldi	r24, 0x34	; 52
 8d4:	91 e0       	ldi	r25, 0x01	; 1
 8d6:	97 87       	std	Z+15, r25	; 0x0f
 8d8:	86 87       	std	Z+14, r24	; 0x0e
 8da:	80 e3       	ldi	r24, 0x30	; 48
 8dc:	91 e0       	ldi	r25, 0x01	; 1
 8de:	91 8b       	std	Z+17, r25	; 0x11
 8e0:	80 8b       	std	Z+16, r24	; 0x10
 8e2:	81 e3       	ldi	r24, 0x31	; 49
 8e4:	91 e0       	ldi	r25, 0x01	; 1
 8e6:	93 8b       	std	Z+19, r25	; 0x13
 8e8:	82 8b       	std	Z+18, r24	; 0x12
 8ea:	82 e3       	ldi	r24, 0x32	; 50
 8ec:	91 e0       	ldi	r25, 0x01	; 1
 8ee:	95 8b       	std	Z+21, r25	; 0x15
 8f0:	84 8b       	std	Z+20, r24	; 0x14
 8f2:	86 e3       	ldi	r24, 0x36	; 54
 8f4:	91 e0       	ldi	r25, 0x01	; 1
 8f6:	97 8b       	std	Z+23, r25	; 0x17
 8f8:	86 8b       	std	Z+22, r24	; 0x16
 8fa:	11 8e       	std	Z+25, r1	; 0x19
 8fc:	12 8e       	std	Z+26, r1	; 0x1a
 8fe:	13 8e       	std	Z+27, r1	; 0x1b
 900:	14 8e       	std	Z+28, r1	; 0x1c
 902:	08 95       	ret

00000904 <initVariant>:
 904:	08 95       	ret

00000906 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 906:	bd d0       	rcall	.+378    	; 0xa82 <init>

	initVariant();
 908:	fd df       	rcall	.-6      	; 0x904 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 90a:	b9 dc       	rcall	.-1678   	; 0x27e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 90c:	c2 e3       	ldi	r28, 0x32	; 50
 90e:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 910:	e3 dc       	rcall	.-1594   	; 0x2d8 <loop>
		if (serialEventRun) serialEventRun();
 912:	20 97       	sbiw	r28, 0x00	; 0
 914:	e9 f3       	breq	.-6      	; 0x910 <main+0xa>
 916:	a6 dd       	rcall	.-1204   	; 0x464 <_Z14serialEventRunv>
 918:	fb cf       	rjmp	.-10     	; 0x910 <main+0xa>

0000091a <_ZN5Print5writeEPKhj>:
 91a:	cf 92       	push	r12
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 91c:	df 92       	push	r13
 91e:	ef 92       	push	r14
 920:	ff 92       	push	r15
 922:	0f 93       	push	r16
 924:	1f 93       	push	r17
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	6c 01       	movw	r12, r24
 92c:	7a 01       	movw	r14, r20
 92e:	8b 01       	movw	r16, r22
 930:	c0 e0       	ldi	r28, 0x00	; 0
 932:	d0 e0       	ldi	r29, 0x00	; 0
 934:	ce 15       	cp	r28, r14
 936:	df 05       	cpc	r29, r15
 938:	81 f0       	breq	.+32     	; 0x95a <_ZN5Print5writeEPKhj+0x40>
 93a:	d8 01       	movw	r26, r16
 93c:	6d 91       	ld	r22, X+
 93e:	8d 01       	movw	r16, r26
 940:	d6 01       	movw	r26, r12
 942:	ed 91       	ld	r30, X+
 944:	fc 91       	ld	r31, X
 946:	01 90       	ld	r0, Z+
 948:	f0 81       	ld	r31, Z
 94a:	e0 2d       	mov	r30, r0
 94c:	c6 01       	movw	r24, r12
 94e:	19 95       	eicall
 950:	89 2b       	or	r24, r25
 952:	11 f0       	breq	.+4      	; 0x958 <_ZN5Print5writeEPKhj+0x3e>
 954:	21 96       	adiw	r28, 0x01	; 1
 956:	ee cf       	rjmp	.-36     	; 0x934 <_ZN5Print5writeEPKhj+0x1a>
 958:	7e 01       	movw	r14, r28
 95a:	c7 01       	movw	r24, r14
 95c:	df 91       	pop	r29
 95e:	cf 91       	pop	r28
 960:	1f 91       	pop	r17
 962:	0f 91       	pop	r16
 964:	ff 90       	pop	r15
 966:	ef 90       	pop	r14
 968:	df 90       	pop	r13
 96a:	cf 90       	pop	r12
 96c:	08 95       	ret

0000096e <_ZN5Print5writeEPKc>:
 96e:	61 15       	cp	r22, r1
 970:	71 05       	cpc	r23, r1
 972:	79 f0       	breq	.+30     	; 0x992 <_ZN5Print5writeEPKc+0x24>
 974:	fb 01       	movw	r30, r22
 976:	01 90       	ld	r0, Z+
 978:	00 20       	and	r0, r0
 97a:	e9 f7       	brne	.-6      	; 0x976 <_ZN5Print5writeEPKc+0x8>
 97c:	31 97       	sbiw	r30, 0x01	; 1
 97e:	af 01       	movw	r20, r30
 980:	46 1b       	sub	r20, r22
 982:	57 0b       	sbc	r21, r23
 984:	dc 01       	movw	r26, r24
 986:	ed 91       	ld	r30, X+
 988:	fc 91       	ld	r31, X
 98a:	02 80       	ldd	r0, Z+2	; 0x02
 98c:	f3 81       	ldd	r31, Z+3	; 0x03
 98e:	e0 2d       	mov	r30, r0
 990:	19 94       	eijmp
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	08 95       	ret

00000998 <_ZN5Print5printEPKc>:
 998:	ea cf       	rjmp	.-44     	; 0x96e <_ZN5Print5writeEPKc>

0000099a <_ZN5Print5printEc>:
 99a:	dc 01       	movw	r26, r24
 99c:	ed 91       	ld	r30, X+
 99e:	fc 91       	ld	r31, X
 9a0:	01 90       	ld	r0, Z+
 9a2:	f0 81       	ld	r31, Z
 9a4:	e0 2d       	mov	r30, r0
 9a6:	19 94       	eijmp

000009a8 <_ZN5Print7printlnEv>:
 9a8:	66 ef       	ldi	r22, 0xF6	; 246
 9aa:	72 e0       	ldi	r23, 0x02	; 2
 9ac:	e0 cf       	rjmp	.-64     	; 0x96e <_ZN5Print5writeEPKc>

000009ae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 9ae:	0f 93       	push	r16
 9b0:	1f 93       	push	r17
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
 9b6:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 9b8:	da df       	rcall	.-76     	; 0x96e <_ZN5Print5writeEPKc>
 9ba:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 9bc:	ce 01       	movw	r24, r28
 9be:	f4 df       	rcall	.-24     	; 0x9a8 <_ZN5Print7printlnEv>
  return n;
}
 9c0:	80 0f       	add	r24, r16
 9c2:	91 1f       	adc	r25, r17
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	08 95       	ret

000009ce <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 9ce:	0f 93       	push	r16
 9d0:	1f 93       	push	r17
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	ec 01       	movw	r28, r24
  size_t n = print(c);
 9d8:	e0 df       	rcall	.-64     	; 0x99a <_ZN5Print5printEc>
 9da:	8c 01       	movw	r16, r24
  n += println();
 9dc:	ce 01       	movw	r24, r28
 9de:	e4 df       	rcall	.-56     	; 0x9a8 <_ZN5Print7printlnEv>
  return n;
}
 9e0:	80 0f       	add	r24, r16
 9e2:	91 1f       	adc	r25, r17
 9e4:	df 91       	pop	r29
 9e6:	cf 91       	pop	r28
 9e8:	1f 91       	pop	r17
 9ea:	0f 91       	pop	r16
 9ec:	08 95       	ret

000009ee <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 9ee:	1f 92       	push	r1
 9f0:	0f 92       	push	r0
 9f2:	0f b6       	in	r0, 0x3f	; 63
 9f4:	0f 92       	push	r0
 9f6:	11 24       	eor	r1, r1
 9f8:	2f 93       	push	r18
 9fa:	3f 93       	push	r19
 9fc:	8f 93       	push	r24
 9fe:	9f 93       	push	r25
 a00:	af 93       	push	r26
 a02:	bf 93       	push	r27
 a04:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <timer0_millis>
 a08:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <timer0_millis+0x1>
 a0c:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <timer0_millis+0x2>
 a10:	b0 91 46 04 	lds	r27, 0x0446	; 0x800446 <timer0_millis+0x3>
 a14:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <timer0_fract>
 a18:	23 e0       	ldi	r18, 0x03	; 3
 a1a:	23 0f       	add	r18, r19
 a1c:	2d 37       	cpi	r18, 0x7D	; 125
 a1e:	20 f4       	brcc	.+8      	; 0xa28 <__vector_23+0x3a>
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	a1 1d       	adc	r26, r1
 a24:	b1 1d       	adc	r27, r1
 a26:	05 c0       	rjmp	.+10     	; 0xa32 <__vector_23+0x44>
 a28:	26 e8       	ldi	r18, 0x86	; 134
 a2a:	23 0f       	add	r18, r19
 a2c:	02 96       	adiw	r24, 0x02	; 2
 a2e:	a1 1d       	adc	r26, r1
 a30:	b1 1d       	adc	r27, r1
 a32:	20 93 42 04 	sts	0x0442, r18	; 0x800442 <timer0_fract>
 a36:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <timer0_millis>
 a3a:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <timer0_millis+0x1>
 a3e:	a0 93 45 04 	sts	0x0445, r26	; 0x800445 <timer0_millis+0x2>
 a42:	b0 93 46 04 	sts	0x0446, r27	; 0x800446 <timer0_millis+0x3>
 a46:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <timer0_overflow_count>
 a4a:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <timer0_overflow_count+0x1>
 a4e:	a0 91 49 04 	lds	r26, 0x0449	; 0x800449 <timer0_overflow_count+0x2>
 a52:	b0 91 4a 04 	lds	r27, 0x044A	; 0x80044a <timer0_overflow_count+0x3>
 a56:	01 96       	adiw	r24, 0x01	; 1
 a58:	a1 1d       	adc	r26, r1
 a5a:	b1 1d       	adc	r27, r1
 a5c:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <timer0_overflow_count>
 a60:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <timer0_overflow_count+0x1>
 a64:	a0 93 49 04 	sts	0x0449, r26	; 0x800449 <timer0_overflow_count+0x2>
 a68:	b0 93 4a 04 	sts	0x044A, r27	; 0x80044a <timer0_overflow_count+0x3>
 a6c:	bf 91       	pop	r27
 a6e:	af 91       	pop	r26
 a70:	9f 91       	pop	r25
 a72:	8f 91       	pop	r24
 a74:	3f 91       	pop	r19
 a76:	2f 91       	pop	r18
 a78:	0f 90       	pop	r0
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	0f 90       	pop	r0
 a7e:	1f 90       	pop	r1
 a80:	18 95       	reti

00000a82 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 a82:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 a84:	84 b5       	in	r24, 0x24	; 36
 a86:	82 60       	ori	r24, 0x02	; 2
 a88:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 a8a:	84 b5       	in	r24, 0x24	; 36
 a8c:	81 60       	ori	r24, 0x01	; 1
 a8e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 a90:	85 b5       	in	r24, 0x25	; 37
 a92:	82 60       	ori	r24, 0x02	; 2
 a94:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 a96:	85 b5       	in	r24, 0x25	; 37
 a98:	81 60       	ori	r24, 0x01	; 1
 a9a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 a9c:	ee e6       	ldi	r30, 0x6E	; 110
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	80 81       	ld	r24, Z
 aa2:	81 60       	ori	r24, 0x01	; 1
 aa4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 aa6:	e1 e8       	ldi	r30, 0x81	; 129
 aa8:	f0 e0       	ldi	r31, 0x00	; 0
 aaa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 aac:	80 81       	ld	r24, Z
 aae:	82 60       	ori	r24, 0x02	; 2
 ab0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 ab2:	80 81       	ld	r24, Z
 ab4:	81 60       	ori	r24, 0x01	; 1
 ab6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 ab8:	e0 e8       	ldi	r30, 0x80	; 128
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	80 81       	ld	r24, Z
 abe:	81 60       	ori	r24, 0x01	; 1
 ac0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 ac2:	e1 eb       	ldi	r30, 0xB1	; 177
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	80 81       	ld	r24, Z
 ac8:	84 60       	ori	r24, 0x04	; 4
 aca:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 acc:	e0 eb       	ldi	r30, 0xB0	; 176
 ace:	f0 e0       	ldi	r31, 0x00	; 0
 ad0:	80 81       	ld	r24, Z
 ad2:	81 60       	ori	r24, 0x01	; 1
 ad4:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 ad6:	e1 e9       	ldi	r30, 0x91	; 145
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	80 81       	ld	r24, Z
 adc:	82 60       	ori	r24, 0x02	; 2
 ade:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 ae0:	80 81       	ld	r24, Z
 ae2:	81 60       	ori	r24, 0x01	; 1
 ae4:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 ae6:	e0 e9       	ldi	r30, 0x90	; 144
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	80 81       	ld	r24, Z
 aec:	81 60       	ori	r24, 0x01	; 1
 aee:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 af0:	e1 ea       	ldi	r30, 0xA1	; 161
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	80 81       	ld	r24, Z
 af6:	82 60       	ori	r24, 0x02	; 2
 af8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 afa:	80 81       	ld	r24, Z
 afc:	81 60       	ori	r24, 0x01	; 1
 afe:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 b00:	e0 ea       	ldi	r30, 0xA0	; 160
 b02:	f0 e0       	ldi	r31, 0x00	; 0
 b04:	80 81       	ld	r24, Z
 b06:	81 60       	ori	r24, 0x01	; 1
 b08:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 b0a:	e1 e2       	ldi	r30, 0x21	; 33
 b0c:	f1 e0       	ldi	r31, 0x01	; 1
 b0e:	80 81       	ld	r24, Z
 b10:	82 60       	ori	r24, 0x02	; 2
 b12:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 b14:	80 81       	ld	r24, Z
 b16:	81 60       	ori	r24, 0x01	; 1
 b18:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 b1a:	e0 e2       	ldi	r30, 0x20	; 32
 b1c:	f1 e0       	ldi	r31, 0x01	; 1
 b1e:	80 81       	ld	r24, Z
 b20:	81 60       	ori	r24, 0x01	; 1
 b22:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 b24:	ea e7       	ldi	r30, 0x7A	; 122
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	84 60       	ori	r24, 0x04	; 4
 b2c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 b2e:	80 81       	ld	r24, Z
 b30:	82 60       	ori	r24, 0x02	; 2
 b32:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 b34:	80 81       	ld	r24, Z
 b36:	81 60       	ori	r24, 0x01	; 1
 b38:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 b3a:	80 81       	ld	r24, Z
 b3c:	80 68       	ori	r24, 0x80	; 128
 b3e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 b40:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 b44:	08 95       	ret

00000b46 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	fc 01       	movw	r30, r24
 b4a:	31 97       	sbiw	r30, 0x01	; 1
 b4c:	e2 31       	cpi	r30, 0x12	; 18
 b4e:	f1 05       	cpc	r31, r1
 b50:	08 f0       	brcs	.+2      	; 0xb54 <turnOffPWM+0xe>
 b52:	4d c0       	rjmp	.+154    	; 0xbee <turnOffPWM+0xa8>
 b54:	88 27       	eor	r24, r24
 b56:	e7 58       	subi	r30, 0x87	; 135
 b58:	ff 4f       	sbci	r31, 0xFF	; 255
 b5a:	8f 4f       	sbci	r24, 0xFF	; 255
 b5c:	d5 c0       	rjmp	.+426    	; 0xd08 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 b5e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 b62:	8f 77       	andi	r24, 0x7F	; 127
 b64:	03 c0       	rjmp	.+6      	; 0xb6c <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 b66:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 b6a:	8f 7d       	andi	r24, 0xDF	; 223
 b6c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 b70:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 b72:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 b76:	87 7f       	andi	r24, 0xF7	; 247
 b78:	f9 cf       	rjmp	.-14     	; 0xb6c <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 b7a:	84 b5       	in	r24, 0x24	; 36
 b7c:	8f 77       	andi	r24, 0x7F	; 127
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 b80:	84 b5       	in	r24, 0x24	; 36
 b82:	8f 7d       	andi	r24, 0xDF	; 223
 b84:	84 bd       	out	0x24, r24	; 36
 b86:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 b88:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 b8c:	8f 77       	andi	r24, 0x7F	; 127
 b8e:	03 c0       	rjmp	.+6      	; 0xb96 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 b90:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 b94:	8f 7d       	andi	r24, 0xDF	; 223
 b96:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 b9a:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 b9c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 ba0:	8f 77       	andi	r24, 0x7F	; 127
 ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 ba4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 ba8:	8f 7d       	andi	r24, 0xDF	; 223
 baa:	03 c0       	rjmp	.+6      	; 0xbb2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 bac:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 bb0:	87 7f       	andi	r24, 0xF7	; 247
 bb2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 bb6:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 bb8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 bbc:	8f 77       	andi	r24, 0x7F	; 127
 bbe:	07 c0       	rjmp	.+14     	; 0xbce <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 bc0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 bc4:	8f 7d       	andi	r24, 0xDF	; 223
 bc6:	03 c0       	rjmp	.+6      	; 0xbce <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 bc8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 bcc:	87 7f       	andi	r24, 0xF7	; 247
 bce:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 bd2:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 bd4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 bd8:	8f 77       	andi	r24, 0x7F	; 127
 bda:	07 c0       	rjmp	.+14     	; 0xbea <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 bdc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 be0:	8f 7d       	andi	r24, 0xDF	; 223
 be2:	03 c0       	rjmp	.+6      	; 0xbea <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 be4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 be8:	87 7f       	andi	r24, 0xF7	; 247
 bea:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 bee:	08 95       	ret

00000bf0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 bf0:	cf 93       	push	r28
 bf2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	fc 01       	movw	r30, r24
 bf8:	e4 5a       	subi	r30, 0xA4	; 164
 bfa:	fe 4f       	sbci	r31, 0xFE	; 254
 bfc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 bfe:	fc 01       	movw	r30, r24
 c00:	ee 55       	subi	r30, 0x5E	; 94
 c02:	fe 4f       	sbci	r31, 0xFE	; 254
 c04:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 c06:	88 23       	and	r24, r24
 c08:	61 f1       	breq	.+88     	; 0xc62 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	88 0f       	add	r24, r24
 c0e:	99 1f       	adc	r25, r25
 c10:	fc 01       	movw	r30, r24
 c12:	ee 5f       	subi	r30, 0xFE	; 254
 c14:	fd 4f       	sbci	r31, 0xFD	; 253
 c16:	c5 91       	lpm	r28, Z+
 c18:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 c1a:	fc 01       	movw	r30, r24
 c1c:	e8 51       	subi	r30, 0x18	; 24
 c1e:	fe 4f       	sbci	r31, 0xFE	; 254
 c20:	a5 91       	lpm	r26, Z+
 c22:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 c24:	61 11       	cpse	r22, r1
 c26:	09 c0       	rjmp	.+18     	; 0xc3a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 c28:	9f b7       	in	r25, 0x3f	; 63
                cli();
 c2a:	f8 94       	cli
		*reg &= ~bit;
 c2c:	88 81       	ld	r24, Y
 c2e:	20 95       	com	r18
 c30:	82 23       	and	r24, r18
 c32:	88 83       	st	Y, r24
		*out &= ~bit;
 c34:	ec 91       	ld	r30, X
 c36:	2e 23       	and	r18, r30
 c38:	0b c0       	rjmp	.+22     	; 0xc50 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 c3a:	62 30       	cpi	r22, 0x02	; 2
 c3c:	61 f4       	brne	.+24     	; 0xc56 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 c3e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 c40:	f8 94       	cli
		*reg &= ~bit;
 c42:	88 81       	ld	r24, Y
 c44:	32 2f       	mov	r19, r18
 c46:	30 95       	com	r19
 c48:	83 23       	and	r24, r19
 c4a:	88 83       	st	Y, r24
		*out |= bit;
 c4c:	ec 91       	ld	r30, X
 c4e:	2e 2b       	or	r18, r30
 c50:	2c 93       	st	X, r18
		SREG = oldSREG;
 c52:	9f bf       	out	0x3f, r25	; 63
 c54:	06 c0       	rjmp	.+12     	; 0xc62 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 c56:	8f b7       	in	r24, 0x3f	; 63
                cli();
 c58:	f8 94       	cli
		*reg |= bit;
 c5a:	e8 81       	ld	r30, Y
 c5c:	2e 2b       	or	r18, r30
 c5e:	28 83       	st	Y, r18
		SREG = oldSREG;
 c60:	8f bf       	out	0x3f, r24	; 63
	}
}
 c62:	df 91       	pop	r29
 c64:	cf 91       	pop	r28
 c66:	08 95       	ret

00000c68 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 c68:	1f 93       	push	r17
 c6a:	cf 93       	push	r28
 c6c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 c6e:	28 2f       	mov	r18, r24
 c70:	30 e0       	ldi	r19, 0x00	; 0
 c72:	f9 01       	movw	r30, r18
 c74:	ea 5e       	subi	r30, 0xEA	; 234
 c76:	fe 4f       	sbci	r31, 0xFE	; 254
 c78:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 c7a:	f9 01       	movw	r30, r18
 c7c:	e4 5a       	subi	r30, 0xA4	; 164
 c7e:	fe 4f       	sbci	r31, 0xFE	; 254
 c80:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 c82:	f9 01       	movw	r30, r18
 c84:	ee 55       	subi	r30, 0x5E	; 94
 c86:	fe 4f       	sbci	r31, 0xFE	; 254
 c88:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 c8a:	cc 23       	and	r28, r28
 c8c:	b9 f0       	breq	.+46     	; 0xcbc <digitalWrite+0x54>
 c8e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 c90:	81 11       	cpse	r24, r1
 c92:	59 df       	rcall	.-334    	; 0xb46 <turnOffPWM>

	out = portOutputRegister(port);
 c94:	ec 2f       	mov	r30, r28
 c96:	f0 e0       	ldi	r31, 0x00	; 0
 c98:	ee 0f       	add	r30, r30
 c9a:	ff 1f       	adc	r31, r31
 c9c:	e8 51       	subi	r30, 0x18	; 24
 c9e:	fe 4f       	sbci	r31, 0xFE	; 254
 ca0:	a5 91       	lpm	r26, Z+
 ca2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 ca4:	9f b7       	in	r25, 0x3f	; 63
	cli();
 ca6:	f8 94       	cli

	if (val == LOW) {
 ca8:	11 11       	cpse	r17, r1
 caa:	04 c0       	rjmp	.+8      	; 0xcb4 <digitalWrite+0x4c>
		*out &= ~bit;
 cac:	8c 91       	ld	r24, X
 cae:	d0 95       	com	r29
 cb0:	d8 23       	and	r29, r24
 cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <digitalWrite+0x50>
	} else {
		*out |= bit;
 cb4:	ec 91       	ld	r30, X
 cb6:	de 2b       	or	r29, r30
 cb8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 cba:	9f bf       	out	0x3f, r25	; 63
}
 cbc:	df 91       	pop	r29
 cbe:	cf 91       	pop	r28
 cc0:	1f 91       	pop	r17
 cc2:	08 95       	ret

00000cc4 <__udivmodsi4>:
 cc4:	a1 e2       	ldi	r26, 0x21	; 33
 cc6:	1a 2e       	mov	r1, r26
 cc8:	aa 1b       	sub	r26, r26
 cca:	bb 1b       	sub	r27, r27
 ccc:	fd 01       	movw	r30, r26
 cce:	0d c0       	rjmp	.+26     	; 0xcea <__udivmodsi4_ep>

00000cd0 <__udivmodsi4_loop>:
 cd0:	aa 1f       	adc	r26, r26
 cd2:	bb 1f       	adc	r27, r27
 cd4:	ee 1f       	adc	r30, r30
 cd6:	ff 1f       	adc	r31, r31
 cd8:	a2 17       	cp	r26, r18
 cda:	b3 07       	cpc	r27, r19
 cdc:	e4 07       	cpc	r30, r20
 cde:	f5 07       	cpc	r31, r21
 ce0:	20 f0       	brcs	.+8      	; 0xcea <__udivmodsi4_ep>
 ce2:	a2 1b       	sub	r26, r18
 ce4:	b3 0b       	sbc	r27, r19
 ce6:	e4 0b       	sbc	r30, r20
 ce8:	f5 0b       	sbc	r31, r21

00000cea <__udivmodsi4_ep>:
 cea:	66 1f       	adc	r22, r22
 cec:	77 1f       	adc	r23, r23
 cee:	88 1f       	adc	r24, r24
 cf0:	99 1f       	adc	r25, r25
 cf2:	1a 94       	dec	r1
 cf4:	69 f7       	brne	.-38     	; 0xcd0 <__udivmodsi4_loop>
 cf6:	60 95       	com	r22
 cf8:	70 95       	com	r23
 cfa:	80 95       	com	r24
 cfc:	90 95       	com	r25
 cfe:	9b 01       	movw	r18, r22
 d00:	ac 01       	movw	r20, r24
 d02:	bd 01       	movw	r22, r26
 d04:	cf 01       	movw	r24, r30
 d06:	08 95       	ret

00000d08 <__tablejump2__>:
 d08:	ee 0f       	add	r30, r30
 d0a:	ff 1f       	adc	r31, r31
 d0c:	88 1f       	adc	r24, r24
 d0e:	8b bf       	out	0x3b, r24	; 59
 d10:	07 90       	elpm	r0, Z+
 d12:	f6 91       	elpm	r31, Z
 d14:	e0 2d       	mov	r30, r0
 d16:	19 94       	eijmp

00000d18 <_exit>:
 d18:	f8 94       	cli

00000d1a <__stop_program>:
 d1a:	ff cf       	rjmp	.-2      	; 0xd1a <__stop_program>
