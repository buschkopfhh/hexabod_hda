
Blink_Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800200  00000d88  00000e1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000143  00800310  00800310  00000f2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a713  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002401  00000000  00000000  0000ba07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e93  00000000  00000000  0000de08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000940  00000000  00000000  0000fc9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002529  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f49  00000000  00000000  00012b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  00015a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	08 c1       	rjmp	.+528    	; 0x212 <__ctors_end>
   2:	00 00       	nop
   4:	34 c1       	rjmp	.+616    	; 0x26e <__bad_interrupt>
   6:	00 00       	nop
   8:	32 c1       	rjmp	.+612    	; 0x26e <__bad_interrupt>
   a:	00 00       	nop
   c:	30 c1       	rjmp	.+608    	; 0x26e <__bad_interrupt>
   e:	00 00       	nop
  10:	2e c1       	rjmp	.+604    	; 0x26e <__bad_interrupt>
  12:	00 00       	nop
  14:	2c c1       	rjmp	.+600    	; 0x26e <__bad_interrupt>
  16:	00 00       	nop
  18:	2a c1       	rjmp	.+596    	; 0x26e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	28 c1       	rjmp	.+592    	; 0x26e <__bad_interrupt>
  1e:	00 00       	nop
  20:	26 c1       	rjmp	.+588    	; 0x26e <__bad_interrupt>
  22:	00 00       	nop
  24:	24 c1       	rjmp	.+584    	; 0x26e <__bad_interrupt>
  26:	00 00       	nop
  28:	22 c1       	rjmp	.+580    	; 0x26e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	20 c1       	rjmp	.+576    	; 0x26e <__bad_interrupt>
  2e:	00 00       	nop
  30:	1e c1       	rjmp	.+572    	; 0x26e <__bad_interrupt>
  32:	00 00       	nop
  34:	1c c1       	rjmp	.+568    	; 0x26e <__bad_interrupt>
  36:	00 00       	nop
  38:	1a c1       	rjmp	.+564    	; 0x26e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	18 c1       	rjmp	.+560    	; 0x26e <__bad_interrupt>
  3e:	00 00       	nop
  40:	16 c1       	rjmp	.+556    	; 0x26e <__bad_interrupt>
  42:	00 00       	nop
  44:	14 c1       	rjmp	.+552    	; 0x26e <__bad_interrupt>
  46:	00 00       	nop
  48:	12 c1       	rjmp	.+548    	; 0x26e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	10 c1       	rjmp	.+544    	; 0x26e <__bad_interrupt>
  4e:	00 00       	nop
  50:	0e c1       	rjmp	.+540    	; 0x26e <__bad_interrupt>
  52:	00 00       	nop
  54:	0c c1       	rjmp	.+536    	; 0x26e <__bad_interrupt>
  56:	00 00       	nop
  58:	0a c1       	rjmp	.+532    	; 0x26e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9f c4       	rjmp	.+2366   	; 0x99c <__vector_23>
  5e:	00 00       	nop
  60:	06 c1       	rjmp	.+524    	; 0x26e <__bad_interrupt>
  62:	00 00       	nop
  64:	fd c2       	rjmp	.+1530   	; 0x660 <__vector_25>
  66:	00 00       	nop
  68:	31 c3       	rjmp	.+1634   	; 0x6cc <__vector_26>
  6a:	00 00       	nop
  6c:	00 c1       	rjmp	.+512    	; 0x26e <__bad_interrupt>
  6e:	00 00       	nop
  70:	fe c0       	rjmp	.+508    	; 0x26e <__bad_interrupt>
  72:	00 00       	nop
  74:	fc c0       	rjmp	.+504    	; 0x26e <__bad_interrupt>
  76:	00 00       	nop
  78:	fa c0       	rjmp	.+500    	; 0x26e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	f8 c0       	rjmp	.+496    	; 0x26e <__bad_interrupt>
  7e:	00 00       	nop
  80:	f6 c0       	rjmp	.+492    	; 0x26e <__bad_interrupt>
  82:	00 00       	nop
  84:	f4 c0       	rjmp	.+488    	; 0x26e <__bad_interrupt>
  86:	00 00       	nop
  88:	f2 c0       	rjmp	.+484    	; 0x26e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	f0 c0       	rjmp	.+480    	; 0x26e <__bad_interrupt>
  8e:	00 00       	nop
  90:	ee c0       	rjmp	.+476    	; 0x26e <__bad_interrupt>
  92:	00 00       	nop
  94:	ec c0       	rjmp	.+472    	; 0x26e <__bad_interrupt>
  96:	00 00       	nop
  98:	ea c0       	rjmp	.+468    	; 0x26e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	e8 c0       	rjmp	.+464    	; 0x26e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	e6 c0       	rjmp	.+460    	; 0x26e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	e4 c0       	rjmp	.+456    	; 0x26e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e2 c0       	rjmp	.+452    	; 0x26e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	e0 c0       	rjmp	.+448    	; 0x26e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	de c0       	rjmp	.+444    	; 0x26e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	dc c0       	rjmp	.+440    	; 0x26e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	da c0       	rjmp	.+436    	; 0x26e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	d8 c0       	rjmp	.+432    	; 0x26e <__bad_interrupt>
  be:	00 00       	nop
  c0:	d6 c0       	rjmp	.+428    	; 0x26e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	d4 c0       	rjmp	.+424    	; 0x26e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	d2 c0       	rjmp	.+420    	; 0x26e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	d0 c0       	rjmp	.+416    	; 0x26e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ce c0       	rjmp	.+412    	; 0x26e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	cc c0       	rjmp	.+408    	; 0x26e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	58 c3       	rjmp	.+1712   	; 0x78a <__vector_54>
  da:	00 00       	nop
  dc:	8c c3       	rjmp	.+1816   	; 0x7f6 <__vector_55>
  de:	00 00       	nop
  e0:	c6 c0       	rjmp	.+396    	; 0x26e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	f2 05       	cpc	r31, r2
  e6:	f5 05       	cpc	r31, r5
  e8:	e4 05       	cpc	r30, r4
  ea:	e8 05       	cpc	r30, r8
  ec:	ee 05       	cpc	r30, r14
  ee:	2c 06       	cpc	r2, r28
  f0:	f9 05       	cpc	r31, r9
  f2:	fd 05       	cpc	r31, r13
  f4:	03 06       	cpc	r0, r19
  f6:	07 06       	cpc	r0, r23
  f8:	0b 06       	cpc	r0, r27
  fa:	11 06       	cpc	r1, r17
  fc:	15 06       	cpc	r1, r21
  fe:	19 06       	cpc	r1, r25
 100:	2c 06       	cpc	r2, r28
 102:	1f 06       	cpc	r1, r31
 104:	23 06       	cpc	r2, r19
 106:	27 06       	cpc	r2, r23

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
 1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
 1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
 20e:	98 03       	fmulsu	r17, r16
 210:	2d 04       	cpc	r2, r13

00000212 <__ctors_end>:
 212:	11 24       	eor	r1, r1
 214:	1f be       	out	0x3f, r1	; 63
 216:	cf ef       	ldi	r28, 0xFF	; 255
 218:	d1 e2       	ldi	r29, 0x21	; 33
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0c bf       	out	0x3c, r16	; 60

00000222 <__do_copy_data>:
 222:	13 e0       	ldi	r17, 0x03	; 3
 224:	a0 e0       	ldi	r26, 0x00	; 0
 226:	b2 e0       	ldi	r27, 0x02	; 2
 228:	e8 e8       	ldi	r30, 0x88	; 136
 22a:	fd e0       	ldi	r31, 0x0D	; 13
 22c:	00 e0       	ldi	r16, 0x00	; 0
 22e:	0b bf       	out	0x3b, r16	; 59
 230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
 232:	07 90       	elpm	r0, Z+
 234:	0d 92       	st	X+, r0
 236:	a0 31       	cpi	r26, 0x10	; 16
 238:	b1 07       	cpc	r27, r17
 23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>

0000023c <__do_clear_bss>:
 23c:	24 e0       	ldi	r18, 0x04	; 4
 23e:	a0 e1       	ldi	r26, 0x10	; 16
 240:	b3 e0       	ldi	r27, 0x03	; 3
 242:	01 c0       	rjmp	.+2      	; 0x246 <.do_clear_bss_start>

00000244 <.do_clear_bss_loop>:
 244:	1d 92       	st	X+, r1

00000246 <.do_clear_bss_start>:
 246:	a3 35       	cpi	r26, 0x53	; 83
 248:	b2 07       	cpc	r27, r18
 24a:	e1 f7       	brne	.-8      	; 0x244 <.do_clear_bss_loop>

0000024c <__do_global_ctors>:
 24c:	11 e0       	ldi	r17, 0x01	; 1
 24e:	c9 e0       	ldi	r28, 0x09	; 9
 250:	d1 e0       	ldi	r29, 0x01	; 1
 252:	00 e0       	ldi	r16, 0x00	; 0
 254:	05 c0       	rjmp	.+10     	; 0x260 <__do_global_ctors+0x14>
 256:	21 97       	sbiw	r28, 0x01	; 1
 258:	01 09       	sbc	r16, r1
 25a:	80 2f       	mov	r24, r16
 25c:	fe 01       	movw	r30, r28
 25e:	8a d5       	rcall	.+2836   	; 0xd74 <__tablejump2__>
 260:	c7 30       	cpi	r28, 0x07	; 7
 262:	d1 07       	cpc	r29, r17
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 07       	cpc	r16, r24
 268:	b1 f7       	brne	.-20     	; 0x256 <__do_global_ctors+0xa>
 26a:	25 d3       	rcall	.+1610   	; 0x8b6 <main>
 26c:	8b c5       	rjmp	.+2838   	; 0xd84 <_exit>

0000026e <__bad_interrupt>:
 26e:	c8 ce       	rjmp	.-624    	; 0x0 <__vectors>

00000270 <_ZN18BluetoothInterfaceC1Ev>:
				Serial.println("default");
			
		}
			
	}
}
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	8d e0       	ldi	r24, 0x0D	; 13
 274:	f2 d4       	rcall	.+2532   	; 0xc5a <pinMode>
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	8c e0       	ldi	r24, 0x0C	; 12
 27a:	ef d4       	rcall	.+2526   	; 0xc5a <pinMode>
 27c:	26 e0       	ldi	r18, 0x06	; 6
 27e:	40 e8       	ldi	r20, 0x80	; 128
 280:	55 e2       	ldi	r21, 0x25	; 37
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	8d ea       	ldi	r24, 0xAD	; 173
 288:	93 e0       	ldi	r25, 0x03	; 3
 28a:	87 c1       	rjmp	.+782    	; 0x59a <_ZN14HardwareSerial5beginEmh>

0000028c <_ZN18BluetoothInterfaceD1Ev>:
 28c:	08 95       	ret

0000028e <_ZN18BluetoothInterface8sendDataEv>:

int BluetoothInterface::sendData()
{
 28e:	cf 93       	push	r28
	Serial.println("Now in Loop");
 290:	62 e3       	ldi	r22, 0x32	; 50
 292:	72 e0       	ldi	r23, 0x02	; 2
 294:	80 e1       	ldi	r24, 0x10	; 16
 296:	93 e0       	ldi	r25, 0x03	; 3
 298:	61 d3       	rcall	.+1730   	; 0x95c <_ZN5Print7printlnEPKc>
	if(BluetoothSerial.available ()>0)
 29a:	8d ea       	ldi	r24, 0xAD	; 173
 29c:	93 e0       	ldi	r25, 0x03	; 3
 29e:	7d d0       	rcall	.+250    	; 0x39a <_ZN14HardwareSerial9availableEv>
 2a0:	18 16       	cp	r1, r24
 2a2:	19 06       	cpc	r1, r25
 2a4:	5c f5       	brge	.+86     	; 0x2fc <_ZN18BluetoothInterface8sendDataEv+0x6e>
	{
		Serial.println("BT is available");
 2a6:	6e e3       	ldi	r22, 0x3E	; 62
 2a8:	72 e0       	ldi	r23, 0x02	; 2
 2aa:	80 e1       	ldi	r24, 0x10	; 16
 2ac:	93 e0       	ldi	r25, 0x03	; 3
 2ae:	56 d3       	rcall	.+1708   	; 0x95c <_ZN5Print7printlnEPKc>
	
		char buffer_value = BluetoothSerial.read();
 2b0:	8d ea       	ldi	r24, 0xAD	; 173
 2b2:	93 e0       	ldi	r25, 0x03	; 3
 2b4:	8c d0       	rcall	.+280    	; 0x3ce <_ZN14HardwareSerial4readEv>
 2b6:	c8 2f       	mov	r28, r24
		Serial.println(buffer_value);
 2b8:	68 2f       	mov	r22, r24
 2ba:	80 e1       	ldi	r24, 0x10	; 16
 2bc:	93 e0       	ldi	r25, 0x03	; 3
 2be:	5e d3       	rcall	.+1724   	; 0x97c <_ZN5Print7printlnEc>
 2c0:	cf 7d       	andi	r28, 0xDF	; 223
		if(buffer_value == 'a' || buffer_value == 'A')
 2c2:	c1 34       	cpi	r28, 0x41	; 65
 2c4:	59 f4       	brne	.+22     	; 0x2dc <_ZN18BluetoothInterface8sendDataEv+0x4e>
		{
			digitalWrite(13, HIGH);    //Turn ON LED
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	8d e0       	ldi	r24, 0x0D	; 13
 2ca:	03 d5       	rcall	.+2566   	; 0xcd2 <digitalWrite>
			Serial.println("LED ON");  //Arduino Terminal of Desktop
 2cc:	6e e4       	ldi	r22, 0x4E	; 78
 2ce:	72 e0       	ldi	r23, 0x02	; 2
 2d0:	80 e1       	ldi	r24, 0x10	; 16
 2d2:	93 e0       	ldi	r25, 0x03	; 3
 2d4:	43 d3       	rcall	.+1670   	; 0x95c <_ZN5Print7printlnEPKc>
 2d6:	6e e4       	ldi	r22, 0x4E	; 78
			BluetoothSerial.println("LED ON"); //Bluetooth Terminal on Mobile
 2d8:	72 e0       	ldi	r23, 0x02	; 2
 2da:	0c c0       	rjmp	.+24     	; 0x2f4 <_ZN18BluetoothInterface8sendDataEv+0x66>
		}
		else if(buffer_value == 'b' || buffer_value == 'B')
 2dc:	c2 34       	cpi	r28, 0x42	; 66
 2de:	71 f4       	brne	.+28     	; 0x2fc <_ZN18BluetoothInterface8sendDataEv+0x6e>
		{
			digitalWrite(13, LOW);      //Turn OFF LED
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	8d e0       	ldi	r24, 0x0D	; 13
 2e4:	f6 d4       	rcall	.+2540   	; 0xcd2 <digitalWrite>
			Serial.println("LED OFF");  //Arduino Terminal on Desktop
 2e6:	65 e5       	ldi	r22, 0x55	; 85
 2e8:	72 e0       	ldi	r23, 0x02	; 2
 2ea:	80 e1       	ldi	r24, 0x10	; 16
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	36 d3       	rcall	.+1644   	; 0x95c <_ZN5Print7printlnEPKc>
			BluetoothSerial.println("LED OFF"); //Bluetooth Terminal on Mobile
 2f0:	65 e5       	ldi	r22, 0x55	; 85
 2f2:	72 e0       	ldi	r23, 0x02	; 2
 2f4:	8d ea       	ldi	r24, 0xAD	; 173
 2f6:	93 e0       	ldi	r25, 0x03	; 3
		}
	}
}
 2f8:	cf 91       	pop	r28
		}
		else if(buffer_value == 'b' || buffer_value == 'B')
		{
			digitalWrite(13, LOW);      //Turn OFF LED
			Serial.println("LED OFF");  //Arduino Terminal on Desktop
			BluetoothSerial.println("LED OFF"); //Bluetooth Terminal on Mobile
 2fa:	30 c3       	rjmp	.+1632   	; 0x95c <_ZN5Print7printlnEPKc>
 2fc:	cf 91       	pop	r28
		}
	}
}
 2fe:	08 95       	ret

00000300 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 300:	26 e0       	ldi	r18, 0x06	; 6
 302:	40 e8       	ldi	r20, 0x80	; 128
 304:	55 e2       	ldi	r21, 0x25	; 37
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	8d ea       	ldi	r24, 0xAD	; 173
 30c:	93 e0       	ldi	r25, 0x03	; 3
 30e:	45 d1       	rcall	.+650    	; 0x59a <_ZN14HardwareSerial5beginEmh>
 310:	26 e0       	ldi	r18, 0x06	; 6
 312:	40 e8       	ldi	r20, 0x80	; 128
 314:	55 e2       	ldi	r21, 0x25	; 37
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	80 e1       	ldi	r24, 0x10	; 16
 31c:	93 e0       	ldi	r25, 0x03	; 3
 31e:	3d d1       	rcall	.+634    	; 0x59a <_ZN14HardwareSerial5beginEmh>
void setup() {
	// initialize digital pin LED_BUILTIN as an output.
	
	BTserial.begin(9600);
	Serial.begin(9600);         //Sets the data rate in bits per second (baud) for serial data transmission
	Serial.println("This is the arduino for Hexapod!!!");
 320:	6d e5       	ldi	r22, 0x5D	; 93
 322:	72 e0       	ldi	r23, 0x02	; 2
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	93 e0       	ldi	r25, 0x03	; 3
 328:	19 d3       	rcall	.+1586   	; 0x95c <_ZN5Print7printlnEPKc>
	Serial.println(" ");
 32a:	60 e8       	ldi	r22, 0x80	; 128
 32c:	72 e0       	ldi	r23, 0x02	; 2
 32e:	80 e1       	ldi	r24, 0x10	; 16
 330:	93 e0       	ldi	r25, 0x03	; 3
 332:	14 d3       	rcall	.+1576   	; 0x95c <_ZN5Print7printlnEPKc>
	Serial.println("To connect, start the LED Controller App on your Smartphone");
 334:	62 e8       	ldi	r22, 0x82	; 130
 336:	72 e0       	ldi	r23, 0x02	; 2
 338:	80 e1       	ldi	r24, 0x10	; 16
 33a:	93 e0       	ldi	r25, 0x03	; 3
 33c:	0f d3       	rcall	.+1566   	; 0x95c <_ZN5Print7printlnEPKc>
	Serial.println("and connect to Bluetooth HC-05");
 33e:	6e eb       	ldi	r22, 0xBE	; 190
 340:	72 e0       	ldi	r23, 0x02	; 2
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	93 e0       	ldi	r25, 0x03	; 3
 346:	0a d3       	rcall	.+1556   	; 0x95c <_ZN5Print7printlnEPKc>
	BTserial.println("PRESS A to beginn");
 348:	6d ed       	ldi	r22, 0xDD	; 221
 34a:	72 e0       	ldi	r23, 0x02	; 2
 34c:	8d ea       	ldi	r24, 0xAD	; 173
 34e:	93 e0       	ldi	r25, 0x03	; 3
 350:	05 d3       	rcall	.+1546   	; 0x95c <_ZN5Print7printlnEPKc>

	//int count = 0;
//	BluetoothInterface to;
//	to:BluetoothInterface();	
	digitalWrite(LED_BUILTIN, HIGH); 
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	8d e0       	ldi	r24, 0x0D	; 13
 356:	bd c4       	rjmp	.+2426   	; 0xcd2 <digitalWrite>

00000358 <loop>:
 358:	cf 93       	push	r28
  
}


// the loop function runs over and over again forever
void loop() {
 35a:	df 93       	push	r29
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	27 97       	sbiw	r28, 0x07	; 7
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61

	//(every Value has to be seperated through a comma (',') and the message has to

	//end with a semikolon (';'))

	BluetoothInterface myBluetooth;
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	7f df       	rcall	.-258    	; 0x270 <_ZN18BluetoothInterfaceC1Ev>
				
	//myBluetooth.readInput();
	myBluetooth.sendData();
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	8b df       	rcall	.-234    	; 0x28e <_ZN18BluetoothInterface8sendDataEv>
	
	delay(1000);
 378:	68 ee       	ldi	r22, 0xE8	; 232
 37a:	73 e0       	ldi	r23, 0x03	; 3
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	7c d3       	rcall	.+1784   	; 0xa7a <delay>

	//(every Value has to be seperated through a comma (',') and the message has to

	//end with a semikolon (';'))

	BluetoothInterface myBluetooth;
 382:	ce 01       	movw	r24, r28
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	82 df       	rcall	.-252    	; 0x28c <_ZN18BluetoothInterfaceD1Ev>
 388:	27 96       	adiw	r28, 0x07	; 7
				
	//myBluetooth.readInput();
	myBluetooth.sendData();
	
	delay(1000);
}
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 39a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 39c:	91 8d       	ldd	r25, Z+25	; 0x19
 39e:	22 8d       	ldd	r18, Z+26	; 0x1a
 3a0:	89 2f       	mov	r24, r25
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	80 5c       	subi	r24, 0xC0	; 192
 3a6:	9f 4f       	sbci	r25, 0xFF	; 255
 3a8:	82 1b       	sub	r24, r18
 3aa:	91 09       	sbc	r25, r1
}
 3ac:	8f 73       	andi	r24, 0x3F	; 63
 3ae:	99 27       	eor	r25, r25
 3b0:	08 95       	ret

000003b2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 3b2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 3b4:	91 8d       	ldd	r25, Z+25	; 0x19
 3b6:	82 8d       	ldd	r24, Z+26	; 0x1a
 3b8:	98 17       	cp	r25, r24
 3ba:	31 f0       	breq	.+12     	; 0x3c8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 3bc:	82 8d       	ldd	r24, Z+26	; 0x1a
 3be:	e8 0f       	add	r30, r24
 3c0:	f1 1d       	adc	r31, r1
 3c2:	85 8d       	ldd	r24, Z+29	; 0x1d
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 3cc:	08 95       	ret

000003ce <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 3ce:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 3d0:	91 8d       	ldd	r25, Z+25	; 0x19
 3d2:	82 8d       	ldd	r24, Z+26	; 0x1a
 3d4:	98 17       	cp	r25, r24
 3d6:	61 f0       	breq	.+24     	; 0x3f0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 3d8:	82 8d       	ldd	r24, Z+26	; 0x1a
 3da:	df 01       	movw	r26, r30
 3dc:	a8 0f       	add	r26, r24
 3de:	b1 1d       	adc	r27, r1
 3e0:	5d 96       	adiw	r26, 0x1d	; 29
 3e2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 3e4:	92 8d       	ldd	r25, Z+26	; 0x1a
 3e6:	9f 5f       	subi	r25, 0xFF	; 255
 3e8:	9f 73       	andi	r25, 0x3F	; 63
 3ea:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 3f4:	08 95       	ret

000003f6 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 3f6:	fc 01       	movw	r30, r24
 3f8:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 3fa:	44 8d       	ldd	r20, Z+28	; 0x1c
 3fc:	25 2f       	mov	r18, r21
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	84 2f       	mov	r24, r20
 402:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 404:	82 1b       	sub	r24, r18
 406:	93 0b       	sbc	r25, r19
 408:	54 17       	cp	r21, r20
 40a:	10 f0       	brcs	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	cf 96       	adiw	r24, 0x3f	; 63
 40e:	08 95       	ret
  return tail - head - 1;
 410:	01 97       	sbiw	r24, 0x01	; 1
}
 412:	08 95       	ret

00000414 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 414:	8f e8       	ldi	r24, 0x8F	; 143
 416:	93 e0       	ldi	r25, 0x03	; 3
 418:	89 2b       	or	r24, r25
 41a:	39 f0       	breq	.+14     	; 0x42a <_Z14serialEventRunv+0x16>
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	89 2b       	or	r24, r25
 422:	19 f0       	breq	.+6      	; 0x42a <_Z14serialEventRunv+0x16>
 424:	7c d1       	rcall	.+760    	; 0x71e <_Z17Serial0_availablev>
 426:	81 11       	cpse	r24, r1
 428:	24 c0       	rjmp	.+72     	; 0x472 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	89 2b       	or	r24, r25
 430:	41 f0       	breq	.+16     	; 0x442 <_Z14serialEventRunv+0x2e>
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	89 2b       	or	r24, r25
 438:	21 f0       	breq	.+8      	; 0x442 <_Z14serialEventRunv+0x2e>
 43a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 43e:	81 11       	cpse	r24, r1
 440:	1b c0       	rjmp	.+54     	; 0x478 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	89 2b       	or	r24, r25
 448:	41 f0       	breq	.+16     	; 0x45a <_Z14serialEventRunv+0x46>
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	89 2b       	or	r24, r25
 450:	21 f0       	breq	.+8      	; 0x45a <_Z14serialEventRunv+0x46>
 452:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 456:	81 11       	cpse	r24, r1
 458:	12 c0       	rjmp	.+36     	; 0x47e <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 45a:	84 e2       	ldi	r24, 0x24	; 36
 45c:	94 e0       	ldi	r25, 0x04	; 4
 45e:	89 2b       	or	r24, r25
 460:	99 f0       	breq	.+38     	; 0x488 <_Z14serialEventRunv+0x74>
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	89 2b       	or	r24, r25
 468:	79 f0       	breq	.+30     	; 0x488 <_Z14serialEventRunv+0x74>
 46a:	ee d1       	rcall	.+988    	; 0x848 <_Z17Serial3_availablev>
 46c:	81 11       	cpse	r24, r1
 46e:	0a c0       	rjmp	.+20     	; 0x484 <_Z14serialEventRunv+0x70>
 470:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 472:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 476:	d9 cf       	rjmp	.-78     	; 0x42a <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 478:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 47c:	e2 cf       	rjmp	.-60     	; 0x442 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 47e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 482:	eb cf       	rjmp	.-42     	; 0x45a <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 484:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 488:	08 95       	ret

0000048a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 48a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 48c:	84 8d       	ldd	r24, Z+28	; 0x1c
 48e:	df 01       	movw	r26, r30
 490:	a8 0f       	add	r26, r24
 492:	b1 1d       	adc	r27, r1
 494:	a3 5a       	subi	r26, 0xA3	; 163
 496:	bf 4f       	sbci	r27, 0xFF	; 255
 498:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 49a:	84 8d       	ldd	r24, Z+28	; 0x1c
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	8f 73       	andi	r24, 0x3F	; 63
 4a2:	99 27       	eor	r25, r25
 4a4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 4a6:	a6 89       	ldd	r26, Z+22	; 0x16
 4a8:	b7 89       	ldd	r27, Z+23	; 0x17
 4aa:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 4ac:	a0 89       	ldd	r26, Z+16	; 0x10
 4ae:	b1 89       	ldd	r27, Z+17	; 0x11
 4b0:	8c 91       	ld	r24, X
 4b2:	80 64       	ori	r24, 0x40	; 64
 4b4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 4b6:	93 8d       	ldd	r25, Z+27	; 0x1b
 4b8:	84 8d       	ldd	r24, Z+28	; 0x1c
 4ba:	98 13       	cpse	r25, r24
 4bc:	06 c0       	rjmp	.+12     	; 0x4ca <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 4be:	02 88       	ldd	r0, Z+18	; 0x12
 4c0:	f3 89       	ldd	r31, Z+19	; 0x13
 4c2:	e0 2d       	mov	r30, r0
 4c4:	80 81       	ld	r24, Z
 4c6:	8f 7d       	andi	r24, 0xDF	; 223
 4c8:	80 83       	st	Z, r24
 4ca:	08 95       	ret

000004cc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 4cc:	ef 92       	push	r14
 4ce:	ff 92       	push	r15
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	ec 01       	movw	r28, r24
  _written = true;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 4de:	9b 8d       	ldd	r25, Y+27	; 0x1b
 4e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4e2:	98 13       	cpse	r25, r24
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <_ZN14HardwareSerial5writeEh+0x24>
 4e6:	e8 89       	ldd	r30, Y+16	; 0x10
 4e8:	f9 89       	ldd	r31, Y+17	; 0x11
 4ea:	80 81       	ld	r24, Z
 4ec:	85 fd       	sbrc	r24, 5
 4ee:	23 c0       	rjmp	.+70     	; 0x536 <_ZN14HardwareSerial5writeEh+0x6a>
 4f0:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 4f2:	0b 8d       	ldd	r16, Y+27	; 0x1b
 4f4:	10 e0       	ldi	r17, 0x00	; 0
 4f6:	0f 5f       	subi	r16, 0xFF	; 255
 4f8:	1f 4f       	sbci	r17, 0xFF	; 255
 4fa:	0f 73       	andi	r16, 0x3F	; 63
 4fc:	11 27       	eor	r17, r17
 4fe:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 500:	8c 8d       	ldd	r24, Y+28	; 0x1c
 502:	e8 12       	cpse	r14, r24
 504:	0b c0       	rjmp	.+22     	; 0x51c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	07 fc       	sbrc	r0, 7
 50a:	fa cf       	rjmp	.-12     	; 0x500 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 50c:	e8 89       	ldd	r30, Y+16	; 0x10
 50e:	f9 89       	ldd	r31, Y+17	; 0x11
 510:	80 81       	ld	r24, Z
 512:	85 ff       	sbrs	r24, 5
 514:	f5 cf       	rjmp	.-22     	; 0x500 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 516:	ce 01       	movw	r24, r28
 518:	b8 df       	rcall	.-144    	; 0x48a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 51a:	f2 cf       	rjmp	.-28     	; 0x500 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 51c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 51e:	fe 01       	movw	r30, r28
 520:	e8 0f       	add	r30, r24
 522:	f1 1d       	adc	r31, r1
 524:	e3 5a       	subi	r30, 0xA3	; 163
 526:	ff 4f       	sbci	r31, 0xFF	; 255
 528:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 52a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 52c:	ea 89       	ldd	r30, Y+18	; 0x12
 52e:	fb 89       	ldd	r31, Y+19	; 0x13
 530:	80 81       	ld	r24, Z
 532:	80 62       	ori	r24, 0x20	; 32
 534:	07 c0       	rjmp	.+14     	; 0x544 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 536:	ee 89       	ldd	r30, Y+22	; 0x16
 538:	ff 89       	ldd	r31, Y+23	; 0x17
 53a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 53c:	e8 89       	ldd	r30, Y+16	; 0x10
 53e:	f9 89       	ldd	r31, Y+17	; 0x11
 540:	80 81       	ld	r24, Z
 542:	80 64       	ori	r24, 0x40	; 64
 544:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	08 95       	ret

00000558 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 55e:	88 8d       	ldd	r24, Y+24	; 0x18
 560:	88 23       	and	r24, r24
 562:	c1 f0       	breq	.+48     	; 0x594 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 564:	ea 89       	ldd	r30, Y+18	; 0x12
 566:	fb 89       	ldd	r31, Y+19	; 0x13
 568:	80 81       	ld	r24, Z
 56a:	85 fd       	sbrc	r24, 5
 56c:	05 c0       	rjmp	.+10     	; 0x578 <_ZN14HardwareSerial5flushEv+0x20>
 56e:	a8 89       	ldd	r26, Y+16	; 0x10
 570:	b9 89       	ldd	r27, Y+17	; 0x11
 572:	8c 91       	ld	r24, X
 574:	86 fd       	sbrc	r24, 6
 576:	0e c0       	rjmp	.+28     	; 0x594 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	07 fc       	sbrc	r0, 7
 57c:	f5 cf       	rjmp	.-22     	; 0x568 <_ZN14HardwareSerial5flushEv+0x10>
 57e:	80 81       	ld	r24, Z
 580:	85 ff       	sbrs	r24, 5
 582:	f2 cf       	rjmp	.-28     	; 0x568 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 584:	a8 89       	ldd	r26, Y+16	; 0x10
 586:	b9 89       	ldd	r27, Y+17	; 0x11
 588:	8c 91       	ld	r24, X
 58a:	85 ff       	sbrs	r24, 5
 58c:	ed cf       	rjmp	.-38     	; 0x568 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 58e:	ce 01       	movw	r24, r28
 590:	7c df       	rcall	.-264    	; 0x48a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 592:	e8 cf       	rjmp	.-48     	; 0x564 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 59a:	cf 92       	push	r12
 59c:	df 92       	push	r13
 59e:	ef 92       	push	r14
 5a0:	ff 92       	push	r15
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	ec 01       	movw	r28, r24
 5aa:	6a 01       	movw	r12, r20
 5ac:	7b 01       	movw	r14, r22
 5ae:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 5b0:	e8 89       	ldd	r30, Y+16	; 0x10
 5b2:	f9 89       	ldd	r31, Y+17	; 0x11
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5b8:	41 15       	cp	r20, r1
 5ba:	51 4e       	sbci	r21, 0xE1	; 225
 5bc:	61 05       	cpc	r22, r1
 5be:	71 05       	cpc	r23, r1
 5c0:	a9 f0       	breq	.+42     	; 0x5ec <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	79 e0       	ldi	r23, 0x09	; 9
 5c6:	8d e3       	ldi	r24, 0x3D	; 61
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	a7 01       	movw	r20, r14
 5cc:	96 01       	movw	r18, r12
 5ce:	b0 d3       	rcall	.+1888   	; 0xd30 <__udivmodsi4>
 5d0:	da 01       	movw	r26, r20
 5d2:	c9 01       	movw	r24, r18
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	a1 09       	sbc	r26, r1
 5d8:	b1 09       	sbc	r27, r1
 5da:	b6 95       	lsr	r27
 5dc:	a7 95       	ror	r26
 5de:	97 95       	ror	r25
 5e0:	87 95       	ror	r24
 5e2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5e4:	21 15       	cp	r18, r1
 5e6:	80 e1       	ldi	r24, 0x10	; 16
 5e8:	38 07       	cpc	r19, r24
 5ea:	a0 f0       	brcs	.+40     	; 0x614 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 5ec:	e8 89       	ldd	r30, Y+16	; 0x10
 5ee:	f9 89       	ldd	r31, Y+17	; 0x11
 5f0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 5f2:	60 e8       	ldi	r22, 0x80	; 128
 5f4:	74 e8       	ldi	r23, 0x84	; 132
 5f6:	8e e1       	ldi	r24, 0x1E	; 30
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	a7 01       	movw	r20, r14
 5fc:	96 01       	movw	r18, r12
 5fe:	98 d3       	rcall	.+1840   	; 0xd30 <__udivmodsi4>
 600:	da 01       	movw	r26, r20
 602:	c9 01       	movw	r24, r18
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	a1 09       	sbc	r26, r1
 608:	b1 09       	sbc	r27, r1
 60a:	b6 95       	lsr	r27
 60c:	a7 95       	ror	r26
 60e:	97 95       	ror	r25
 610:	87 95       	ror	r24
 612:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 614:	ec 85       	ldd	r30, Y+12	; 0x0c
 616:	fd 85       	ldd	r31, Y+13	; 0x0d
 618:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 61a:	ee 85       	ldd	r30, Y+14	; 0x0e
 61c:	ff 85       	ldd	r31, Y+15	; 0x0f
 61e:	20 83       	st	Z, r18

  _written = false;
 620:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 622:	ec 89       	ldd	r30, Y+20	; 0x14
 624:	fd 89       	ldd	r31, Y+21	; 0x15
 626:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 628:	ea 89       	ldd	r30, Y+18	; 0x12
 62a:	fb 89       	ldd	r31, Y+19	; 0x13
 62c:	80 81       	ld	r24, Z
 62e:	80 61       	ori	r24, 0x10	; 16
 630:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 632:	ea 89       	ldd	r30, Y+18	; 0x12
 634:	fb 89       	ldd	r31, Y+19	; 0x13
 636:	80 81       	ld	r24, Z
 638:	88 60       	ori	r24, 0x08	; 8
 63a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 63c:	ea 89       	ldd	r30, Y+18	; 0x12
 63e:	fb 89       	ldd	r31, Y+19	; 0x13
 640:	80 81       	ld	r24, Z
 642:	80 68       	ori	r24, 0x80	; 128
 644:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 646:	ea 89       	ldd	r30, Y+18	; 0x12
 648:	fb 89       	ldd	r31, Y+19	; 0x13
 64a:	80 81       	ld	r24, Z
 64c:	8f 7d       	andi	r24, 0xDF	; 223
 64e:	80 83       	st	Z, r24
}
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	1f 91       	pop	r17
 656:	ff 90       	pop	r15
 658:	ef 90       	pop	r14
 65a:	df 90       	pop	r13
 65c:	cf 90       	pop	r12
 65e:	08 95       	ret

00000660 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 660:	1f 92       	push	r1
 662:	0f 92       	push	r0
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	0f 92       	push	r0
 668:	11 24       	eor	r1, r1
 66a:	0b b6       	in	r0, 0x3b	; 59
 66c:	0f 92       	push	r0
 66e:	2f 93       	push	r18
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 678:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <__data_end+0x10>
 67c:	f0 91 21 03 	lds	r31, 0x0321	; 0x800321 <__data_end+0x11>
 680:	80 81       	ld	r24, Z
 682:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <__data_end+0x16>
 686:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <__data_end+0x17>
 68a:	82 fd       	sbrc	r24, 2
 68c:	12 c0       	rjmp	.+36     	; 0x6b2 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 68e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 690:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <__data_end+0x19>
 694:	8f 5f       	subi	r24, 0xFF	; 255
 696:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 698:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <__data_end+0x1a>
 69c:	82 17       	cp	r24, r18
 69e:	51 f0       	breq	.+20     	; 0x6b4 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 6a0:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <__data_end+0x19>
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	e0 5f       	subi	r30, 0xF0	; 240
 6a8:	fc 4f       	sbci	r31, 0xFC	; 252
 6aa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 6ac:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <__data_end+0x19>
 6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 6b2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 6b4:	ff 91       	pop	r31
 6b6:	ef 91       	pop	r30
 6b8:	9f 91       	pop	r25
 6ba:	8f 91       	pop	r24
 6bc:	2f 91       	pop	r18
 6be:	0f 90       	pop	r0
 6c0:	0b be       	out	0x3b, r0	; 59
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 6cc:	1f 92       	push	r1
 6ce:	0f 92       	push	r0
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	0f 92       	push	r0
 6d4:	11 24       	eor	r1, r1
 6d6:	0b b6       	in	r0, 0x3b	; 59
 6d8:	0f 92       	push	r0
 6da:	2f 93       	push	r18
 6dc:	3f 93       	push	r19
 6de:	4f 93       	push	r20
 6e0:	5f 93       	push	r21
 6e2:	6f 93       	push	r22
 6e4:	7f 93       	push	r23
 6e6:	8f 93       	push	r24
 6e8:	9f 93       	push	r25
 6ea:	af 93       	push	r26
 6ec:	bf 93       	push	r27
 6ee:	ef 93       	push	r30
 6f0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 6f2:	80 e1       	ldi	r24, 0x10	; 16
 6f4:	93 e0       	ldi	r25, 0x03	; 3
 6f6:	c9 de       	rcall	.-622    	; 0x48a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 6f8:	ff 91       	pop	r31
 6fa:	ef 91       	pop	r30
 6fc:	bf 91       	pop	r27
 6fe:	af 91       	pop	r26
 700:	9f 91       	pop	r25
 702:	8f 91       	pop	r24
 704:	7f 91       	pop	r23
 706:	6f 91       	pop	r22
 708:	5f 91       	pop	r21
 70a:	4f 91       	pop	r20
 70c:	3f 91       	pop	r19
 70e:	2f 91       	pop	r18
 710:	0f 90       	pop	r0
 712:	0b be       	out	0x3b, r0	; 59
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	0f 90       	pop	r0
 71a:	1f 90       	pop	r1
 71c:	18 95       	reti

0000071e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 71e:	80 e1       	ldi	r24, 0x10	; 16
 720:	93 e0       	ldi	r25, 0x03	; 3
 722:	3b de       	rcall	.-906    	; 0x39a <_ZN14HardwareSerial9availableEv>
 724:	21 e0       	ldi	r18, 0x01	; 1
 726:	89 2b       	or	r24, r25
 728:	09 f4       	brne	.+2      	; 0x72c <_Z17Serial0_availablev+0xe>
 72a:	20 e0       	ldi	r18, 0x00	; 0
}
 72c:	82 2f       	mov	r24, r18
 72e:	08 95       	ret

00000730 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 730:	e0 e1       	ldi	r30, 0x10	; 16
 732:	f3 e0       	ldi	r31, 0x03	; 3
 734:	13 82       	std	Z+3, r1	; 0x03
 736:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 738:	88 ee       	ldi	r24, 0xE8	; 232
 73a:	93 e0       	ldi	r25, 0x03	; 3
 73c:	a0 e0       	ldi	r26, 0x00	; 0
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	84 83       	std	Z+4, r24	; 0x04
 742:	95 83       	std	Z+5, r25	; 0x05
 744:	a6 83       	std	Z+6, r26	; 0x06
 746:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 748:	83 ef       	ldi	r24, 0xF3	; 243
 74a:	92 e0       	ldi	r25, 0x02	; 2
 74c:	91 83       	std	Z+1, r25	; 0x01
 74e:	80 83       	st	Z, r24
 750:	85 ec       	ldi	r24, 0xC5	; 197
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	95 87       	std	Z+13, r25	; 0x0d
 756:	84 87       	std	Z+12, r24	; 0x0c
 758:	84 ec       	ldi	r24, 0xC4	; 196
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	97 87       	std	Z+15, r25	; 0x0f
 75e:	86 87       	std	Z+14, r24	; 0x0e
 760:	80 ec       	ldi	r24, 0xC0	; 192
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	91 8b       	std	Z+17, r25	; 0x11
 766:	80 8b       	std	Z+16, r24	; 0x10
 768:	81 ec       	ldi	r24, 0xC1	; 193
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	93 8b       	std	Z+19, r25	; 0x13
 76e:	82 8b       	std	Z+18, r24	; 0x12
 770:	82 ec       	ldi	r24, 0xC2	; 194
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	95 8b       	std	Z+21, r25	; 0x15
 776:	84 8b       	std	Z+20, r24	; 0x14
 778:	86 ec       	ldi	r24, 0xC6	; 198
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	97 8b       	std	Z+23, r25	; 0x17
 77e:	86 8b       	std	Z+22, r24	; 0x16
 780:	11 8e       	std	Z+25, r1	; 0x19
 782:	12 8e       	std	Z+26, r1	; 0x1a
 784:	13 8e       	std	Z+27, r1	; 0x1b
 786:	14 8e       	std	Z+28, r1	; 0x1c
 788:	08 95       	ret

0000078a <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
 78a:	1f 92       	push	r1
 78c:	0f 92       	push	r0
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	0f 92       	push	r0
 792:	11 24       	eor	r1, r1
 794:	0b b6       	in	r0, 0x3b	; 59
 796:	0f 92       	push	r0
 798:	2f 93       	push	r18
 79a:	8f 93       	push	r24
 79c:	9f 93       	push	r25
 79e:	ef 93       	push	r30
 7a0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 7a2:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <Serial3+0x10>
 7a6:	f0 91 be 03 	lds	r31, 0x03BE	; 0x8003be <Serial3+0x11>
 7aa:	80 81       	ld	r24, Z
 7ac:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <Serial3+0x16>
 7b0:	f0 91 c4 03 	lds	r31, 0x03C4	; 0x8003c4 <Serial3+0x17>
 7b4:	82 fd       	sbrc	r24, 2
 7b6:	12 c0       	rjmp	.+36     	; 0x7dc <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 7b8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 7ba:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <Serial3+0x19>
 7be:	8f 5f       	subi	r24, 0xFF	; 255
 7c0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 7c2:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <Serial3+0x1a>
 7c6:	82 17       	cp	r24, r18
 7c8:	51 f0       	breq	.+20     	; 0x7de <__vector_54+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 7ca:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <Serial3+0x19>
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	e3 55       	subi	r30, 0x53	; 83
 7d2:	fc 4f       	sbci	r31, 0xFC	; 252
 7d4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 7d6:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <Serial3+0x19>
 7da:	01 c0       	rjmp	.+2      	; 0x7de <__vector_54+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 7dc:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
 7de:	ff 91       	pop	r31
 7e0:	ef 91       	pop	r30
 7e2:	9f 91       	pop	r25
 7e4:	8f 91       	pop	r24
 7e6:	2f 91       	pop	r18
 7e8:	0f 90       	pop	r0
 7ea:	0b be       	out	0x3b, r0	; 59
 7ec:	0f 90       	pop	r0
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	0f 90       	pop	r0
 7f2:	1f 90       	pop	r1
 7f4:	18 95       	reti

000007f6 <__vector_55>:

ISR(USART3_UDRE_vect)
{
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	0b b6       	in	r0, 0x3b	; 59
 802:	0f 92       	push	r0
 804:	2f 93       	push	r18
 806:	3f 93       	push	r19
 808:	4f 93       	push	r20
 80a:	5f 93       	push	r21
 80c:	6f 93       	push	r22
 80e:	7f 93       	push	r23
 810:	8f 93       	push	r24
 812:	9f 93       	push	r25
 814:	af 93       	push	r26
 816:	bf 93       	push	r27
 818:	ef 93       	push	r30
 81a:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
 81c:	8d ea       	ldi	r24, 0xAD	; 173
 81e:	93 e0       	ldi	r25, 0x03	; 3
 820:	34 de       	rcall	.-920    	; 0x48a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 822:	ff 91       	pop	r31
 824:	ef 91       	pop	r30
 826:	bf 91       	pop	r27
 828:	af 91       	pop	r26
 82a:	9f 91       	pop	r25
 82c:	8f 91       	pop	r24
 82e:	7f 91       	pop	r23
 830:	6f 91       	pop	r22
 832:	5f 91       	pop	r21
 834:	4f 91       	pop	r20
 836:	3f 91       	pop	r19
 838:	2f 91       	pop	r18
 83a:	0f 90       	pop	r0
 83c:	0b be       	out	0x3b, r0	; 59
 83e:	0f 90       	pop	r0
 840:	0f be       	out	0x3f, r0	; 63
 842:	0f 90       	pop	r0
 844:	1f 90       	pop	r1
 846:	18 95       	reti

00000848 <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
 848:	8d ea       	ldi	r24, 0xAD	; 173
 84a:	93 e0       	ldi	r25, 0x03	; 3
 84c:	a6 dd       	rcall	.-1204   	; 0x39a <_ZN14HardwareSerial9availableEv>
 84e:	21 e0       	ldi	r18, 0x01	; 1
 850:	89 2b       	or	r24, r25
 852:	09 f4       	brne	.+2      	; 0x856 <_Z17Serial3_availablev+0xe>
 854:	20 e0       	ldi	r18, 0x00	; 0
}
 856:	82 2f       	mov	r24, r18
 858:	08 95       	ret

0000085a <_GLOBAL__sub_I___vector_54>:
 85a:	ed ea       	ldi	r30, 0xAD	; 173
 85c:	f3 e0       	ldi	r31, 0x03	; 3
 85e:	13 82       	std	Z+3, r1	; 0x03
 860:	12 82       	std	Z+2, r1	; 0x02
 862:	88 ee       	ldi	r24, 0xE8	; 232
 864:	93 e0       	ldi	r25, 0x03	; 3
 866:	a0 e0       	ldi	r26, 0x00	; 0
 868:	b0 e0       	ldi	r27, 0x00	; 0
 86a:	84 83       	std	Z+4, r24	; 0x04
 86c:	95 83       	std	Z+5, r25	; 0x05
 86e:	a6 83       	std	Z+6, r26	; 0x06
 870:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 872:	83 ef       	ldi	r24, 0xF3	; 243
 874:	92 e0       	ldi	r25, 0x02	; 2
 876:	91 83       	std	Z+1, r25	; 0x01
 878:	80 83       	st	Z, r24
 87a:	85 e3       	ldi	r24, 0x35	; 53
 87c:	91 e0       	ldi	r25, 0x01	; 1
 87e:	95 87       	std	Z+13, r25	; 0x0d
 880:	84 87       	std	Z+12, r24	; 0x0c
 882:	84 e3       	ldi	r24, 0x34	; 52
 884:	91 e0       	ldi	r25, 0x01	; 1
 886:	97 87       	std	Z+15, r25	; 0x0f
 888:	86 87       	std	Z+14, r24	; 0x0e
 88a:	80 e3       	ldi	r24, 0x30	; 48
 88c:	91 e0       	ldi	r25, 0x01	; 1
 88e:	91 8b       	std	Z+17, r25	; 0x11
 890:	80 8b       	std	Z+16, r24	; 0x10
 892:	81 e3       	ldi	r24, 0x31	; 49
 894:	91 e0       	ldi	r25, 0x01	; 1
 896:	93 8b       	std	Z+19, r25	; 0x13
 898:	82 8b       	std	Z+18, r24	; 0x12
 89a:	82 e3       	ldi	r24, 0x32	; 50
 89c:	91 e0       	ldi	r25, 0x01	; 1
 89e:	95 8b       	std	Z+21, r25	; 0x15
 8a0:	84 8b       	std	Z+20, r24	; 0x14
 8a2:	86 e3       	ldi	r24, 0x36	; 54
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	97 8b       	std	Z+23, r25	; 0x17
 8a8:	86 8b       	std	Z+22, r24	; 0x16
 8aa:	11 8e       	std	Z+25, r1	; 0x19
 8ac:	12 8e       	std	Z+26, r1	; 0x1a
 8ae:	13 8e       	std	Z+27, r1	; 0x1b
 8b0:	14 8e       	std	Z+28, r1	; 0x1c
 8b2:	08 95       	ret

000008b4 <initVariant>:
 8b4:	08 95       	ret

000008b6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 8b6:	1a d1       	rcall	.+564    	; 0xaec <init>

	initVariant();
 8b8:	fd df       	rcall	.-6      	; 0x8b4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 8ba:	22 dd       	rcall	.-1468   	; 0x300 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 8bc:	ca e0       	ldi	r28, 0x0A	; 10
 8be:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 8c0:	4b dd       	rcall	.-1386   	; 0x358 <loop>
		if (serialEventRun) serialEventRun();
 8c2:	20 97       	sbiw	r28, 0x00	; 0
 8c4:	e9 f3       	breq	.-6      	; 0x8c0 <main+0xa>
 8c6:	a6 dd       	rcall	.-1204   	; 0x414 <_Z14serialEventRunv>
 8c8:	fb cf       	rjmp	.-10     	; 0x8c0 <main+0xa>

000008ca <_ZN5Print5writeEPKhj>:
 8ca:	cf 92       	push	r12
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 8cc:	df 92       	push	r13
 8ce:	ef 92       	push	r14
 8d0:	ff 92       	push	r15
 8d2:	0f 93       	push	r16
 8d4:	1f 93       	push	r17
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	6c 01       	movw	r12, r24
 8dc:	7a 01       	movw	r14, r20
 8de:	8b 01       	movw	r16, r22
 8e0:	c0 e0       	ldi	r28, 0x00	; 0
 8e2:	d0 e0       	ldi	r29, 0x00	; 0
 8e4:	ce 15       	cp	r28, r14
 8e6:	df 05       	cpc	r29, r15
 8e8:	81 f0       	breq	.+32     	; 0x90a <_ZN5Print5writeEPKhj+0x40>
 8ea:	d8 01       	movw	r26, r16
 8ec:	6d 91       	ld	r22, X+
 8ee:	8d 01       	movw	r16, r26
 8f0:	d6 01       	movw	r26, r12
 8f2:	ed 91       	ld	r30, X+
 8f4:	fc 91       	ld	r31, X
 8f6:	01 90       	ld	r0, Z+
 8f8:	f0 81       	ld	r31, Z
 8fa:	e0 2d       	mov	r30, r0
 8fc:	c6 01       	movw	r24, r12
 8fe:	19 95       	eicall
 900:	89 2b       	or	r24, r25
 902:	11 f0       	breq	.+4      	; 0x908 <_ZN5Print5writeEPKhj+0x3e>
 904:	21 96       	adiw	r28, 0x01	; 1
 906:	ee cf       	rjmp	.-36     	; 0x8e4 <_ZN5Print5writeEPKhj+0x1a>
 908:	7e 01       	movw	r14, r28
 90a:	c7 01       	movw	r24, r14
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	1f 91       	pop	r17
 912:	0f 91       	pop	r16
 914:	ff 90       	pop	r15
 916:	ef 90       	pop	r14
 918:	df 90       	pop	r13
 91a:	cf 90       	pop	r12
 91c:	08 95       	ret

0000091e <_ZN5Print5writeEPKc>:
 91e:	61 15       	cp	r22, r1
 920:	71 05       	cpc	r23, r1
 922:	79 f0       	breq	.+30     	; 0x942 <_ZN5Print5writeEPKc+0x24>
 924:	fb 01       	movw	r30, r22
 926:	01 90       	ld	r0, Z+
 928:	00 20       	and	r0, r0
 92a:	e9 f7       	brne	.-6      	; 0x926 <_ZN5Print5writeEPKc+0x8>
 92c:	31 97       	sbiw	r30, 0x01	; 1
 92e:	af 01       	movw	r20, r30
 930:	46 1b       	sub	r20, r22
 932:	57 0b       	sbc	r21, r23
 934:	dc 01       	movw	r26, r24
 936:	ed 91       	ld	r30, X+
 938:	fc 91       	ld	r31, X
 93a:	02 80       	ldd	r0, Z+2	; 0x02
 93c:	f3 81       	ldd	r31, Z+3	; 0x03
 93e:	e0 2d       	mov	r30, r0
 940:	19 94       	eijmp
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	08 95       	ret

00000948 <_ZN5Print5printEc>:
 948:	dc 01       	movw	r26, r24
 94a:	ed 91       	ld	r30, X+
 94c:	fc 91       	ld	r31, X
 94e:	01 90       	ld	r0, Z+
 950:	f0 81       	ld	r31, Z
 952:	e0 2d       	mov	r30, r0
 954:	19 94       	eijmp

00000956 <_ZN5Print7printlnEv>:
 956:	61 e0       	ldi	r22, 0x01	; 1
 958:	73 e0       	ldi	r23, 0x03	; 3
 95a:	e1 cf       	rjmp	.-62     	; 0x91e <_ZN5Print5writeEPKc>

0000095c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 95c:	0f 93       	push	r16
 95e:	1f 93       	push	r17
 960:	cf 93       	push	r28
 962:	df 93       	push	r29
 964:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 966:	db df       	rcall	.-74     	; 0x91e <_ZN5Print5writeEPKc>
 968:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 96a:	ce 01       	movw	r24, r28
 96c:	f4 df       	rcall	.-24     	; 0x956 <_ZN5Print7printlnEv>
  return n;
}
 96e:	80 0f       	add	r24, r16
 970:	91 1f       	adc	r25, r17
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	1f 91       	pop	r17
 978:	0f 91       	pop	r16
 97a:	08 95       	ret

0000097c <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 97c:	0f 93       	push	r16
 97e:	1f 93       	push	r17
 980:	cf 93       	push	r28
 982:	df 93       	push	r29
 984:	ec 01       	movw	r28, r24
  size_t n = print(c);
 986:	e0 df       	rcall	.-64     	; 0x948 <_ZN5Print5printEc>
 988:	8c 01       	movw	r16, r24
  n += println();
 98a:	ce 01       	movw	r24, r28
 98c:	e4 df       	rcall	.-56     	; 0x956 <_ZN5Print7printlnEv>
  return n;
}
 98e:	80 0f       	add	r24, r16
 990:	91 1f       	adc	r25, r17
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	1f 91       	pop	r17
 998:	0f 91       	pop	r16
 99a:	08 95       	ret

0000099c <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 99c:	1f 92       	push	r1
 99e:	0f 92       	push	r0
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	0f 92       	push	r0
 9a4:	11 24       	eor	r1, r1
 9a6:	2f 93       	push	r18
 9a8:	3f 93       	push	r19
 9aa:	8f 93       	push	r24
 9ac:	9f 93       	push	r25
 9ae:	af 93       	push	r26
 9b0:	bf 93       	push	r27
 9b2:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <timer0_millis>
 9b6:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <timer0_millis+0x1>
 9ba:	a0 91 4d 04 	lds	r26, 0x044D	; 0x80044d <timer0_millis+0x2>
 9be:	b0 91 4e 04 	lds	r27, 0x044E	; 0x80044e <timer0_millis+0x3>
 9c2:	30 91 4a 04 	lds	r19, 0x044A	; 0x80044a <timer0_fract>
 9c6:	23 e0       	ldi	r18, 0x03	; 3
 9c8:	23 0f       	add	r18, r19
 9ca:	2d 37       	cpi	r18, 0x7D	; 125
 9cc:	20 f4       	brcc	.+8      	; 0x9d6 <__vector_23+0x3a>
 9ce:	01 96       	adiw	r24, 0x01	; 1
 9d0:	a1 1d       	adc	r26, r1
 9d2:	b1 1d       	adc	r27, r1
 9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <__vector_23+0x44>
 9d6:	26 e8       	ldi	r18, 0x86	; 134
 9d8:	23 0f       	add	r18, r19
 9da:	02 96       	adiw	r24, 0x02	; 2
 9dc:	a1 1d       	adc	r26, r1
 9de:	b1 1d       	adc	r27, r1
 9e0:	20 93 4a 04 	sts	0x044A, r18	; 0x80044a <timer0_fract>
 9e4:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <timer0_millis>
 9e8:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <timer0_millis+0x1>
 9ec:	a0 93 4d 04 	sts	0x044D, r26	; 0x80044d <timer0_millis+0x2>
 9f0:	b0 93 4e 04 	sts	0x044E, r27	; 0x80044e <timer0_millis+0x3>
 9f4:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <timer0_overflow_count>
 9f8:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <timer0_overflow_count+0x1>
 9fc:	a0 91 51 04 	lds	r26, 0x0451	; 0x800451 <timer0_overflow_count+0x2>
 a00:	b0 91 52 04 	lds	r27, 0x0452	; 0x800452 <timer0_overflow_count+0x3>
 a04:	01 96       	adiw	r24, 0x01	; 1
 a06:	a1 1d       	adc	r26, r1
 a08:	b1 1d       	adc	r27, r1
 a0a:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <timer0_overflow_count>
 a0e:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <timer0_overflow_count+0x1>
 a12:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <timer0_overflow_count+0x2>
 a16:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <timer0_overflow_count+0x3>
 a1a:	bf 91       	pop	r27
 a1c:	af 91       	pop	r26
 a1e:	9f 91       	pop	r25
 a20:	8f 91       	pop	r24
 a22:	3f 91       	pop	r19
 a24:	2f 91       	pop	r18
 a26:	0f 90       	pop	r0
 a28:	0f be       	out	0x3f, r0	; 63
 a2a:	0f 90       	pop	r0
 a2c:	1f 90       	pop	r1
 a2e:	18 95       	reti

00000a30 <micros>:
 a30:	3f b7       	in	r19, 0x3f	; 63
 a32:	f8 94       	cli
 a34:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <timer0_overflow_count>
 a38:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <timer0_overflow_count+0x1>
 a3c:	a0 91 51 04 	lds	r26, 0x0451	; 0x800451 <timer0_overflow_count+0x2>
 a40:	b0 91 52 04 	lds	r27, 0x0452	; 0x800452 <timer0_overflow_count+0x3>
 a44:	26 b5       	in	r18, 0x26	; 38
 a46:	a8 9b       	sbis	0x15, 0	; 21
 a48:	05 c0       	rjmp	.+10     	; 0xa54 <micros+0x24>
 a4a:	2f 3f       	cpi	r18, 0xFF	; 255
 a4c:	19 f0       	breq	.+6      	; 0xa54 <micros+0x24>
 a4e:	01 96       	adiw	r24, 0x01	; 1
 a50:	a1 1d       	adc	r26, r1
 a52:	b1 1d       	adc	r27, r1
 a54:	3f bf       	out	0x3f, r19	; 63
 a56:	ba 2f       	mov	r27, r26
 a58:	a9 2f       	mov	r26, r25
 a5a:	98 2f       	mov	r25, r24
 a5c:	88 27       	eor	r24, r24
 a5e:	82 0f       	add	r24, r18
 a60:	91 1d       	adc	r25, r1
 a62:	a1 1d       	adc	r26, r1
 a64:	b1 1d       	adc	r27, r1
 a66:	bc 01       	movw	r22, r24
 a68:	cd 01       	movw	r24, r26
 a6a:	42 e0       	ldi	r20, 0x02	; 2
 a6c:	66 0f       	add	r22, r22
 a6e:	77 1f       	adc	r23, r23
 a70:	88 1f       	adc	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	4a 95       	dec	r20
 a76:	d1 f7       	brne	.-12     	; 0xa6c <micros+0x3c>
 a78:	08 95       	ret

00000a7a <delay>:
 a7a:	8f 92       	push	r8
 a7c:	9f 92       	push	r9
 a7e:	af 92       	push	r10
 a80:	bf 92       	push	r11
 a82:	cf 92       	push	r12
 a84:	df 92       	push	r13
 a86:	ef 92       	push	r14
 a88:	ff 92       	push	r15
 a8a:	6b 01       	movw	r12, r22
 a8c:	7c 01       	movw	r14, r24
 a8e:	d0 df       	rcall	.-96     	; 0xa30 <micros>
 a90:	4b 01       	movw	r8, r22
 a92:	5c 01       	movw	r10, r24
 a94:	c1 14       	cp	r12, r1
 a96:	d1 04       	cpc	r13, r1
 a98:	e1 04       	cpc	r14, r1
 a9a:	f1 04       	cpc	r15, r1
 a9c:	f1 f0       	breq	.+60     	; 0xada <delay+0x60>
 a9e:	47 d1       	rcall	.+654    	; 0xd2e <yield>
 aa0:	c7 df       	rcall	.-114    	; 0xa30 <micros>
 aa2:	dc 01       	movw	r26, r24
 aa4:	cb 01       	movw	r24, r22
 aa6:	88 19       	sub	r24, r8
 aa8:	99 09       	sbc	r25, r9
 aaa:	aa 09       	sbc	r26, r10
 aac:	bb 09       	sbc	r27, r11
 aae:	88 3e       	cpi	r24, 0xE8	; 232
 ab0:	93 40       	sbci	r25, 0x03	; 3
 ab2:	a1 05       	cpc	r26, r1
 ab4:	b1 05       	cpc	r27, r1
 ab6:	70 f3       	brcs	.-36     	; 0xa94 <delay+0x1a>
 ab8:	21 e0       	ldi	r18, 0x01	; 1
 aba:	c2 1a       	sub	r12, r18
 abc:	d1 08       	sbc	r13, r1
 abe:	e1 08       	sbc	r14, r1
 ac0:	f1 08       	sbc	r15, r1
 ac2:	88 ee       	ldi	r24, 0xE8	; 232
 ac4:	88 0e       	add	r8, r24
 ac6:	83 e0       	ldi	r24, 0x03	; 3
 ac8:	98 1e       	adc	r9, r24
 aca:	a1 1c       	adc	r10, r1
 acc:	b1 1c       	adc	r11, r1
 ace:	c1 14       	cp	r12, r1
 ad0:	d1 04       	cpc	r13, r1
 ad2:	e1 04       	cpc	r14, r1
 ad4:	f1 04       	cpc	r15, r1
 ad6:	21 f7       	brne	.-56     	; 0xaa0 <delay+0x26>
 ad8:	dd cf       	rjmp	.-70     	; 0xa94 <delay+0x1a>
 ada:	ff 90       	pop	r15
 adc:	ef 90       	pop	r14
 ade:	df 90       	pop	r13
 ae0:	cf 90       	pop	r12
 ae2:	bf 90       	pop	r11
 ae4:	af 90       	pop	r10
 ae6:	9f 90       	pop	r9
 ae8:	8f 90       	pop	r8
 aea:	08 95       	ret

00000aec <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 aec:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 aee:	84 b5       	in	r24, 0x24	; 36
 af0:	82 60       	ori	r24, 0x02	; 2
 af2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 af4:	84 b5       	in	r24, 0x24	; 36
 af6:	81 60       	ori	r24, 0x01	; 1
 af8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 afa:	85 b5       	in	r24, 0x25	; 37
 afc:	82 60       	ori	r24, 0x02	; 2
 afe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 b00:	85 b5       	in	r24, 0x25	; 37
 b02:	81 60       	ori	r24, 0x01	; 1
 b04:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 b06:	ee e6       	ldi	r30, 0x6E	; 110
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	80 81       	ld	r24, Z
 b0c:	81 60       	ori	r24, 0x01	; 1
 b0e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 b10:	e1 e8       	ldi	r30, 0x81	; 129
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 b16:	80 81       	ld	r24, Z
 b18:	82 60       	ori	r24, 0x02	; 2
 b1a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 b1c:	80 81       	ld	r24, Z
 b1e:	81 60       	ori	r24, 0x01	; 1
 b20:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 b22:	e0 e8       	ldi	r30, 0x80	; 128
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	80 81       	ld	r24, Z
 b28:	81 60       	ori	r24, 0x01	; 1
 b2a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 b2c:	e1 eb       	ldi	r30, 0xB1	; 177
 b2e:	f0 e0       	ldi	r31, 0x00	; 0
 b30:	80 81       	ld	r24, Z
 b32:	84 60       	ori	r24, 0x04	; 4
 b34:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 b36:	e0 eb       	ldi	r30, 0xB0	; 176
 b38:	f0 e0       	ldi	r31, 0x00	; 0
 b3a:	80 81       	ld	r24, Z
 b3c:	81 60       	ori	r24, 0x01	; 1
 b3e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 b40:	e1 e9       	ldi	r30, 0x91	; 145
 b42:	f0 e0       	ldi	r31, 0x00	; 0
 b44:	80 81       	ld	r24, Z
 b46:	82 60       	ori	r24, 0x02	; 2
 b48:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 b4a:	80 81       	ld	r24, Z
 b4c:	81 60       	ori	r24, 0x01	; 1
 b4e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 b50:	e0 e9       	ldi	r30, 0x90	; 144
 b52:	f0 e0       	ldi	r31, 0x00	; 0
 b54:	80 81       	ld	r24, Z
 b56:	81 60       	ori	r24, 0x01	; 1
 b58:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 b5a:	e1 ea       	ldi	r30, 0xA1	; 161
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	80 81       	ld	r24, Z
 b60:	82 60       	ori	r24, 0x02	; 2
 b62:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 b64:	80 81       	ld	r24, Z
 b66:	81 60       	ori	r24, 0x01	; 1
 b68:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 b6a:	e0 ea       	ldi	r30, 0xA0	; 160
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	81 60       	ori	r24, 0x01	; 1
 b72:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 b74:	e1 e2       	ldi	r30, 0x21	; 33
 b76:	f1 e0       	ldi	r31, 0x01	; 1
 b78:	80 81       	ld	r24, Z
 b7a:	82 60       	ori	r24, 0x02	; 2
 b7c:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 b7e:	80 81       	ld	r24, Z
 b80:	81 60       	ori	r24, 0x01	; 1
 b82:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 b84:	e0 e2       	ldi	r30, 0x20	; 32
 b86:	f1 e0       	ldi	r31, 0x01	; 1
 b88:	80 81       	ld	r24, Z
 b8a:	81 60       	ori	r24, 0x01	; 1
 b8c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 b8e:	ea e7       	ldi	r30, 0x7A	; 122
 b90:	f0 e0       	ldi	r31, 0x00	; 0
 b92:	80 81       	ld	r24, Z
 b94:	84 60       	ori	r24, 0x04	; 4
 b96:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 b98:	80 81       	ld	r24, Z
 b9a:	82 60       	ori	r24, 0x02	; 2
 b9c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 b9e:	80 81       	ld	r24, Z
 ba0:	81 60       	ori	r24, 0x01	; 1
 ba2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 ba4:	80 81       	ld	r24, Z
 ba6:	80 68       	ori	r24, 0x80	; 128
 ba8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 baa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 bae:	08 95       	ret

00000bb0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	fc 01       	movw	r30, r24
 bb4:	31 97       	sbiw	r30, 0x01	; 1
 bb6:	e2 31       	cpi	r30, 0x12	; 18
 bb8:	f1 05       	cpc	r31, r1
 bba:	08 f0       	brcs	.+2      	; 0xbbe <turnOffPWM+0xe>
 bbc:	4d c0       	rjmp	.+154    	; 0xc58 <turnOffPWM+0xa8>
 bbe:	88 27       	eor	r24, r24
 bc0:	ee 58       	subi	r30, 0x8E	; 142
 bc2:	ff 4f       	sbci	r31, 0xFF	; 255
 bc4:	8f 4f       	sbci	r24, 0xFF	; 255
 bc6:	d6 c0       	rjmp	.+428    	; 0xd74 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 bc8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 bcc:	8f 77       	andi	r24, 0x7F	; 127
 bce:	03 c0       	rjmp	.+6      	; 0xbd6 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 bd0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 bd4:	8f 7d       	andi	r24, 0xDF	; 223
 bd6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 bda:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 bdc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 be0:	87 7f       	andi	r24, 0xF7	; 247
 be2:	f9 cf       	rjmp	.-14     	; 0xbd6 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 be4:	84 b5       	in	r24, 0x24	; 36
 be6:	8f 77       	andi	r24, 0x7F	; 127
 be8:	02 c0       	rjmp	.+4      	; 0xbee <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 bea:	84 b5       	in	r24, 0x24	; 36
 bec:	8f 7d       	andi	r24, 0xDF	; 223
 bee:	84 bd       	out	0x24, r24	; 36
 bf0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 bf2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 bf6:	8f 77       	andi	r24, 0x7F	; 127
 bf8:	03 c0       	rjmp	.+6      	; 0xc00 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 bfa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 bfe:	8f 7d       	andi	r24, 0xDF	; 223
 c00:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 c04:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 c06:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 c0a:	8f 77       	andi	r24, 0x7F	; 127
 c0c:	07 c0       	rjmp	.+14     	; 0xc1c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 c0e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 c12:	8f 7d       	andi	r24, 0xDF	; 223
 c14:	03 c0       	rjmp	.+6      	; 0xc1c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 c16:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 c1a:	87 7f       	andi	r24, 0xF7	; 247
 c1c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 c20:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 c22:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 c26:	8f 77       	andi	r24, 0x7F	; 127
 c28:	07 c0       	rjmp	.+14     	; 0xc38 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 c2a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 c2e:	8f 7d       	andi	r24, 0xDF	; 223
 c30:	03 c0       	rjmp	.+6      	; 0xc38 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 c32:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 c36:	87 7f       	andi	r24, 0xF7	; 247
 c38:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 c3c:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 c3e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 c42:	8f 77       	andi	r24, 0x7F	; 127
 c44:	07 c0       	rjmp	.+14     	; 0xc54 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 c46:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 c4a:	8f 7d       	andi	r24, 0xDF	; 223
 c4c:	03 c0       	rjmp	.+6      	; 0xc54 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 c4e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 c52:	87 7f       	andi	r24, 0xF7	; 247
 c54:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 c58:	08 95       	ret

00000c5a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 c5a:	cf 93       	push	r28
 c5c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	fc 01       	movw	r30, r24
 c62:	e2 5b       	subi	r30, 0xB2	; 178
 c64:	fe 4f       	sbci	r31, 0xFE	; 254
 c66:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 c68:	fc 01       	movw	r30, r24
 c6a:	ec 56       	subi	r30, 0x6C	; 108
 c6c:	fe 4f       	sbci	r31, 0xFE	; 254
 c6e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 c70:	88 23       	and	r24, r24
 c72:	61 f1       	breq	.+88     	; 0xccc <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	88 0f       	add	r24, r24
 c78:	99 1f       	adc	r25, r25
 c7a:	fc 01       	movw	r30, r24
 c7c:	ec 50       	subi	r30, 0x0C	; 12
 c7e:	fe 4f       	sbci	r31, 0xFE	; 254
 c80:	c5 91       	lpm	r28, Z+
 c82:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 c84:	fc 01       	movw	r30, r24
 c86:	e6 52       	subi	r30, 0x26	; 38
 c88:	fe 4f       	sbci	r31, 0xFE	; 254
 c8a:	a5 91       	lpm	r26, Z+
 c8c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 c8e:	61 11       	cpse	r22, r1
 c90:	09 c0       	rjmp	.+18     	; 0xca4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 c92:	9f b7       	in	r25, 0x3f	; 63
                cli();
 c94:	f8 94       	cli
		*reg &= ~bit;
 c96:	88 81       	ld	r24, Y
 c98:	20 95       	com	r18
 c9a:	82 23       	and	r24, r18
 c9c:	88 83       	st	Y, r24
		*out &= ~bit;
 c9e:	ec 91       	ld	r30, X
 ca0:	2e 23       	and	r18, r30
 ca2:	0b c0       	rjmp	.+22     	; 0xcba <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 ca4:	62 30       	cpi	r22, 0x02	; 2
 ca6:	61 f4       	brne	.+24     	; 0xcc0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 ca8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 caa:	f8 94       	cli
		*reg &= ~bit;
 cac:	88 81       	ld	r24, Y
 cae:	32 2f       	mov	r19, r18
 cb0:	30 95       	com	r19
 cb2:	83 23       	and	r24, r19
 cb4:	88 83       	st	Y, r24
		*out |= bit;
 cb6:	ec 91       	ld	r30, X
 cb8:	2e 2b       	or	r18, r30
 cba:	2c 93       	st	X, r18
		SREG = oldSREG;
 cbc:	9f bf       	out	0x3f, r25	; 63
 cbe:	06 c0       	rjmp	.+12     	; 0xccc <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 cc0:	8f b7       	in	r24, 0x3f	; 63
                cli();
 cc2:	f8 94       	cli
		*reg |= bit;
 cc4:	e8 81       	ld	r30, Y
 cc6:	2e 2b       	or	r18, r30
 cc8:	28 83       	st	Y, r18
		SREG = oldSREG;
 cca:	8f bf       	out	0x3f, r24	; 63
	}
}
 ccc:	df 91       	pop	r29
 cce:	cf 91       	pop	r28
 cd0:	08 95       	ret

00000cd2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 cd2:	1f 93       	push	r17
 cd4:	cf 93       	push	r28
 cd6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 cd8:	28 2f       	mov	r18, r24
 cda:	30 e0       	ldi	r19, 0x00	; 0
 cdc:	f9 01       	movw	r30, r18
 cde:	e8 5f       	subi	r30, 0xF8	; 248
 ce0:	fe 4f       	sbci	r31, 0xFE	; 254
 ce2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 ce4:	f9 01       	movw	r30, r18
 ce6:	e2 5b       	subi	r30, 0xB2	; 178
 ce8:	fe 4f       	sbci	r31, 0xFE	; 254
 cea:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 cec:	f9 01       	movw	r30, r18
 cee:	ec 56       	subi	r30, 0x6C	; 108
 cf0:	fe 4f       	sbci	r31, 0xFE	; 254
 cf2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 cf4:	cc 23       	and	r28, r28
 cf6:	b9 f0       	breq	.+46     	; 0xd26 <digitalWrite+0x54>
 cf8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 cfa:	81 11       	cpse	r24, r1
 cfc:	59 df       	rcall	.-334    	; 0xbb0 <turnOffPWM>

	out = portOutputRegister(port);
 cfe:	ec 2f       	mov	r30, r28
 d00:	f0 e0       	ldi	r31, 0x00	; 0
 d02:	ee 0f       	add	r30, r30
 d04:	ff 1f       	adc	r31, r31
 d06:	e6 52       	subi	r30, 0x26	; 38
 d08:	fe 4f       	sbci	r31, 0xFE	; 254
 d0a:	a5 91       	lpm	r26, Z+
 d0c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 d0e:	9f b7       	in	r25, 0x3f	; 63
	cli();
 d10:	f8 94       	cli

	if (val == LOW) {
 d12:	11 11       	cpse	r17, r1
 d14:	04 c0       	rjmp	.+8      	; 0xd1e <digitalWrite+0x4c>
		*out &= ~bit;
 d16:	8c 91       	ld	r24, X
 d18:	d0 95       	com	r29
 d1a:	d8 23       	and	r29, r24
 d1c:	02 c0       	rjmp	.+4      	; 0xd22 <digitalWrite+0x50>
	} else {
		*out |= bit;
 d1e:	ec 91       	ld	r30, X
 d20:	de 2b       	or	r29, r30
 d22:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 d24:	9f bf       	out	0x3f, r25	; 63
}
 d26:	df 91       	pop	r29
 d28:	cf 91       	pop	r28
 d2a:	1f 91       	pop	r17
 d2c:	08 95       	ret

00000d2e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 d2e:	08 95       	ret

00000d30 <__udivmodsi4>:
 d30:	a1 e2       	ldi	r26, 0x21	; 33
 d32:	1a 2e       	mov	r1, r26
 d34:	aa 1b       	sub	r26, r26
 d36:	bb 1b       	sub	r27, r27
 d38:	fd 01       	movw	r30, r26
 d3a:	0d c0       	rjmp	.+26     	; 0xd56 <__udivmodsi4_ep>

00000d3c <__udivmodsi4_loop>:
 d3c:	aa 1f       	adc	r26, r26
 d3e:	bb 1f       	adc	r27, r27
 d40:	ee 1f       	adc	r30, r30
 d42:	ff 1f       	adc	r31, r31
 d44:	a2 17       	cp	r26, r18
 d46:	b3 07       	cpc	r27, r19
 d48:	e4 07       	cpc	r30, r20
 d4a:	f5 07       	cpc	r31, r21
 d4c:	20 f0       	brcs	.+8      	; 0xd56 <__udivmodsi4_ep>
 d4e:	a2 1b       	sub	r26, r18
 d50:	b3 0b       	sbc	r27, r19
 d52:	e4 0b       	sbc	r30, r20
 d54:	f5 0b       	sbc	r31, r21

00000d56 <__udivmodsi4_ep>:
 d56:	66 1f       	adc	r22, r22
 d58:	77 1f       	adc	r23, r23
 d5a:	88 1f       	adc	r24, r24
 d5c:	99 1f       	adc	r25, r25
 d5e:	1a 94       	dec	r1
 d60:	69 f7       	brne	.-38     	; 0xd3c <__udivmodsi4_loop>
 d62:	60 95       	com	r22
 d64:	70 95       	com	r23
 d66:	80 95       	com	r24
 d68:	90 95       	com	r25
 d6a:	9b 01       	movw	r18, r22
 d6c:	ac 01       	movw	r20, r24
 d6e:	bd 01       	movw	r22, r26
 d70:	cf 01       	movw	r24, r30
 d72:	08 95       	ret

00000d74 <__tablejump2__>:
 d74:	ee 0f       	add	r30, r30
 d76:	ff 1f       	adc	r31, r31
 d78:	88 1f       	adc	r24, r24
 d7a:	8b bf       	out	0x3b, r24	; 59
 d7c:	07 90       	elpm	r0, Z+
 d7e:	f6 91       	elpm	r31, Z
 d80:	e0 2d       	mov	r30, r0
 d82:	19 94       	eijmp

00000d84 <_exit>:
 d84:	f8 94       	cli

00000d86 <__stop_program>:
 d86:	ff cf       	rjmp	.-2      	; 0xd86 <__stop_program>
